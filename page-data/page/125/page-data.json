{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/125","result":{"data":{"allPost":{"edges":[{"node":{"ID":2048,"Title":"What do telecom security teams need from a SIEM?","Description":"","PublishedAt":"2022-10-25 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/what-do-telecom-security-teams-need-from-a-siem","SourceName":"Elastic"}},{"node":{"ID":2051,"Title":"Customer trust relies on building IT systems that scale","Description":"","PublishedAt":"2022-10-25 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/customer-trust-relies-on-building-it-systems-that-scale","SourceName":"Elastic"}},{"node":{"ID":2054,"Title":"Observing your application through the eyes of a user: A brand new synthetic monitoring experience is coming","Description":"","PublishedAt":"2022-10-25 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/new-synthetic-monitoring-observability","SourceName":"Elastic"}},{"node":{"ID":2055,"Title":"Elastic Stack 7.17.7 released","Description":"<p>Version 7.17.7 of the Elastic Stack was released today. We recommend you <a href=\"https://www.elastic.co/downloads\">upgrade to this latest version</a>. We recommend 7.17.7 over the previous patch versions in 7.17.x.</p>\n<p>For details of the issues that have been fixed and a full list of changes for each product in this version, refer to the release notes: </p>\n<h2 id=\"7177releasenotes\">7.17.7 Release Notes</h2>\n<h3 id=\"elasticstack\">Elastic Stack</h3>\n<ul>\n<li><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/release-notes-7.17.7.html\">Elasticsearch</a></li>\n<li><a href=\"https://www.elastic.co/guide/en/kibana/7.17/release-notes-7.17.7.html\">Kibana</a></li>\n<li><a href=\"https://www.elastic.co/guide/en/beats/libbeat/7.17/release-notes-7.17.7.html\">Beats</a></li>\n<li><a href=\"https://www.elastic.co/guide/en/logstash/7.17/logstash-7-17-7.html\">Logstash</a></li>\n</ul>\n<h3 id=\"elasticenterprisesearch\">Elastic Enterprise Search</h3>\n<ul>\n<li><a href=\"https://www.elastic.co/guide/en/enterprise-search/7.17/release-notes-7.17.7.html#release-notes-7-17-7-enterprise-search\">Enterprise Search</a></li>\n</ul>\n<h3 id=\"elasticobservability\">Elastic Observability</h3>\n<ul>\n<li><a href=\"https://www.elastic.co/guide/en/apm/guide/7.17/release-notes-7.17.html#release-notes-7.17.7\">APM</a></li>\n</ul>\n<h3 id=\"elasticsecurity\">Elastic Security</h3>\n<ul>\n<li><a href=\"https://www.elastic.co/guide/en/security/7.17/release-notes-header-7.17.0.html#release-notes-7.17.7\">Elastic Security Solution</a></li>\n</ul>","PublishedAt":"2022-10-25 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/elastic-stack-7-17-7-released","SourceName":"Elastic"}},{"node":{"ID":2042,"Title":"MERCARI HACK FEST 2022 : UNLIMITED HACKTIVITY TO UNLOCK HIDDEN POTENTIALS #MercariHackFest","Description":"<p>Hello everyone! My name is Yoza from the Engineering Office! I am here to share some good news with you!! &#11088;MERCARI HACK FEST IS COMING!&#11088; Some readers may be wondering “what Mercari Hack Fest is about?”, or some others may already know that Mercari is regularly hosting a technology festival similar to Hackathon. This is [&hellip;]</p>\n","PublishedAt":"2022-10-24 21:17:33+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20221024-mercari-hack-fest-2022-unlimited-hacktivity-to-unlock-hidden-potentials-mercarihackfest/","SourceName":"Mercari"}},{"node":{"ID":2041,"Title":"How we built the Tinder API Gateway","Description":"","PublishedAt":"2022-10-24 20:17:11+00:00","OriginURL":"https://medium.com/tinder/how-we-built-the-tinder-api-gateway-831c6ca5ceca?source=rss----906928af8599---4","SourceName":"Tinder"}},{"node":{"ID":2040,"Title":"AWS Week in Review – October 24, 2022","Description":"Last week, we announced plans to launch the AWS Asia Pacific (Bangkok) Region, which will become our third AWS Region in Southeast Asia. This Region will have three Availability Zones and will give AWS customers in Thailand the ability to run workloads and store data that must remain in-country. In the Works – AWS Region […]","PublishedAt":"2022-10-24 19:37:21+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/aws-week-in-review-october-24-2022/","SourceName":"AWS"}},{"node":{"ID":2038,"Title":"From zero to 10 million lines of Kotlin","Description":"<p>We’re sharing lessons learned from shifting our Android development from Java to Kotlin. Kotlin is a popular language for Android development and offers some key advantages over Java.  As of today, our Android codebase contains over 10 million lines of Kotlin code. We&#8217;re open sourcing various examples and utilities we used to manipulate Kotlin code [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2022/10/24/android/android-java-kotlin-migration/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2022/10/24/android/android-java-kotlin-migration/\">From zero to 10 million lines of Kotlin</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n","PublishedAt":"2022-10-24 16:00:50+00:00","OriginURL":"https://engineering.fb.com/2022/10/24/android/android-java-kotlin-migration/","SourceName":"Facebook"}},{"node":{"ID":2039,"Title":"X.509 Certificate Management with Vault","Description":"In this blog post, we’ll look at practical public key certificate management in HashiCorp Vault using dynamic secrets rotation.","PublishedAt":"2022-10-24 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/certificate-management-with-vault","SourceName":"HashiCorp"}},{"node":{"ID":2034,"Title":"How hardware and software can maximize your flow states","Description":"<p>Keystrokes per minute is a terrible measure of productivity, but a keyboard can help you focus better to be productive. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2022/10/24/how-hardware-and-software-can-maximize-your-flow-states/\">How hardware and software can maximize your flow states</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2022-10-24 14:00:00+00:00","OriginURL":"https://stackoverflow.blog/2022/10/24/how-hardware-and-software-can-maximize-your-flow-states/","SourceName":"Stack Overflow"}},{"node":{"ID":2032,"Title":"And here's another one: the Next.js Edge Runtime becomes the fourth full-stack framework supported by Cloudflare Pages","Description":"You can now deploy SSR Next.js applications to the Cloudflare Pages platform ⚡️","PublishedAt":"2022-10-24 13:00:00+00:00","OriginURL":"https://blog.cloudflare.com/next-on-pages/","SourceName":"Cloudflare"}},{"node":{"ID":2031,"Title":"Miro Node.js REST API client","Description":"","PublishedAt":"2022-10-24 07:45:00+00:00","OriginURL":"https://medium.com/miro-engineering/miro-node-js-rest-api-client-82c2d11e2d00?source=rss----555f7fd62a50---4","SourceName":"Miro Engineering"}},{"node":{"ID":2030,"Title":"A Message from Snyk CEO Peter McKay","Description":"Below is a message that was sent out to all Snyk employees today from&#160;Snyk CEO Peter McKay. Snykers, Today is one of the most difficult in Snyk’s history. Over the course of 2022 while our business has continued to grow, we’ve also witnessed a number of significant market shifts, and, as a result, we are","PublishedAt":"2022-10-24 05:00:02+00:00","OriginURL":"https://snyk.io/blog/a-message-from-snyk-ceo-peter-mckay-oct-2022/","SourceName":"Snyk"}},{"node":{"ID":2037,"Title":"Reskilling Against the Risk of Automation","Description":"<p>Demand for both entry-level and highly skilled tech talent is at an all-time high, and companies across industries and geographies are struggling to find qualified employees. And, with 1.1 billion jobs liable to be radically transformed by technology in the next decade, a “reskilling revolution” is reaching a critical mass. Already underrepresented populations like workers [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/reskilling-against-the-risk-of-automation/\">Reskilling Against the Risk of Automation</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-10-24 04:00:07+00:00","OriginURL":"https://blog.cloudera.com/reskilling-against-the-risk-of-automation/","SourceName":"Cloudera"}},{"node":{"ID":2033,"Title":"Public sector security: 4 considerations for implementing a modern SIEM","Description":"","PublishedAt":"2022-10-24 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/public-sector-security-4-considerations-for-implementing-a-modern-siem","SourceName":"Elastic"}},{"node":{"ID":2035,"Title":"The easy way to find security privileges in Elasticsearch","Description":"","PublishedAt":"2022-10-24 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/the-easy-way-to-find-security-privileges-in-elasticsearch","SourceName":"Elastic"}},{"node":{"ID":2036,"Title":"Best practices for network perimeter security in cloud-native environments","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/securing-cloud-native-infrastructure-network-perimeter/securing-cloud-native-infrastructure-network-perimeter-hero.png\" width=\"100%\"/>Cloud-native infrastructure has become the standard for deploying applications that are performant and readily available to a globally distributed user base. While this has enabled organizations to quickly adapt to the demands of modern app users, the rapid nature of this migration has also made cloud resources a primary target for security threats. According to a recent study from ThoughtLab, surveyed organizations saw a 15 percent increase in the average number of digital attacks and data breaches between 2020 and 2021.","PublishedAt":"2022-10-24 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/securing-cloud-native-infrastructure-network-perimeter/","SourceName":"Datadog"}},{"node":{"ID":2028,"Title":"Global Week of Service 2022: 430+ Clouderans Engage for Good!","Description":"<p>Cloudera’s Global Week of Service - a week each year the business dedicates to doing good. Learn about the impact our employees made throughout the week, including the first ever, Unplug with Kindness campaign.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/global-week-of-service-2022-430-clouderans-engage-for-good/\">Global Week of Service 2022: 430+ Clouderans Engage for Good!</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-10-21 18:30:33+00:00","OriginURL":"https://blog.cloudera.com/global-week-of-service-2022-430-clouderans-engage-for-good/","SourceName":"Cloudera"}},{"node":{"ID":2027,"Title":"HashiConf Global 2022: From Zero Trust to No Code","Description":"Check out the highlights from HashiConf Global 2022 and watch the 40+ keynote and session recordings now live on YouTube.","PublishedAt":"2022-10-21 16:30:00+00:00","OriginURL":"https://www.hashicorp.com/blog/hashiconf-global-2022-from-zero-trust-to-no-code","SourceName":"HashiCorp"}},{"node":{"ID":2025,"Title":"Page Shield can now watch for malicious outbound connections made by third-party JavaScript code","Description":"Starting today, Page Shield can now watch for malicious outbound connections made by third-party JavaScript code","PublishedAt":"2022-10-21 13:53:49+00:00","OriginURL":"https://blog.cloudflare.com/page-shield-connection-monitor/","SourceName":"Cloudflare"}},{"node":{"ID":2026,"Title":"How to send Snyk vulnerability data to the New Relic observability platform","Description":"Learn to leverage the different options that the Snyk platform provides to send all your application security vulnerabilities found by Snyk directly to your New Relic observability platform","PublishedAt":"2022-10-21 13:43:37+00:00","OriginURL":"https://snyk.io/blog/snyk-security-vulnerability-new-relic-observability/","SourceName":"Snyk"}},{"node":{"ID":2024,"Title":"The Overflow #148: How to job hop","Description":"<p>The service-oriented approach to 1MM rep, one qubit, and less scary cryptography</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2022/10/21/the-overflow-148-how-to-job-hop/\">The Overflow #148: How to job hop  </a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2022-10-21 13:00:00+00:00","OriginURL":"https://stackoverflow.blog/2022/10/21/the-overflow-148-how-to-job-hop/","SourceName":"Stack Overflow"}},{"node":{"ID":2023,"Title":"He helped build .NET and VS Code — Now’s he working on Web3 (Ep. 499)","Description":"<p>A long-time Microsoft employee explains his attraction to the new world of blockchain technologies.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2022/10/21/he-helped-build-net-and-vs-code-nows-he-working-on-web3-ep-499/\">He helped build .NET and VS Code — Now’s he working on Web3 (Ep. 499)</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2022-10-21 04:40:00+00:00","OriginURL":"https://stackoverflow.blog/2022/10/21/he-helped-build-net-and-vs-code-nows-he-working-on-web3-ep-499/","SourceName":"Stack Overflow"}},{"node":{"ID":2022,"Title":"Postman Essentials: Exploring the Collection Format","Description":"","PublishedAt":"2022-10-21 03:44:07+00:00","OriginURL":"https://medium.com/better-practices/postman-essentials-exploring-the-collection-format-1a8b08d79fca?source=rss----410f2fbc015d---4","SourceName":"Postman"}},{"node":{"ID":2020,"Title":"Cloud security fundamentals part 3: Empower your developers","Description":"A discussion of the third of five fundamentals of cloud security: empowering your developers. (Part three in a five-part series.)","PublishedAt":"2022-10-20 19:47:06+00:00","OriginURL":"https://snyk.io/blog/cloud-security-fundamentals-part-3/","SourceName":"Snyk"}},{"node":{"ID":2012,"Title":"A Sip of Elastic RUM (Real User Monitoring)","Description":"<p>Sorry if I lured you into the mood of having a sip of a wonderful cocktail made with rum and you realized that the RUM I’m talking about is not the rum you are craving. But, be assured that Elastic RUM is equally wonderful! Let’s take a sip! I do want to warn you that it will take a bit of time to go through the amount of detail I will cover in this blog.</p><h2>What is RUM?</h2><p>Elastic <a href=\"https://www.elastic.co/guide/en/apm/agent/js-base/4.x/index.html\" target=\"_self\">real user monitoring</a>, or RUM, captures user interactions with the web browser and provides a detailed view of the “real user experience” of your web applications from a performance perspective. Elastic’s RUM Agent is a <a href=\"https://www.elastic.co/guide/en/apm/agent/js-base/current/index.html\" target=\"_self\">JavaScript Agent</a>, which means it supports any JavaScript-based application. RUM can provide valuable insight into your applications. Some of the common benefits of RUM include:</p><ul><li>RUM performance data can help you identify bottlenecks and discover how site performance issues affect your visitors’ experience</li><li>User agent information captured by RUM enables you to identify the browsers, devices, and platforms most used by your customers so that you can make informed optimizations to your application</li><li>Together with location information, individual user performance data from RUM helps you understand regional performance of your website worldwide</li><li>RUM provides insight and measurement for your application’s service level agreements (SLA)</li><li>RUM gathers information on customer visit and click behavior over time that can be useful for development teams to identify the impact of new features</li></ul><h2>Getting started with RUM using Elastic APM</h2><p>In this blog, I will take you through the complete process of instrumenting a simple web application made of a React frontend and a Spring Boot backend, step by step. You will see how easy it is to use the RUM agent. As a bonus, you will also see how Elastic APM ties the frontend and the backend performance information together with a holistic, distributed trace view. Please see this previous blog for an overview of <a href=\"https://www.elastic.co/blog/distributed-tracing-opentracing-and-elastic-apm\" target=\"_self\">Elastic APM and distributed tracing</a> if you are interested in knowing more details.</p><p>To use Elastic APM real user monitoring, you have to have the Elastic Stack with APM server installed. You can of course <a href=\"https://www.elastic.co/downloads\" target=\"_self\">download</a> and install the latest Elastic Stack with APM server locally on your computer. However, the easiest approach would be creating an <a href=\"http://cloud.elastic.co\" target=\"_self\">Elastic Cloud</a> trial account and have your cluster ready in a few minutes. APM is enabled for the default I/O Optimized template. From now on, I’ll assume you have a cluster ready to go.</p><h3>Sample application</h3><p>The application we are going to instrument is a simple car database application made of a <a href=\"https://github.com/adamquan/carfront\" target=\"_self\">React frontend</a> and a <a href=\"https://github.com/adamquan/cardatabase\" target=\"_self\">Spring Boot backend</a> that provides API access to an in-memory car database. The application is purposely kept simple. The idea is to show you detailed instrumentation steps starting from zero so that you can instrument your own applications following the same steps.</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt6977d5827da59b86/5cb842a444c599c63eef1a56/sip-of-rum-1.png\" data-sys-asset-uid=\"blt6977d5827da59b86\" alt=\"A simple application with a React frontend and Spring backend\"/></p><p>Create a directory called CarApp anywhere on your laptop. Then clone both the frontend and the backend application into that directory.</p><pre class=\"prettyprint\">git clone https://github.com/carlyrichmond/carfront<br/>git clone https://github.com/carlyrichmond/cardatabase<br/></pre><p>As you can see, the application is extremely simple. There are only a couple of components in the React frontend and a few classes in the backend Spring Boot application. Build and run the application following the instructions in GitHub for both the frontend and backend. You should see something like this. You can browse, filter cars, and perform CRUD options on them.</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt7b68f2ba2628a996/5cb842a02a4acbd72a4882e5/sip-of-rum-2.png\" data-sys-asset-uid=\"blt7b68f2ba2628a996\" alt=\"The simple React user interface\"/></p><p>Now, with the application up running, we are ready to go through the instrumentation using the RUM agent.</p><h3>Rich out-of-the-box instrumentation with RUM</h3><p>An Elastic APM server is needed to get started. You will need to <a href=\"https://www.elastic.co/guide/en/apm/guide/current/configuration-rum.html#rum-enable\" target=\"_self\">enable RUM</a> to capture the events from your RUM agent. To set up your RUM agent, there are two ways of doing so:</p><ol><li>You can install the RUM agent as a project dependency via a package manager such as npm:<pre class=\"prettyprint\">npm install @elastic/apm-rum --save<br/></pre></li><li>Include the RUM agent via the HTML script tag. <a href=\"https://www.elastic.co/guide/en/apm/agent/rum-js/current/install-the-agent.html\" target=\"_self\">Note this can be performed as either a blocking or non-blocking operation as per the documentation</a>.<br/><pre class=\"prettyprint\">&lt;script <br/>src=\"https://unpkg.com/@elastic/apm-rum@5.12.0/dist/bundles/elastic-apm-rum.umd.min.js\"&gt;<br/>&lt;/script&gt;<br/>&lt;script&gt;<br/>  elasticApm.init({<br/>    serviceName: 'carfront',<br/>    serverUrl: 'http://localhost:8200',<br/>    serviceVersion: '0.90'<br/>  })<br/>&lt;/script&gt;<br/></pre></li></ol><p>Since our frontend is a React application, we are going to use the first approach. Once you've installed @elastic/apm-rum in your project, check out the initialization code in rum.js . This is located in the same directory as your index.js and will look a bit like this, but with serviceUrl replaced with your own APM server endpoint:</p><pre class=\"prettyprint\">import { init as initApm } from '@elastic/apm-rum'<br/>var apm = initApm({<br/> // Set required service name (allowed characters: a-z, A-Z, 0-9, -, _, and space)<br/> serviceName: 'carfront',<br/> // Set the version of your application<br/> // Used on the APM Server to find the right sourcemap<br/> serviceVersion: '0.90',<br/> // Set custom APM Server URL (default: http://localhost:8200)<br/> serverUrl: 'APM_URL',<br/> // distributedTracingOrigins: ['http://localhost:8080'],<br/>})<br/>export default apm;<br/></pre><p>That’s all it takes to initialize the RUM agent! If you are making use of framework specific features, such as routing in React, Angular, or Vue, you may want to also install and configure the framework specific integrations as well, which are covered in the <a href=\"https://www.elastic.co/guide/en/apm/agent/rum-js/current/framework-integrations.html\" target=\"_self\">documentation</a>. In this case, as this is a single page that doesn't require React specific instrumentation, we have not installed the additional dependency.</p><p>Don't worry about distributedTracingOrigins right now. Here's a quick explanation of some of the other configurations:</p><ol><li><strong>Service name:</strong> The service name has to be set. It represents your application in the APM UI. Name it something meaningful.</li><li><strong>Service version:</strong> This is the version of your application. This version number is also used by the APM server to find the right source map. We will discuss the source map in detail later.</li><li><strong>Server URL:</strong> This is the APM server URL. Note that the APM server URL is normally accessible from the public internet because your RUM agent reports data to it from end-user browsers on the internet.</li></ol><p>People who are familiar with Elastic APM backend agents might be wondering why the APM token was not passed here. That’s because the RUM agent doesn't actually use a secret APM token. The token is only used for backend agents. Because the frontend code is public, the secret token does not provide additional security.</p><p>We will load this JavaScript file when the application loads and include it in places that we want to perform custom instrumentation. For now, let’s see what we get out of the box, without any custom instrumentation. To do so, we simply need to include rum.js in index.js . The index.js file imports rum.js and sets a page load name. Without setting a page load name, you will see the page load listed as “/” in the APM UI, which is not very intuitive. Here is what index.js looks like.</p><pre class=\"prettyprint\">import apm from './rum'<br/>import React from 'react';<br/>import ReactDOM from 'react-dom';<br/>import './index.css';<br/>import App from './App';<br/>import * as serviceWorker from './serviceWorker';<br/>apm.setInitialPageLoadName(\"Car List\")<br/>ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));<br/>serviceWorker.unregister();<br/></pre><p>Generate some traffic to your application by accessing pages and adding or deleting cars. Then log into Kibana and click on the Observability tile. From there, select the Services option from the APM submenu, as shown below:</p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt7aba56906f514b72/63504a2919d8652169cfad8c/blog-elastic-RUMAPM-1.png\" height=\"auto\"/><p></p><p>You should see a service called \"carfront\" listed. Clicking on the service name takes you to the transaction page. You should see an overview of metrics such as latency and throughput for the default time frame of \"Last 15 minutes.\" If not, change the time picker to this range.</p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt71bb7e870ae40a92/63504a83bbff0b3fd98e25e1/blog-elastic-RUMAPM-2.png\" height=\"auto\"/><p></p><p>In the transactions segment, you should see the \"Car List\" transaction. Click on the \"Car List\" link, and you will move to the Transaction tab, which contains statistics for this sample of transactions. Scrolling to the bottom of the page, you will see a waterfall view of browser interactions like this:</p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt62e1a3ddd74a6719/63504ad4b3f39b38fccfe7db/blog-elastic-RUMAPM-3.png\" height=\"auto\"/><p></p><p>Amazed by how much information is captured by the RUM agent by default? Pay special attention to the <strong>markers</strong> at the top like timeToFirstByte, domInteractive, domComplete, and firstContentfulPaint. Mouse over the black dots to see the names. They provide you with great details about content retrieval and browser rendering of these contents. Also, pay attention to all the performance data about resource loading from the browser. By just initializing your RUM agent, without any custom instrumentation, you get all these detailed performance metrics, out of the box! When there is a performance issue, these metrics enable you to easily decide whether the issue is due to slow backend services, a slow network, or simply a slow client browser. That is very impressive!</p><p></p><p>For those of you who need a refresher, here is a quick explanation of the web performance metrics. Do keep in mind that for modern web application frameworks like React, these metrics might only represent the “static” part of the web page, due to the async nature of React. For example, dynamic contents might still be loading after <strong>domInteractive</strong>, as you will see later.</p><ul><li><strong>timeToFirstByte</strong> is the amount of time a browser waits to receive the first piece of information from the web server after requesting it. It represents a combination of network and server-side processing speed.</li><li><strong>domInteractive</strong> is the time immediately before the user agent sets the current document readiness to “interactive,” which means the browser has finished parsing all of the HTML and DOM construction has completed.</li><li><strong>domComplete</strong> is the time immediately before the user agent sets the current document readiness to “complete,” which means the page and all of its subresources like images have finished downloading and are ready. The loading spinner has stopped spinning.</li><li><strong>firstContentfulPaint</strong> is the time the browser renders the first bit of content from the DOM. This is an important milestone for users because it provides feedback that the page is actually loading.</li></ul><h3>Flexible custom instrumentation</h3><p>The RUM agent provides detailed instrumentation for your browser interaction out of the box, as you just saw. You can also perform custom instrumentations when needed. For example, because the React application is a single-page-application and deleting a car will not trigger a “page load,” RUM does not by default capture the performance data of deleting a car. We can use custom transactions for something like that.</p><p>With our current release (APM Real User Monitoring JavaScript Agent 5.x), AJAX calls and click events are captured by the agent and sent to the APM server. <a href=\"https://www.elastic.co/guide/en/apm/agent/rum-js/current/configuration.html#disable-instrumentations\" target=\"_self\">Configuring the types of interactions can be achieved using the disableInstrumentation setting</a>.</p><p>It is also possible to add your own custom instrumentations to give more meaningful traces. This can particularly be useful for tracing new features. In our example application, the <strong>\"New Car\"</strong> button in our frontend application allows you to add a new car to the database. We will instrument the code to capture the performance of adding a new car. Open the file Carlist.js in the components directory. You will see the following code:</p><pre class=\"prettyprint\">// Add new car<br/>addCar(car) {<br/>    // Add car metadata as labels to the RUM click transaction<br/>    var transaction = apm.startTransaction(\"Add Car\", \"Car\");<br/>    transaction.addLabels(car);<br/>    fetch(SERVER_URL + 'api/cars',<br/>        {<br/>            method: 'POST',<br/>            headers: {<br/>                'Content-Type': 'application/json',<br/>            },<br/>            body: JSON.stringify(car)<br/>        })<br/>        .then(res =&gt; this.fetchCars())<br/>        .catch(err =&gt; console.error(err))<br/>}<br/>fetchCars = () =&gt; {<br/>    fetch(SERVER_URL + 'api/cars')<br/>        .then((response) =&gt; response.json())<br/>        .then((responseData) =&gt; {<br/>            this.setState({<br/>                cars: responseData._embedded.cars,<br/>            });<br/>        })<br/>        .catch(err =&gt; console.error(err));<br/>        // End the current transaction at the end of the response call back<br/>        var transaction = apm.getCurrentTransaction()<br/>        if (transaction) transaction.end()<br/>}<br/></pre><p>The code basically created a new transaction called <strong>“Add Car”</strong> of <strong>“Car”</strong> type. Then, it tagged the transaction with the car to provide contextual information. We then explicitly ended the transaction at the end of the method.</p><p>Add a new car from the application web UI. Click on the APM UI in Kibana. You should see an “Add Car” transaction listed. Make sure you select “Car” in the “Filter by type” dropdown. By default, it displays “page-load” transactions.</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/bltcad2c799aa1c6e1b/63504d554e565f1cdce2944e/blog-elastic-RUMAPM-4.png\" height=\"auto\"/></p><p>Click on the “Add Car” transaction link. You should see performance information of the custom transaction “Add Car”:</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/bltda3d29bf6e005b2a/63504d720528631ea56813e7/blog-elastic-RUMAPM-5.png\" height=\"auto\"/></p><p>Click on the “Metadata” tab. You will see the labels we added along with the default labels captured by the agent. Labels and logs add valuable contextual information to your APM traces.</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/bltb11888816b7654a2/63504daf1d78fa218f251d72/blog-elastic-RUMAPM-6.png\" height=\"auto\"/></p><p>That’s really all it takes to do a custom instrumentation — easy yet powerful! For more details, see the <a href=\"https://www.elastic.co/guide/en/apm/agent/js-base/current/api.html\" target=\"_self\">API documentation</a>.</p><h3>User experience dashboard</h3><p>Elastic APM offers a curated APM UI and built-in APM dashboards to visualize all the APM data captured by the agents out of the box.</p><p>You can also create your own custom visualizations in Elastic using <a href=\"https://www.elastic.co/guide/en/apm/server/current/configuring-ingest-node.html\" target=\"_self\">ingest node pipelines</a> to enrich and transform your APM data. For example, the user IP and user agent data captured by the RUM agent represent very rich information about your customers. With all the information of user IP and user agent, it’s possible to create a visualization like this to show where the web traffic comes from on a map and what operating systems and browsers your customers are using.</p><p>However, many of the user data of interest could be present in the User Experience Dashboard visible in Elastic Observability. Sample visualizations are presented below:</p><p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt7555ce1a42a4a337/63504e72dcd7cf2a10750b49/blog-elastic-RUMAPM-7.png\" height=\"auto\"/></p><h2>See the big picture with distributed tracing</h2><p>As a bonus point, we will also instrument our backend Spring Boot application so that you have a complete view of the overall transaction from the web browser all the way to the backend database, all in one view. Elastic APM distributed tracing enables you to do so.</p><h3>Configuring distributed tracing in RUM agents</h3><p><a href=\"https://www.elastic.co/guide/en/apm/agent/js-base/current/distributed-tracing-guide.html\" target=\"_self\">Distributed tracing</a> is enabled by default in the RUM agent. However, it only includes requests made to the same origin. In order to include cross-origin requests, you must set the distributedTracingOrigins configuration option. You will also have to set the CORS policy in the backend application, as we will discuss in the next section.</p><p>For our application, the frontend is served from <a href=\"http://localhost:3000\" target=\"_self\">http://localhost:3000</a>. To include requests made to http://localhost:8080, we need to add the distributedtracingOrigins configuration to our React application. This is done inside rum.js. The code is already there. Simply uncommenting the line will do.</p><pre class=\"prettyprint\">var apm = initApm({<br/>  ...<br/>  distributedTracingOrigins: ['http://localhost:8080']<br/>})<br/></pre><p><a href=\"https://www.elastic.co/guide/en/apm/guide/8.4/distributed-tracing.html#w3c-tracecontext\" target=\"_self\">New agent versions</a> implement the W3C Trace Context specification and traceparent header to requests made to http://localhost:8080. However, note that previously this was achieved by adding the custom header elastic-apm-traceparent to these requests.</p><p>As per the latest version documentation, the server side instrumentation can be configured in three possible ways:</p><ol><li>Automatic attaching to the running JVM using the <strong>apm-agent-attach-cli.jar</strong></li><li>Programmatic setup using the <strong>apm-agent-attach</strong>, which requires a code change to your Java application</li><li>Manual setup using the <strong>-javaagent</strong> flag, as we shall do in the subsequent example</li></ol><p>To use the manual instrumentation approach on the server side, you need to <a href=\"https://search.maven.org/search?q=g:co.elastic.apm%20AND%20a:apm-agent-api\" target=\"_self\">download</a> the Java agent and start your application with it. In your favorite IDE, you will need to add the below vmArgs to the launch configuration.</p><pre class=\"prettyprint\">-javaagent:apm/wrapper/elastic-apm-agent-1.33.0.jar <br/>-Delastic.apm.service_name=cardatabase <br/>-Delastic.apm.application_packages=com.packt.cardatabase<br/>-Delastic.apm.server_urls=&lt;YOUR_APM_ENDPOINT&gt; <br/>-Delastic.apm.secret_token=&lt;YOUR_SECRET_TOKEN&gt;<br/></pre><p></p><p>If you are using Elastic Cloud, full configuration for both the RUM and APM agents can be found in the APM Integration of your deployment, a sample of which is visible below.</p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt0fb070fa4f93a460/635050b0ad35ab2389acc989/blog-elastic-RUMAPM-8.png\" height=\"auto\"/><p></p><p>Where the agents are configured will depend on your IDE of choice. The below screenshot is of my VSCode launch configuration for the Spring Boot application:</p><img height=\"auto\" src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt9c52c3334a613da2/635050e70528631ea56813fb/blog-elastic-RUMAPM-9.png\" width=\"727\" max-width=\"727\" style=\"width: 727px; height: auto;\"/><p></p><p>Now, refresh your car list from the browser to generate another request. Go to the Kibana APM UI and check the last “car list” page load. You should see a full trace including Java method invocations, similar to the following screenshot:</p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/bltf5331328f1218b47/63505112b0662c1e9a674687/blog-elastic-RUMAPM-10.png\" height=\"auto\"/><p></p><p>As you can see, your client-side performance data from the browser and your server-side performance data, including JDBC access, all show up nicely in one distributed trace. Notice different colors for different parts of the distributed trace. Keep in mind this is the default tracing you get, without having to do any custom instrumentation on the server side, other than starting your application with the agent. Feel the power of Elastic APM and distributed tracing!</p><p>For readers who are really paying attention to the timeline visualization above, you might be wondering why the “Car List” page-load transaction ends at 193 ms, which is the <strong>domInteractive</strong> time, while data is still being served from the backend. Great question! This is due to the fact that the fetch calls are async by default. The browser “thinks” it finished parsing all the HTML and DOM construction is complete at 193 ms because it loaded all the “static” HTML contents served from the web server. On the other hand, React is still loading data from the backend server asynchronously.</p><h3>Cross-origin resource sharing (CORS)</h3><p>The RUM agent is only one piece of the puzzle in a distributed trace. In order to use distributed tracing, we need to properly configure other components, too. One of the things that you will normally have to configure is cross-origin resource sharing, the “notorious” CORS! This is because the frontend and the backend services are typically deployed separately. With the <em><strong>same-origin</strong></em> policy, your frontend requests from a different origin to the backend will fail without properly configured CORS. Basically, CORS is a way for the server side to check if requests coming in from a different origin are allowed. To read more about cross-origin requests and why this process is necessary, please see the MDN page on <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\" target=\"_self\">Cross-Origin Resource Sharing</a>.</p><p>What does that mean for us? It means two things:</p><ol><li>We must set the distributedTracingOrigins configuration option, as we have done.</li><li>With that configuration, <a href=\"https://www.elastic.co/guide/en/apm/agent/rum-js/current/distributed-tracing-guide.html#server-configuration\" target=\"_self\">the RUM agent also sends an HTTP OPTIONS request before the real HTTP request to make sure all the headers and HTTP methods are supported and the origin is allowed</a>. Specifically, http://localhost:8080 will receive an <strong>OPTIONS</strong> request with the following headers:<br/><pre class=\"prettyprint\">Access-Control-Request-Headers: traceparent, tracestate<br/>Access-Control-Request-Method: [request-method]<br/>Origin: [request-origin]<br/></pre>And APM server should respond to it with these headers and a 200 status code:<br/><pre class=\"prettyprint\">Access-Control-Allow-Headers: traceparent, tracestate<br/>Access-Control-Allow-Methods: [allowed-methods]<br/>Access-Control-Allow-Origin: [request-origin]<br/></pre></li></ol><p>The MyCorsConfiguration class in our Spring Boot application does exactly that. There are different ways of configuring Spring Boot to do this, but here we are using a filter based approach. It’s configuring our server-side Spring Boot application to allow requests from any origin with any HTTP headers and any HTTP methods. You may not want to be this open with your production applications.</p><pre class=\"prettyprint\">@Configuration<br/>public class MyCorsConfiguration {<br/>    @Bean<br/>    public FilterRegistrationBean&lt;CorsFilter&gt; corsFilter() {<br/>        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();<br/>        CorsConfiguration config = new CorsConfiguration();<br/>        config.setAllowCredentials(true);<br/>        config.addAllowedOrigin(\"*\");<br/>        config.addAllowedHeader(\"*\");<br/>        config.addAllowedMethod(\"*\");<br/>        source.registerCorsConfiguration(\"/**\", config);<br/>        FilterRegistrationBean&lt;CorsFilter&gt; bean = new FilterRegistrationBean&lt;CorsFilter&gt;(new CorsFilter(source));<br/>        bean.setOrder(0);<br/>        return bean;<br/>    }<br/>}<br/></pre><h2>Summary</h2><p>Hopefully, this blog made it clear that instrumenting your applications with Elastic RUM is simple and easy, yet extremely powerful. Together with other APM agents for backend services, RUM gives you a holistic view of application performance from an end-user perspective through distributed tracing.</p><p>Once again, to get started with Elastic APM, you can download <a href=\"https://www.elastic.co/downloads/apm\" target=\"_self\">Elastic APM server</a> to run it locally, or create an <a href=\"https://cloud.elastic.co\" target=\"_self\">Elastic Cloud</a> trial account and have a cluster ready in a few minutes.</p><p>As always, reach out on the <a href=\"https://discuss.elastic.co/c/apm\" target=\"_self\">Elastic APM forum</a> if you want to open up a discussion or have any questions. Happy RUMing!</p><p><em>This post was originally published on April 1, 2019. It was updated on October 20, 2022.</em></p>","PublishedAt":"2022-10-20 16:00:00+00:00","OriginURL":"https://www.elastic.co/blog/performing-real-user-monitoring-rum-with-elastic-apm","SourceName":"Elastic"}},{"node":{"ID":2018,"Title":"Pre-Plan/Apply Run Tasks Now Available in Terraform Cloud","Description":"Enhance your Terraform Cloud workflow by adding run tasks before the plan and/or apply stages.","PublishedAt":"2022-10-20 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/pre-plan-apply-run-tasks-now-available-in-terraform-cloud","SourceName":"HashiCorp"}},{"node":{"ID":2017,"Title":"How to make a mock API server in JavaScript","Description":"In this article, you'll learn more about mock API servers, the tools you can use to create mock APIs, how you can use them to speed up your development and testing, and how to set up a simple mock server.","PublishedAt":"2022-10-20 14:37:41+00:00","OriginURL":"https://snyk.io/blog/how-to-mock-api-server-javascript/","SourceName":"Snyk"}},{"node":{"ID":2016,"Title":"I Wrote a Novel Entirely in Evernote. Here’s How.","Description":"<p>It is a truth universally acknowledged that writers love systems. Oh, how we love them. We’re particular about our ways of working, our personal rituals, and especially our tools. So what about Evernote? You already know it’s great for brainstorming and research notes, but writing the actual drafts? Scenes and chapters? Emotions and experiences? That&#8217;s when many of us turn to another app, either a utilitarian word processor or one</p>\n<p><a class=\"continue-reading\" href=\"https://evernote.com/blog/i-wrote-a-novel-entirely-in-evernote/\">Continue reading...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://evernote.com/blog/i-wrote-a-novel-entirely-in-evernote/\">I Wrote a Novel Entirely in Evernote. Here’s How.</a> appeared first on <a rel=\"nofollow\" href=\"https://evernote.com/blog\"></a>.</p>\n","PublishedAt":"2022-10-20 13:45:43+00:00","OriginURL":"https://evernote.com/blog/i-wrote-a-novel-entirely-in-evernote/","SourceName":"Evernote"}},{"node":{"ID":2015,"Title":"Introducing the Overflow Offline project","Description":"<p>For coders without an internet connection, an offline dataset provides an essential encyclopedia</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2022/10/20/introducing-the-overflow-offline-project/\">Introducing the Overflow Offline project</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2022-10-20 13:00:45+00:00","OriginURL":"https://stackoverflow.blog/2022/10/20/introducing-the-overflow-offline-project/","SourceName":"Stack Overflow"}}]}},"pageContext":{"limit":30,"skip":3720,"numPages":193,"currentPage":125}},"staticQueryHashes":["3649515864"]}