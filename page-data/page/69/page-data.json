{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/69","result":{"data":{"allPost":{"edges":[{"node":{"ID":3756,"Title":"The Overflow #178: Chat with your documentation","Description":"<p>Google AI, stopping malicious packets at the source, and backups.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/05/19/the-overflow-178-chat-with-your-documentation/\">The Overflow #178: Chat with your documentation</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-05-19 12:00:00+00:00","OriginURL":"https://stackoverflow.blog/2023/05/19/the-overflow-178-chat-with-your-documentation/","SourceName":"Stack Overflow"}},{"node":{"ID":3774,"Title":"Setting up the Docker image scan GitHub Action","Description":"In this post from Snyk Ambassador, Mohammad-Ali A'râbi, we'll use GitHub Actions to build Docker images and then scan them for security vulnerabilities.","PublishedAt":"2023-05-19 05:00:00+00:00","OriginURL":"https://snyk.io/blog/docker-image-scan-github-action","SourceName":"Snyk"}},{"node":{"ID":3757,"Title":"Building zero tier systems on bare metal (Ep. 572)","Description":"<p>On this episode of the podcast, we talk to Mauricio Linhares, senior software engineer at Stripe, about the pain of migrating monoliths to microservices, defining zero-tier systems, and why plugging all your servers into the same power supply is a bad idea. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/05/19/building-zero-tier-systems-on-bare-metal-ep-572/\">Building zero tier systems on bare metal (Ep. 572)</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-05-19 04:40:00+00:00","OriginURL":"https://stackoverflow.blog/2023/05/19/building-zero-tier-systems-on-bare-metal-ep-572/","SourceName":"Stack Overflow"}},{"node":{"ID":3723,"Title":"Improving customer experience in China using China Express","Description":"We use China Express to accelerate for performance and Workers to fall back to user through China Express for cost-effectiveness.","PublishedAt":"2023-05-19 02:00:33+00:00","OriginURL":"http://blog.cloudflare.com/improving-customer-experience-in-china-using-china-express/","SourceName":"Cloudflare"}},{"node":{"ID":3730,"Title":"Enable monitoring for enterprise-scale Azure environments in minutes with Datadog","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/monitor-enterprise-azure-environments-with-datadog/azure_enterprise_hero.png\" width=\"100%\"/>As enterprises build and scale business-critical applications on Azure, they need continuous visibility to understand the health and performance of their services. This can be a challenge, especially for enterprises with large-scale deployments that include an ever-increasing number of subscriptions, resources, and teams. We’re excited to announce a number of enhancements for Azure that will help enterprise customers ensure comprehensive observability and easily onboard new teams and applications to Datadog.","PublishedAt":"2023-05-19 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/monitor-enterprise-azure-environments-with-datadog/","SourceName":"Datadog"}},{"node":{"ID":3722,"Title":"New – Simplify the Investigation of AWS Security Findings with Amazon Detective","Description":"With Amazon Detective, you can analyze and visualize security data to investigate potential security issues. Detective collects and analyzes events that describe IP traffic, AWS management operations, and malicious or unauthorized activity from AWS CloudTrail logs, Amazon Virtual Private Cloud (Amazon VPC) Flow Logs, Amazon GuardDuty findings, and, since last year, Amazon Elastic Kubernetes Service […]","PublishedAt":"2023-05-18 20:46:19+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/new-simplify-the-investigation-of-aws-security-findings-with-amazon-detective/","SourceName":"AWS"}},{"node":{"ID":3719,"Title":"MSVP is Meta’s first video processing ASIC","Description":"<p> [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://ai.facebook.com/blog/meta-scalable-video-processor-MSVP\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://ai.facebook.com/blog/meta-scalable-video-processor-MSVP\">MSVP is Meta’s first video processing ASIC</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n","PublishedAt":"2023-05-18 18:39:38+00:00","OriginURL":"https://ai.facebook.com/blog/meta-scalable-video-processor-MSVP","SourceName":"Facebook"}},{"node":{"ID":3720,"Title":"Meta introduces its first-generation AI inference accelerator","Description":"<p> [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://ai.facebook.com/blog/meta-training-inference-accelerator-AI-MTIA\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://ai.facebook.com/blog/meta-training-inference-accelerator-AI-MTIA\">Meta introduces its first-generation AI inference accelerator</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n","PublishedAt":"2023-05-18 18:39:30+00:00","OriginURL":"https://ai.facebook.com/blog/meta-training-inference-accelerator-AI-MTIA","SourceName":"Facebook"}},{"node":{"ID":3717,"Title":"Deploying securely into Azure architecture with Terraform Cloud and HCP Vault ","Description":"Learn how to build a secure infrastructure as code workflow with Terraform Cloud dynamic provider credentials, Microsoft Defender for Cloud, and HCP Vault.","PublishedAt":"2023-05-18 16:30:00+00:00","OriginURL":"https://www.hashicorp.com/blog/deploying-securely-into-azure-architecture-with-terraform-cloud-and-hcp-vault","SourceName":"HashiCorp"}},{"node":{"ID":3708,"Title":"Announcing Cloudflare Secrets Store","Description":"Introducing Secrets Store by Cloudflare - the ultimate solution for managing your application secrets securely. Safeguard sensitive information, track access, and maintain ease of use.","PublishedAt":"2023-05-18 13:00:50+00:00","OriginURL":"http://blog.cloudflare.com/secrets-store/","SourceName":"Cloudflare"}},{"node":{"ID":3709,"Title":"Using LangChainJS and Cloudflare Workers together","Description":"We are incredibly stoked that our friends at LangChain have announced LangChainJS Support for Cloudflare Workers! In this post we'll show you how to build a sample application.","PublishedAt":"2023-05-18 13:00:18+00:00","OriginURL":"http://blog.cloudflare.com/langchain-and-cloudflare/","SourceName":"Cloudflare"}},{"node":{"ID":3710,"Title":"How to secure Generative AI applications","Description":"Earn best practices for securing generative AI applications based on Cloudflare's experience protecting some of the largest AI applications in the world","PublishedAt":"2023-05-18 13:00:13+00:00","OriginURL":"http://blog.cloudflare.com/secure-generative-ai-applications/","SourceName":"Cloudflare"}},{"node":{"ID":3711,"Title":"Building Cloudflare on Cloudflare","Description":"Cloudflare was originally built as native services, but we’re building more and more of it on Cloudflare itself. This post describes how and why we’re doing this.","PublishedAt":"2023-05-18 13:00:10+00:00","OriginURL":"http://blog.cloudflare.com/building-cloudflare-on-cloudflare/","SourceName":"Cloudflare"}},{"node":{"ID":3713,"Title":"GitHub celebrates developers with disabilities on Global Accessibility Awareness Day","Description":"GitHub is the home for all developers and on this Global Accessibility Awareness Day we are thrilled to celebrate the achievements of disabled developers and recent ships that help them build on GitHub.","PublishedAt":"2023-05-18 13:00:09+00:00","OriginURL":"https://github.blog/2023-05-18-github-celebrates-developers-with-disabilities-on-global-accessibility-awareness-day/","SourceName":"GitHub"}},{"node":{"ID":3712,"Title":"How Cloudflare is powering the next generation of platforms with Workers","Description":"Workers for Platforms is our Workers offering for customers building new platforms on Cloudflare Workers. Let’s take a look back and recap why we built Workers for Platforms, show you some of the most interesting problems our customers have been solving and share new features that are now available!","PublishedAt":"2023-05-18 13:00:01+00:00","OriginURL":"http://blog.cloudflare.com/powering-platforms-on-workers/","SourceName":"Cloudflare"}},{"node":{"ID":3714,"Title":"Meet the Elasticians who work to make our products accessible to all","Description":"","PublishedAt":"2023-05-18 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/culture-elasticians-who-make-products-accessible","SourceName":"Elastic"}},{"node":{"ID":3715,"Title":"Gain insights into Kubernetes errors with Elastic Observability logs and OpenAI","Description":"","PublishedAt":"2023-05-18 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/kubernetes-errors-elastic-observability-logs-openai","SourceName":"Elastic"}},{"node":{"ID":3716,"Title":"Elastic continues to innovate and grow through Microsoft partnership","Description":"","PublishedAt":"2023-05-18 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/elastic-continues-to-innovate-and-grow-through-microsoft-partnership","SourceName":"Elastic"}},{"node":{"ID":3718,"Title":"Monitor Azure Pipelines with Datadog CI Visibility","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/azure-pipelines-ci-visibility/azure-pipelines-ci-visibility-hero.png\" width=\"100%\"/>End-to-end visibility into pipelines is crucial for ensuring the health and performance of your CI system, especially at scale. Within extensive CI systems—which operate under the strain of numerous developers simultaneously pushing commits—even the slightest performance regression or uptick in failure rates can compound rapidly and have tremendous repercussions, causing major cost overruns and impeding release velocity across organizations.Datadog&rsquo;s new Azure DevOps integration for CI Pipeline Visibility provides end-to-end visibility into Azure Pipelines, allowing you to proactively maintain pipeline health and performance, increase your pipeline throughput, and control your overall CI spend.","PublishedAt":"2023-05-18 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/azure-pipelines-ci-visibility/","SourceName":"Datadog"}},{"node":{"ID":3721,"Title":"Privacy-first AI search using LangChain and Elasticsearch","Description":"","PublishedAt":"2023-05-18 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/privacy-first-ai-search-langchain-elasticsearch","SourceName":"Elastic"}},{"node":{"ID":3747,"Title":"Blog: Having fun with seccomp profiles on the edge","Description":"<p><strong>Author</strong>: Sascha Grunert</p>\n<p>The <a href=\"https://github.com/kubernetes-sigs/security-profiles-operator\">Security Profiles Operator (SPO)</a> is a feature-rich\n<a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/operator\">operator</a> for Kubernetes to make managing seccomp, SELinux and\nAppArmor profiles easier than ever. Recording those profiles from scratch is one\nof the key features of this operator, which usually involves the integration\ninto large CI/CD systems. Being able to test the recording capabilities of the\noperator in edge cases is one of the recent development efforts of the SPO and\nmakes it excitingly easy to play around with seccomp profiles.</p>\n<h2 id=\"recording-seccomp-profiles-with-spoc-record\">Recording seccomp profiles with <code>spoc record</code></h2>\n<p>The <a href=\"https://github.com/kubernetes-sigs/security-profiles-operator/releases/v0.8.0\">v0.8.0</a> release of the Security Profiles Operator shipped a new\ncommand line interface called <code>spoc</code>, a little helper tool for recording and\nreplaying seccomp profiles among various other things that are out of scope of\nthis blog post.</p>\n<p>Recording a seccomp profile requires a binary to be executed, which can be a\nsimple golang application which just calls <a href=\"https://man7.org/linux/man-pages/man2/uname.2.html\"><code>uname(2)</code></a>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-go\" data-lang=\"go\"><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">package</span> main\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">import</span> (\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;syscall&#34;</span>\n</span></span><span style=\"display:flex;\"><span>)\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">func</span> <span style=\"color:#00a000\">main</span>() {\n</span></span><span style=\"display:flex;\"><span> utsname <span style=\"color:#666\">:=</span> syscall.Utsname{}\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#a2f;font-weight:bold\">if</span> err <span style=\"color:#666\">:=</span> syscall.<span style=\"color:#00a000\">Uname</span>(<span style=\"color:#666\">&amp;</span>utsname); err <span style=\"color:#666\">!=</span> <span style=\"color:#a2f;font-weight:bold\">nil</span> {\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#a2f\">panic</span>(err)\n</span></span><span style=\"display:flex;\"><span> }\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div><p>Building a binary from that code can be done by:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> go build -o main main.go\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> ldd ./main\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> not a dynamic executable\n</span></span></span></code></pre></div><p>Now it's possible to download the latest binary of <a href=\"https://github.com/kubernetes-sigs/security-profiles-operator/releases/download/v0.8.0/spoc.amd64\"><code>spoc</code> from\nGitHub</a> and run the application on Linux with it:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> sudo ./spoc record ./main\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.591945 Loading bpf module\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.591958 Using system btf file\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">libbpf: loading object &#39;recorder.bpf.o&#39; from buffer\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">…\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">libbpf: prog &#39;sys_enter&#39;: relo #3: patched insn #22 (ALU/ALU64) imm 16 -&gt; 16\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.610767 Getting bpf program sys_enter\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.610778 Attaching bpf tracepoint\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.611574 Getting syscalls map\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.611582 Getting pid_mntns map\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.613097 Module successfully loaded\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.613311 Processing events\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.613693 Running command with PID: 336007\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.613835 Received event: pid: 336007, mntns: 4026531841\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.613951 No container ID found for PID (pid=336007, mntns=4026531841, err=unable to find container ID in cgroup path)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.614856 Processing recorded data\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.614975 Found process mntns 4026531841 in bpf map\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.615110 Got syscalls: read, close, mmap, rt_sigaction, rt_sigprocmask, madvise, nanosleep, clone, uname, sigaltstack, arch_prctl, gettid, futex, sched_getaffinity, exit_group, openat\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.615195 Adding base syscalls: access, brk, capget, capset, chdir, chmod, chown, close_range, dup2, dup3, epoll_create1, epoll_ctl, epoll_pwait, execve, faccessat2, fchdir, fchmodat, fchown, fchownat, fcntl, fstat, fstatfs, getdents64, getegid, geteuid, getgid, getpid, getppid, getuid, ioctl, keyctl, lseek, mkdirat, mknodat, mount, mprotect, munmap, newfstatat, openat2, pipe2, pivot_root, prctl, pread64, pselect6, readlink, readlinkat, rt_sigreturn, sched_yield, seccomp, set_robust_list, set_tid_address, setgid, setgroups, sethostname, setns, setresgid, setresuid, setsid, setuid, statfs, statx, symlinkat, tgkill, umask, umount2, unlinkat, unshare, write\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.616293 Wrote seccomp profile to: /tmp/profile.yaml\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:08:25.616298 Unloading bpf module\n</span></span></span></code></pre></div><p>I have to execute <code>spoc</code> as root because it will internally run an <a href=\"https://ebpf.io\">ebpf</a>\nprogram by reusing the same code parts from the Security Profiles Operator\nitself. I can see that the bpf module got loaded successfully and <code>spoc</code>\nattached the required tracepoint to it. Then it will track the main application\nby using its <a href=\"https://man7.org/linux/man-pages/man7/mount_namespaces.7.html\">mount namespace</a> and process the recorded syscall data. The\nnature of ebpf programs is that they see the whole context of the Kernel, which\nmeans that <code>spoc</code> tracks all syscalls of the system, but does not interfere with\ntheir execution.</p>\n<p>The logs indicate that <code>spoc</code> found the syscalls <code>read</code>, <code>close</code>,\n<code>mmap</code> and so on, including <code>uname</code>. All other syscalls than <code>uname</code> are coming\nfrom the golang runtime and its garbage collection, which already adds overhead\nto a basic application like in our demo. I can also see from the log line\n<code>Adding base syscalls: …</code> that <code>spoc</code> adds a bunch of base syscalls to the\nresulting profile. Those are used by the OCI runtime (like <a href=\"https://github.com/opencontainers/runc\">runc</a> or\n<a href=\"https://github.com/containers/crun\">crun</a>) in order to be able to run a container. This means that <code>spoc</code>\ncan be used to record seccomp profiles which then can be containerized directly.\nThis behavior can be disabled in <code>spoc</code> by using the <code>--no-base-syscalls</code>/<code>-n</code>\nor customized via the <code>--base-syscalls</code>/<code>-b</code> command line flags. This can be\nhelpful in cases where different OCI runtimes other than crun and runc are used,\nor if I just want to record the seccomp profile for the application and stack\nit with another <a href=\"https://github.com/kubernetes-sigs/security-profiles-operator/blob/35ebdda/installation-usage.md#base-syscalls-for-a-container-runtime\">base profile</a>.</p>\n<p>The resulting profile is now available in <code>/tmp/profile.yaml</code>, but the default\nlocation can be changed using the <code>--output-file value</code>/<code>-o</code> flag:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> cat /tmp/profile.yaml\n</span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>security-profiles-operator.x-k8s.io/v1beta1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>SeccompProfile<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">creationTimestamp</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#a2f;font-weight:bold\">null</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>main<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">architectures</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- SCMP_ARCH_X86_64<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">defaultAction</span>:<span style=\"color:#bbb\"> </span>SCMP_ACT_ERRNO<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">syscalls</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">action</span>:<span style=\"color:#bbb\"> </span>SCMP_ACT_ALLOW<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">names</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- access<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- arch_prctl<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- brk<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- …<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- uname<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- …<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">status</span>:<span style=\"color:#bbb\"> </span>{}<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>The seccomp profile Custom Resource Definition (CRD) can be directly used\ntogether with the Security Profiles Operator for managing it within Kubernetes.\n<code>spoc</code> is also capable of producing raw seccomp profiles (as JSON), by using the\n<code>--type</code>/<code>-t</code> <code>raw-seccomp</code> flag:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> sudo ./spoc record --type raw-seccomp ./main\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">…\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">52.628827 Wrote seccomp profile to: /tmp/profile.json\n</span></span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> jq . /tmp/profile.json\n</span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;defaultAction&#34;</span>: <span style=\"color:#b44\">&#34;SCMP_ACT_ERRNO&#34;</span>,\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;architectures&#34;</span>: [<span style=\"color:#b44\">&#34;SCMP_ARCH_X86_64&#34;</span>],\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;syscalls&#34;</span>: [\n</span></span><span style=\"display:flex;\"><span> {\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;names&#34;</span>: [<span style=\"color:#b44\">&#34;access&#34;</span>, <span style=\"color:#b44\">&#34;…&#34;</span>, <span style=\"color:#b44\">&#34;write&#34;</span>],\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;action&#34;</span>: <span style=\"color:#b44\">&#34;SCMP_ACT_ALLOW&#34;</span>\n</span></span><span style=\"display:flex;\"><span> }\n</span></span><span style=\"display:flex;\"><span> ]\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div><p>The utility <code>spoc record</code> allows us to record complex seccomp profiles directly\nfrom binary invocations in any Linux system which is capable of running the ebpf\ncode within the Kernel. But it can do more: How about modifying the seccomp\nprofile and then testing it by using <code>spoc run</code>.</p>\n<h2 id=\"running-seccomp-profiles-with-spoc-run\">Running seccomp profiles with <code>spoc run</code></h2>\n<p><code>spoc</code> is also able to run binaries with applied seccomp profiles, making it\neasy to test any modification to it. To do that, just run:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> sudo ./spoc run ./main\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:29:58.153263 Reading file /tmp/profile.yaml\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:29:58.153311 Assuming YAML profile\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:29:58.154138 Setting up seccomp\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:29:58.154178 Load seccomp profile\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:29:58.154189 Starting audit log enricher\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:29:58.154224 Enricher reading from file /var/log/audit/audit.log\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:29:58.155356 Running command with PID: 437880\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"color:#000080;font-weight:bold\">&gt;</span>\n</span></span></code></pre></div><p>It looks like that the application exited successfully, which is anticipated\nbecause I did not modify the previously recorded profile yet. I can also\nspecify a custom location for the profile by using the <code>--profile</code>/<code>-p</code> flag,\nbut this was not necessary because I did not modify the default output location\nfrom the record. <code>spoc</code> will automatically determine if it's a raw (JSON) or CRD\n(YAML) based seccomp profile and then apply it to the process.</p>\n<p>The Security Profiles Operator supports a <a href=\"https://github.com/kubernetes-sigs/security-profiles-operator/blob/35ebdda/installation-usage.md#using-the-log-enricher\">log enricher feature</a>,\nwhich provides additional seccomp related information by parsing the audit logs.\n<code>spoc run</code> uses the enricher in the same way to provide more data to the end\nusers when it comes to debugging seccomp profiles.</p>\n<p>Now I have to modify the profile to see anything valuable in the output. For\nexample, I could remove the allowed <code>uname</code> syscall:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> jq <span style=\"color:#b44\">&#39;del(.syscalls[0].names[] | select(. == &#34;uname&#34;))&#39;</span> /tmp/profile.json &gt; /tmp/no-uname-profile.json\n</span></span></code></pre></div><p>And then try to run it again with the new profile <code>/tmp/no-uname-profile.json</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> sudo ./spoc run -p /tmp/no-uname-profile.json ./main\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:39:12.707798 Reading file /tmp/no-uname-profile.json\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:39:12.707892 Setting up seccomp\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:39:12.707920 Load seccomp profile\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:39:12.707982 Starting audit log enricher\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:39:12.707998 Enricher reading from file /var/log/audit/audit.log\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:39:12.709164 Running command with PID: 480512\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">panic: operation not permitted\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"\"></span><span style=\"color:#888\">goroutine 1 [running]:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">main.main()\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> /path/to/main.go:10 +0x85\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:39:12.713035 Unable to run: launch runner: wait for command: exit status 2\n</span></span></span></code></pre></div><p>Alright, that was expected! The applied seccomp profile blocks the <code>uname</code>\nsyscall, which results in an &quot;operation not permitted&quot; error. This error is\npretty generic and does not provide any hint on what got blocked by seccomp.\nIt is generally extremely difficult to predict how applications behave if single\nsyscalls are forbidden by seccomp. It could be possible that the application\nterminates like in our simple demo, but it could also lead to a strange\nmisbehavior and the application does not stop at all.</p>\n<p>If I now change the default seccomp action of the profile from <code>SCMP_ACT_ERRNO</code>\nto <code>SCMP_ACT_LOG</code> like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> jq <span style=\"color:#b44\">&#39;.defaultAction = &#34;SCMP_ACT_LOG&#34;&#39;</span> /tmp/no-uname-profile.json &gt; /tmp/no-uname-profile-log.json\n</span></span></code></pre></div><p>Then the log enricher will give us a hint that the <code>uname</code> syscall got blocked\nwhen using <code>spoc run</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> sudo ./spoc run -p /tmp/no-uname-profile-log.json ./main\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:48:07.470126 Reading file /tmp/no-uname-profile-log.json\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:48:07.470234 Setting up seccomp\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:48:07.470245 Load seccomp profile\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:48:07.470302 Starting audit log enricher\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:48:07.470339 Enricher reading from file /var/log/audit/audit.log\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:48:07.470889 Running command with PID: 522268\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10:48:07.472007 Seccomp: uname (63)\n</span></span></span></code></pre></div><p>The application will not terminate any more, but seccomp will log the behavior\nto <code>/var/log/audit/audit.log</code> and <code>spoc</code> will parse the data to correlate it\ndirectly to our program. Generating the log messages to the audit subsystem\ncomes with a large performance overhead and should be handled with care in\nproduction systems. It also comes with a security risk when running untrusted\napps in audit mode in production environments.</p>\n<p>This demo should give you an impression how to debug seccomp profile issues with\napplications, probably by using our shiny new helper tool powered by the\nfeatures of the Security Profiles Operator. <code>spoc</code> is a flexible and portable\nbinary suitable for edge cases where resources are limited and even Kubernetes\nitself may not be available with its full capabilities.</p>\n<p>Thank you for reading this blog post! If you're interested in more, providing\nfeedback or asking for help, then feel free to get in touch with us directly via\n<a href=\"https://kubernetes.slack.com/messages/security-profiles-operator\">Slack (#security-profiles-operator)</a> or the <a href=\"https://groups.google.com/forum/#!forum/kubernetes-dev\">mailing list</a>.</p>","PublishedAt":"2023-05-18 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2023/05/18/seccomp-profiles-edge/","SourceName":"Kubernetes"}},{"node":{"ID":3788,"Title":"The State of Application Security Livestream","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/event/application-security-livestream/state-of-application-security/header-temp-3.png\" width=\"100%\"/><b>Join Datadog and Avi Douglen, CEO of Bounce Security &amp; Vice-Chair of OWASP, as they share insights on:</b> <br> <ul class='dashed'> <li>Which vulnerabilities really matter</li> <li>Which threats actually present a risk to your organization (but also which threats don&rsquo;t)</li> <li>What characteristics of your applications and APIs have an impact on their risk</li> </ul>","PublishedAt":"2023-05-18 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/event/application-security-livestream/","SourceName":"Datadog"}},{"node":{"ID":3707,"Title":"Retiring the AWS Documentation on GitHub","Description":"About five years ago I announced that AWS Documentation is Now Open Source and on GitHub. After a prolonged period of experimentation we will archive most of the repos starting the week of June 5th, and will devote all of our resources to directly improving the AWS documentation and website. The primary source for most […]","PublishedAt":"2023-05-17 23:26:58+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/retiring-the-aws-documentation-on-github/","SourceName":"AWS"}},{"node":{"ID":3753,"Title":"Warden: Real Time Anomaly Detection at Pinterest","Description":"","PublishedAt":"2023-05-17 20:07:38+00:00","OriginURL":"https://medium.com/pinterest-engineering/warden-real-time-anomaly-detection-at-pinterest-210c122f6afa?source=rss----4c5a5f6279b6---4","SourceName":"Pinterest"}},{"node":{"ID":3748,"Title":"How Instacart Ads Modularized Data Pipelines With Lakehouse Architecture and Spark","Description":"","PublishedAt":"2023-05-17 18:25:33+00:00","OriginURL":"https://tech.instacart.com/how-instacart-ads-modularized-data-pipelines-with-lakehouse-architecture-and-spark-e9863e28488d?source=rss----587883b5d2ee---4","SourceName":"Instacart"}},{"node":{"ID":3705,"Title":"Inside GitHub: Working with the LLMs behind GitHub Copilot","Description":"Developers behind GitHub Copilot discuss what it was like to work with OpenAI’s large language model and how it informed the development of Copilot as we know it today.","PublishedAt":"2023-05-17 17:32:32+00:00","OriginURL":"https://github.blog/2023-05-17-inside-github-working-with-the-llms-behind-github-copilot/","SourceName":"GitHub"}},{"node":{"ID":3706,"Title":"How GitHub Copilot is getting better at understanding your code","Description":"With a new Fill-in-the-Middle paradigm, GitHub engineers improved the way GitHub Copilot contextualizes your code. By continuing to develop and test advanced retrieval algorithms, they’re working on making our AI tool even more advanced.","PublishedAt":"2023-05-17 17:32:16+00:00","OriginURL":"https://github.blog/2023-05-17-how-github-copilot-is-getting-better-at-understanding-your-code/","SourceName":"GitHub"}},{"node":{"ID":3704,"Title":"Improving Performance with HTTP Streaming","Description":"","PublishedAt":"2023-05-17 16:48:22+00:00","OriginURL":"https://medium.com/airbnb-engineering/improving-performance-with-http-streaming-ba9e72c66408?source=rss----53c7c27702d5---4","SourceName":"Airbnb"}},{"node":{"ID":3758,"Title":"Keep ‘em separated: Get better maintainability in web projects using the model-view-controller pattern","Description":"<p>MVC is an old pattern, but it's still relevant to web apps. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/05/17/keep-em-separated-get-better-maintainability-in-web-projects-using-the-model-view-controller-pattern/\">Keep ‘em separated: Get better maintainability in web projects using the model-view-controller pattern</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-05-17 14:00:00+00:00","OriginURL":"https://stackoverflow.blog/2023/05/17/keep-em-separated-get-better-maintainability-in-web-projects-using-the-model-view-controller-pattern/","SourceName":"Stack Overflow"}},{"node":{"ID":3749,"Title":"Unlocking the Power of JunoDB: PayPal’s Key-Value Store Goes Open-Source","Description":"","PublishedAt":"2023-05-17 13:51:07+00:00","OriginURL":"https://medium.com/paypal-tech/unlocking-the-power-of-junodb-paypals-key-value-store-goes-open-source-ee85f935bdc1?source=rss----6423323524ba---4","SourceName":"Paypal"}}]}},"pageContext":{"limit":30,"skip":2040,"numPages":193,"currentPage":69}},"staticQueryHashes":["3649515864"]}