{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/28","result":{"data":{"allPost":{"edges":[{"node":{"ID":4794,"Title":"Blog: Bootstrap an Air Gapped Cluster With Kubeadm","Description":"<p><strong>Author:</strong> Rob Mengert (Defense Unicorns)</p>\n<p>Ever wonder how software gets deployed onto a system that is deliberately disconnected from the Internet and other networks? These systems are typically disconnected due to their sensitive nature. Sensitive as in utilities (power/water), banking, healthcare, weapons systems, other government use cases, etc. Sometimes it's technically a water gap, if you're running Kubernetes on an underwater vessel. Still, these environments need software to operate. This concept of deployment in a disconnected state is what it means to deploy to the other side of an <a href=\"https://en.wikipedia.org/wiki/Air_gap_(networking)\">air gap</a>.</p>\n<p>Again, despite this posture, software still needs to run in these environments. Traditionally, software artifacts are physically carried across the air gap on hard drives, USB sticks, CDs, or floppy disks (for ancient systems, it still happens). Kubernetes lends itself particularly well to running software behind an air gap for several reasons, largely due to its declarative nature.</p>\n<p>In this blog article, I will walk through the process of bootstrapping a Kubernetes\ncluster in an air-gapped lab environment using Fedora Linux and kubeadm.</p>\n<h2 id=\"the-air-gap-vm-setup\">The Air Gap VM Setup</h2>\n<p>A real air-gapped network can take some effort to set up, so for this post, I will use an example VM on a laptop and do some network modifications. Below is the topology:</p>\n<figure>\n<img src=\"https://kubernetes.io/blog/2023/10/12/bootstrap-an-air-gapped-cluster-with-kubeadm/airgap-vm.svg\"\nalt=\"Topology on the host/laptop which shows that connectivity to the internet from the air gap VM is not possible. However, connectivity between the host/laptop and the VM is possible\"/>\n</figure>\n<h3 id=\"local-topology\">Local topology</h3>\n<p>This VM will have its network connectivity disabled but in a way that doesn't shut down the VM's virtual NIC. Instead, its network will be downed by injecting a default route to a dummy interface, making anything internet-hosted unreachable. However, the VM still has a connected route to the bridge interface on the host, which means that network connectivity to the host is still working. This posture means that data can be transferred from the host/laptop to the VM via scp, even with the default route on the VM black-holing all traffic that isn't destined for the local bridge subnet. This type of transfer is analogous to carrying data across the air gap and will be used throughout this post.</p>\n<p>Other details about the lab setup:</p>\n<p><strong>VM OS:</strong> Fedora 37<br>\n<strong>Kubernetes Version:</strong> v1.27.3<br>\n<strong>CNI Plugins Version:</strong> v1.3.0<br>\n<strong>CNI Provider and Version:</strong> Flannel v0.22.0</p>\n<p>While this single VM lab is a simplified example, the below diagram more approximately shows what a real air-gapped environment could look like:</p>\n<figure>\n<img src=\"https://kubernetes.io/blog/2023/10/12/bootstrap-an-air-gapped-cluster-with-kubeadm/example_production_topology.svg\"\nalt=\"Example production topology which shows 3 control plane Kubernetes nodes and &#39;n&#39; worker nodes along with a Docker registry in an air-gapped environment. Additionally shows two workstations, one on each side of the air gap and an IT admin which physically carries the artifacts across.\"/>\n</figure>\n<p>Note, there is still intentional isolation between the envirnment and the internet. There are also some things that are not shown in order to keep the diagram simple, for example malware scanning on the secure side of the air gap.</p>\n<p>Back to the single VM lab environment.</p>\n<h2 id=\"identifying-the-required-software-artifacts\">Identifying the required software artifacts</h2>\n<p>I have gone through the trouble of identifying all of the required software components that need to be carried across the air gap in order for this cluster to be stood up:</p>\n<ul>\n<li>Docker (to host an internal container image registry)</li>\n<li>Containerd</li>\n<li>libcgroup</li>\n<li>socat</li>\n<li>conntrack-tools</li>\n<li>CNI plugins</li>\n<li>crictl</li>\n<li>kubeadm</li>\n<li>kubelet</li>\n<li>kubectl and k9s (strictly speaking, these aren't required to bootstrap a cluster but they are handy to interact with one)</li>\n<li>kubelet.service systemd file</li>\n<li>kubeadm configuration file</li>\n<li>Docker registry container image</li>\n<li>Kubernetes component container images</li>\n<li>CNI network plugin container images (<a href=\"https://github.com/flannel-io/flannel\">Flannel</a> will be used for this lab)</li>\n<li>CNI network plugin manifests</li>\n<li>CNI tooling container images</li>\n</ul>\n<p>The way I identified these was by trying to do the installation and working through all of the errors that are thrown around an additional dependency being required. In a real air-gapped scenario, each transport of artifacts across the air gap could represent anywhere from 20 minutes to several weeks of time spent by the installer. That is to say that the target system could be located in a data center on the same floor as your desk, at a satellite downlink facility in the middle of nowhere, or on a submarine that's out to sea. Knowing what is on that system at any given time is important so you know what you have to bring.</p>\n<h2 id=\"prepare-the-node-for-k8s\">Prepare the Node for K8s</h2>\n<p>Before downloading and moving the artifacts to the VM, let's first prep that VM to run Kubernetes.</p>\n<h3 id=\"vm-preparation\">VM preparation</h3>\n<p><em>Run these steps as a normal user</em></p>\n<p><strong>Make destination directory for software artifacts</strong></p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>mkdir ~/tmp\n</span></span></code></pre></div><p><em>Run the following steps as the superuser</em> (<code>root</code>)</p>\n<p>Write to <code>/etc/sysctl.d/99-k8s-cri.conf</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>cat &gt; /etc/sysctl.d/99-k8s-cri.conf <span style=\"color:#b44\">&lt;&lt; EOF\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">net.bridge.bridge-nf-call-iptables=1\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">net.ipv4.ip_forward=1\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">net.bridge.bridge-nf-call-ip6tables=1\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">EOF</span>\n</span></span></code></pre></div><p>Write to <code>/etc/modules-load.d/k8s.conf</code> (enable <code>overlay</code> and <code>nbr_netfilter</code>):</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#a2f\">echo</span> -e overlay<span style=\"color:#b62;font-weight:bold\">\\\\</span>nbr_netfilter &gt; /etc/modules-load.d/k8s.conf\n</span></span></code></pre></div><p>Install iptables:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>dnf -y install iptables-legacy\n</span></span></code></pre></div><p>Set iptables to use legacy mode (not <code>nft</code> emulating <code>iptables</code>):</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>update-alternatives --set iptables /usr/sbin/iptables-legacy\n</span></span></code></pre></div><p>Turn off swap:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>touch /etc/systemd/zram-generator.conf\n</span></span><span style=\"display:flex;\"><span>systemctl mask systemd-zram-setup@.service\n</span></span><span style=\"display:flex;\"><span>sed -i <span style=\"color:#b44\">&#39;/ swap / s/^\\(.*\\)$/#\\1/g&#39;</span> /etc/fstab\n</span></span></code></pre></div><p>Disable <code>firewalld</code> (this is OK in a demo context):</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>systemctl disable --now firewalld\n</span></span></code></pre></div><p>Disable <code>systemd-resolved</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>systemctl disable --now systemd-resolved\n</span></span></code></pre></div><p>Configure DNS defaults for NetworkManager:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>sed -i <span style=\"color:#b44\">&#39;/\\[main\\]/a dns=default&#39;</span> /etc/NetworkManager/NetworkManager.conf\n</span></span></code></pre></div><p>Blank the system-level DNS resolver configuration:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>unlink /etc/resolv.conf <span style=\"color:#666\">||</span> <span style=\"color:#a2f\">true</span>\n</span></span><span style=\"display:flex;\"><span>touch /etc/resolv.conf\n</span></span></code></pre></div><p>Disable SELinux <em>(just for a demo - check before doing this in production!)</em>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>setenforce <span style=\"color:#666\">0</span>\n</span></span></code></pre></div><p><strong>Make sure all changes survive a reboot</strong></p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>reboot\n</span></span></code></pre></div><h2 id=\"download-all-the-artifacts\">Download all the artifacts</h2>\n<p>On the laptop/host machine, download all of the artifacts enumerated in the previous section. Since the air gapped VM is running Fedora 37, all of the dependencies shown in this part are for Fedora 37. Note, this procedure will only work on AArch64 or AMD64 CPU architectures as they are the most popular and widely available.. You can execute this procedure anywhere you have write permissions; your home directory is a perfectly suitable choice.</p>\n<p>Note, operating system packages for the Kubernetes artifacts that need to be carried across can now be found at <a href=\"https://kubernetes.io/blog/2023/08/15/pkgs-k8s-io-introduction/\">pkgs.k8s.io</a>. This blog post will use a combination of Fedora repositories and GitHub in order to download all of the required artifacts. When you’re doing this on your own cluster, you should decide whether to use the official Kubernetes packages, or the official packages from your operating system distribution - both are valid choices.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#080;font-style:italic\"># Set architecture variables</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">UARCH</span><span style=\"color:#666\">=</span><span style=\"color:#a2f;font-weight:bold\">$(</span>uname -m<span style=\"color:#a2f;font-weight:bold\">)</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">if</span> <span style=\"color:#666\">[[</span><span style=\"color:#b44\">&#34;</span><span style=\"color:#b8860b\">$UARCH</span><span style=\"color:#b44\">&#34;</span> <span style=\"color:#666\">==</span> <span style=\"color:#b44\">&#34;arm64&#34;</span> <span style=\"color:#666\">||</span> <span style=\"color:#b44\">&#34;</span><span style=\"color:#b8860b\">$UARCH</span><span style=\"color:#b44\">&#34;</span> <span style=\"color:#666\">==</span> <span style=\"color:#b44\">&#34;aarch64&#34;</span><span style=\"color:#666\">]]</span>; <span style=\"color:#a2f;font-weight:bold\">then</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;aarch64&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;arm64&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">else</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;x86_64&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;amd64&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">fi</span>\n</span></span></code></pre></div><p>Set environment variables for software versions to use:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">CNI_PLUGINS_VERSION</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;v1.3.0&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">CRICTL_VERSION</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;v1.27.0&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">KUBE_RELEASE</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;v1.27.3&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">RELEASE_VERSION</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;v0.15.1&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">K9S_VERSION</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;v0.27.4&#34;</span>\n</span></span></code></pre></div><p><strong>Create a <code>download</code> directory, change into it, and download all of the RPMs and configuration files</strong></p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>mkdir download <span style=\"color:#666\">&amp;&amp;</span> <span style=\"color:#a2f\">cd</span> download\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -O https://download.docker.com/linux/fedora/37/<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>/stable/Packages/docker-ce-cli-23.0.2-1.fc37.<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>.rpm\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -O https://download.docker.com/linux/fedora/37/<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>/stable/Packages/containerd.io-1.6.19-3.1.fc37.<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>.rpm\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -O https://download.docker.com/linux/fedora/37/<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>/stable/Packages/docker-compose-plugin-2.17.2-1.fc37.<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>.rpm\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -O https://download.docker.com/linux/fedora/37/<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>/stable/Packages/docker-ce-rootless-extras-23.0.2-1.fc37.<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>.rpm\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -O https://download.docker.com/linux/fedora/37/<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>/stable/Packages/docker-ce-23.0.2-1.fc37.<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>.rpm\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -O https://download-ib01.fedoraproject.org/pub/fedora/linux/releases/37/Everything/<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>/os/Packages/l/libcgroup-3.0-1.fc37.<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>.rpm\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f\">echo</span> -e <span style=\"color:#b44\">&#34;\\nDownload Kubernetes Binaries&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -L -O <span style=\"color:#b44\">&#34;https://github.com/containernetworking/plugins/releases/download/</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">CNI_PLUGINS_VERSION</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">/cni-plugins-linux-</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">-</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">CNI_PLUGINS_VERSION</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">.tgz&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -L -O <span style=\"color:#b44\">&#34;https://github.com/kubernetes-sigs/cri-tools/releases/download/</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">CRICTL_VERSION</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">/crictl-</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">CRICTL_VERSION</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">-linux-</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">.tar.gz&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -L --remote-name-all https://dl.k8s.io/release/<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">KUBE_RELEASE</span><span style=\"color:#b68;font-weight:bold\">}</span>/bin/linux/<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>/<span style=\"color:#666\">{</span>kubeadm,kubelet<span style=\"color:#666\">}</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -L -O <span style=\"color:#b44\">&#34;https://raw.githubusercontent.com/kubernetes/release/</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">RELEASE_VERSION</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -L -O <span style=\"color:#b44\">&#34;https://raw.githubusercontent.com/kubernetes/release/</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">RELEASE_VERSION</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -L -O <span style=\"color:#b44\">&#34;https://dl.k8s.io/release/</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">KUBE_RELEASE</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">/bin/linux/</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">/kubectl&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f\">echo</span> -e <span style=\"color:#b44\">&#34;\\nDownload dependencies&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -O <span style=\"color:#b44\">&#34;https://dl.fedoraproject.org/pub/fedora/linux/releases/37/Everything/</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">/os/Packages/s/socat-1.7.4.2-3.fc37.</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">.rpm&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -O <span style=\"color:#b44\">&#34;https://dl.fedoraproject.org/pub/fedora/linux/releases/37/Everything/</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">/os/Packages/l/libcgroup-3.0-1.fc37.</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">.rpm&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -O <span style=\"color:#b44\">&#34;https://dl.fedoraproject.org/pub/fedora/linux/releases/37/Everything/</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">/os/Packages/c/conntrack-tools-1.4.6-4.fc37.</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">.rpm&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -LO <span style=\"color:#b44\">&#34;https://github.com/derailed/k9s/releases/download/</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">K9S_VERSION</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">/k9s_Linux_</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">.tar.gz&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -LO <span style=\"color:#b44\">&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml&#34;</span>\n</span></span></code></pre></div><p><strong>Download all of the necessary container images:</strong></p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">images</span><span style=\"color:#666\">=(</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/kube-apiserver:</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">KUBE_RELEASE</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/kube-controller-manager:</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">KUBE_RELEASE</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/kube-scheduler:</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">KUBE_RELEASE</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/kube-proxy:</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">KUBE_RELEASE</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/pause:3.9&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/etcd:3.5.7-0&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/coredns/coredns:v1.10.1&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry:2.8.2&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;flannel/flannel:v0.22.0&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;flannel/flannel-cni-plugin:v1.1.2&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#666\">)</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">for</span> image in <span style=\"color:#b44\">&#34;</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">images</span>[@]<span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">&#34;</span>; <span style=\"color:#a2f;font-weight:bold\">do</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#080;font-style:italic\"># Pull the image from the registry</span>\n</span></span><span style=\"display:flex;\"><span> docker pull <span style=\"color:#b44\">&#34;</span><span style=\"color:#b8860b\">$image</span><span style=\"color:#b44\">&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#080;font-style:italic\"># Save the image to a tar file on the local disk</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">image_name</span><span style=\"color:#666\">=</span><span style=\"color:#a2f;font-weight:bold\">$(</span><span style=\"color:#a2f\">echo</span> <span style=\"color:#b44\">&#34;</span><span style=\"color:#b8860b\">$image</span><span style=\"color:#b44\">&#34;</span> | sed <span style=\"color:#b44\">&#39;s|/|_|g&#39;</span> | sed <span style=\"color:#b44\">&#39;s/:/_/g&#39;</span><span style=\"color:#a2f;font-weight:bold\">)</span>\n</span></span><span style=\"display:flex;\"><span> docker save -o <span style=\"color:#b44\">&#34;</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">image_name</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">.tar&#34;</span> <span style=\"color:#b44\">&#34;</span><span style=\"color:#b8860b\">$image</span><span style=\"color:#b44\">&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">done</span>\n</span></span></code></pre></div><p>The above commands will take a look at the CPU architecture for the current host/laptop, create and change into a directory called download, and finally download all of the dependencies. Each of these files must then be transported over the air gap via scp. The exact syntax of the command will vary depending on the user on the VM, if you created an SSH key, and the IP of your air gap VM. The rough syntax is:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>scp -i <span style=\"color:#b44\">&lt;&lt;SSH_KEY&gt;&gt; &lt;&lt;FILE&gt;&gt; &lt;&lt;AIRGAP_VM_US</span>ER&gt;&gt;@<span style=\"color:#b44\">&lt;&lt;AIRGA</span>P_VM_IP&gt;&gt;:~/tmp/\n</span></span></code></pre></div><p>Once all of the files have been transported to the air gapped VM, the rest of the blog post will take place from the VM. Open a terminal session to that system.</p>\n<h3 id=\"put-the-artifacts-in-place\">Put the artifacts in place</h3>\n<p>Everything that is needed in order to bootstrap a Kubernetes cluster now exists on the air-gapped VM. This section is a lot more complicated since various types of artifacts are now on disk on the air-gapped VM. Get a root shell on the air gap VM as the rest of this section will be executed from there. Let's start by setting the same architecture variables and environmental as were set on the host/laptop and then install all of the RPM packages:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">UARCH</span><span style=\"color:#666\">=</span><span style=\"color:#a2f;font-weight:bold\">$(</span>uname -m<span style=\"color:#a2f;font-weight:bold\">)</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#080;font-style:italic\"># Set architecture variables</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">if</span> <span style=\"color:#666\">[[</span><span style=\"color:#b44\">&#34;</span><span style=\"color:#b8860b\">$UARCH</span><span style=\"color:#b44\">&#34;</span> <span style=\"color:#666\">==</span> <span style=\"color:#b44\">&#34;arm64&#34;</span> <span style=\"color:#666\">||</span> <span style=\"color:#b44\">&#34;</span><span style=\"color:#b8860b\">$UARCH</span><span style=\"color:#b44\">&#34;</span> <span style=\"color:#666\">==</span> <span style=\"color:#b44\">&#34;aarch64&#34;</span><span style=\"color:#666\">]]</span>; <span style=\"color:#a2f;font-weight:bold\">then</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;aarch64&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;arm64&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">else</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;x86_64&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;amd64&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">fi</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#080;font-style:italic\"># Set environment variables</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">CNI_PLUGINS_VERSION</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;v1.3.0&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">CRICTL_VERSION</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;v1.27.0&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">KUBE_RELEASE</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;v1.27.3&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">RELEASE_VERSION</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;v0.15.1&#34;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">K9S_VERSION</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;v0.27.4&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f\">cd</span> ~/tmp/\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>dnf -y install ./*.rpm\n</span></span></code></pre></div><p>Next, install the CNI plugins and <code>crictl</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>mkdir -p /opt/cni/bin\n</span></span><span style=\"display:flex;\"><span>tar -C /opt/cni/bin -xz -f <span style=\"color:#b44\">&#34;cni-plugins-linux-</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">-v1.3.0.tgz&#34;</span>\n</span></span><span style=\"display:flex;\"><span>tar -C /usr/local/bin-xz -f <span style=\"color:#b44\">&#34;crictl-v1.27.0-linux-</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">.tar.gz&#34;</span>\n</span></span></code></pre></div><p>Make kubeadm, kubelet and kubectl executable and move them from the <code>/tmp</code>\ndirectory to <code>/usr/local/bin</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>chmod +x kubeadm kubelet kubectl\n</span></span><span style=\"display:flex;\"><span>mv kubeadm kubelet kubectl /usr/local/bin\n</span></span></code></pre></div><p>Define an override for the systemd kubelet service file, and move it to the proper location:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>mkdir -p /etc/systemd/system/kubelet.service.d\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>sed <span style=\"color:#b44\">&#34;s:/usr/bin:/usr/local/bin:g&#34;</span> 10-kubeadm.conf &gt; /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n</span></span></code></pre></div><p>The CRI plugin for containerd is disabled by default; enable it:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>sed -i <span style=\"color:#b44\">&#39;s/^disabled_plugins = \\[&#34;cri&#34;\\]/#&amp;/&#39;</span> /etc/containerd/config.toml\n</span></span></code></pre></div><p>Put a custom <code>/etc/docker/daemon.json</code> file in place:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#a2f\">echo</span> <span style=\"color:#b44\">&#39;{\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">&#34;exec-opts&#34;: [&#34;native.cgroupdriver=systemd&#34;],\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">&#34;insecure-registries&#34; : [&#34;localhost:5000&#34;],\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">&#34;allow-nondistributable-artifacts&#34;: [&#34;localhost:5000&#34;],\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">&#34;log-driver&#34;: &#34;json-file&#34;,\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">&#34;log-opts&#34;: {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">&#34;max-size&#34;: &#34;100m&#34;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">},\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">&#34;group&#34;: &#34;rnd&#34;,\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">&#34;storage-driver&#34;: &#34;overlay2&#34;,\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">&#34;storage-opts&#34;: [\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">&#34;overlay2.override_kernel_check=true&#34;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">]\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">}&#39;</span> &gt; /etc/docker/daemon.json\n</span></span></code></pre></div><p>Two important items to highlight in the Docker <code>daemon.json</code> configuration file. The insecure-registries line means that the registry in brackets does not support TLS. Even inside an air gapped environment, this isn't a good practice but is fine for the purposes of this lab. The allow-nondistributable-artifacts line tells Docker to permit pushing nondistributable artifacts to this registry. Docker by default does not push these layers to avoid potential issues around licensing or distribution rights. A good example of this is the Windows base container image. This line will allow layers that Docker marks as &quot;foreign&quot; to be pushed to the registry. While not a big deal for this article, that line could be required for some air gapped environments. All layers have to exist locally since nothing inside the air gapped environment can reach out to a public container image registry to get what it needs.</p>\n<p>(Re)start Docker and enable it so it starts at system boot:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>systemctl restart docker\n</span></span><span style=\"display:flex;\"><span>systemctl <span style=\"color:#a2f\">enable</span> docker\n</span></span></code></pre></div><p>Start, and enable, containerd and the kubelet:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>systemctl <span style=\"color:#a2f\">enable</span> --now containerd\n</span></span><span style=\"display:flex;\"><span>systemctl <span style=\"color:#a2f\">enable</span> --now kubelet\n</span></span></code></pre></div><p>The container image registry that runs in Docker is only required for any CNI related containers and subsequent workload containers. This registry is <strong>not</strong> used to house the Kubernetes component containers. Note, nerdctl would have also worked here as an alternative to Docker and would have allowed for direct interaction with containerd. Docker was chosen for its familiarity.</p>\n<p>Start a container image registry inside Docker:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>docker load -i registry_2.8.2.tar\n</span></span><span style=\"display:flex;\"><span>docker run -d -p 5000:5000 --restart<span style=\"color:#666\">=</span>always --name registry registry:2.8.2\n</span></span></code></pre></div><h3 id=\"load-flannel-containers-into-the-docker-registry\">Load Flannel containers into the Docker registry</h3>\n<p><strong>Note</strong>: <em>Flannel was chosen for this lab due to familiarity. Chose whatever CNI works best in your environment.</em></p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>docker load -i flannel_flannel_v0.22.0.tar\n</span></span><span style=\"display:flex;\"><span>docker load -i flannel_flannel-cni-plugin_v1.1.2.tar\n</span></span><span style=\"display:flex;\"><span>docker tag flannel/flannel:v0.22.0 localhost:5000/flannel/flannel:v0.22.0\n</span></span><span style=\"display:flex;\"><span>docker tag flannel/flannel-cni-plugin:v1.1.1 localhost:5000/flannel/flannel-cni-plugin:v1.1.1\n</span></span><span style=\"display:flex;\"><span>docker push localhost:5000/flannel/flannel:v0.22.0\n</span></span><span style=\"display:flex;\"><span>docker push localhost:5000/flannel/flannel-cni-plugin:v1.1.1\n</span></span></code></pre></div><p>Load container images for Kubernetes components, via <code>ctr</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">images_files</span><span style=\"color:#666\">=(</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/kube-apiserver:</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">KUBE_RELEASE</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/kube-controller-manager:</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">KUBE_RELEASE</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/kube-scheduler:</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">KUBE_RELEASE</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/kube-proxy:</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">KUBE_RELEASE</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/pause:3.9&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/etcd:3.5.7-0&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b44\">&#34;registry.k8s.io/coredns/coredns:v1.10.1&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#666\">)</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">for</span> index in <span style=\"color:#b44\">&#34;</span><span style=\"color:#b68;font-weight:bold\">${</span>!image_files[@]<span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">&#34;</span>; <span style=\"color:#a2f;font-weight:bold\">do</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#a2f;font-weight:bold\">if</span> <span style=\"color:#666\">[[</span>-f <span style=\"color:#b44\">&#34;</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">image_files</span>[<span style=\"color:#b8860b\">$index</span>]<span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">&#34;</span> <span style=\"color:#666\">]]</span>; <span style=\"color:#a2f;font-weight:bold\">then</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#080;font-style:italic\"># The below line loads the images where they need to be on the VM</span>\n</span></span><span style=\"display:flex;\"><span> ctr -n k8s.io images import <span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">image_files</span>[<span style=\"color:#b8860b\">$index</span>]<span style=\"color:#b68;font-weight:bold\">}</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#a2f;font-weight:bold\">else</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#a2f\">echo</span> <span style=\"color:#b44\">&#34;File </span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">image_files</span>[<span style=\"color:#b8860b\">$index</span>]<span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\"> not found!&#34;</span> 1&gt;&amp;<span style=\"color:#666\">2</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#a2f;font-weight:bold\">fi</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">done</span>\n</span></span></code></pre></div><p>A totally reasonable question here could be &quot;Why not use the Docker registry that was just stood up to house the K8s component images?&quot; This simply didn't work even with the proper modification to the configuration file that gets passed to kubeadm.</p>\n<h3 id=\"spin-up-the-kubernetes-cluster\">Spin up the Kubernetes cluster</h3>\n<p>Check if a cluster is already running and tear it down if it is:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">if</span> systemctl is-active --quiet kubelet; <span style=\"color:#a2f;font-weight:bold\">then</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#080;font-style:italic\"># Reset the Kubernetes cluster</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#a2f\">echo</span> <span style=\"color:#b44\">&#34;A Kubernetes cluster is already running. Resetting the cluster...&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> kubeadm reset -f\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">fi</span>\n</span></span></code></pre></div><p>Log into the Docker registry from inside the air-gapped VM:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#080;font-style:italic\"># OK for a demo; use secure credentials in production!</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">DOCKER_USER</span><span style=\"color:#666\">=</span>user\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">DOCKER_PASS</span><span style=\"color:#666\">=</span>pass\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f\">echo</span> <span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">DOCKER_PASS</span><span style=\"color:#b68;font-weight:bold\">}</span> | docker login --username<span style=\"color:#666\">=</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">DOCKER_USER</span><span style=\"color:#b68;font-weight:bold\">}</span> --password-stdin localhost:5000\n</span></span></code></pre></div><p>Create a cluster configuration file and initialize the cluster:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#a2f\">echo</span> <span style=\"color:#b44\">&#34;---\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">apiVersion: kubeadm.k8s.io/v1beta3\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">kind: ClusterConfiguration\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">clusterName: kubernetes\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">kubernetesVersion: v1.27.3\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">networking:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\"> dnsDomain: cluster.local\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\"> podSubnet: 10.244.0.0/16 # --pod-network-cidr\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\"> serviceSubnet: 10.96.0.0/12\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">---\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">apiVersion: kubeadm.k8s.io/v1beta3\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">kind: InitConfiguration\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">localAPIEndpoint:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\"> advertiseAddress: 10.10.10.10 # Update to the IP address of the air gap VM\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\"> bindPort: 6443\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\">nodeRegistration:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\"> criSocket: unix:///run/containerd/containerd.sock # or rely on autodetection\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\"> name: airgap # this must match the hostname of the air gap VM\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\"># Since this is a single node cluster, this taint has to be commented out,\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\"># otherwise the coredns pods will not come up.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\"># taints:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\"># - effect: NoSchedule\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#b44\"># key: node-role.kubernetes.io/master&#34;</span> &gt; kubeadm_cluster.yaml\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>kubeadm init --config kubeadm_config.yaml\n</span></span></code></pre></div><p>Set <code>$KUBECONFIG</code> and use <code>kubectl</code> to wait until the API server is healthy:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#a2f\">export</span> <span style=\"color:#b8860b\">KUBECONFIG</span><span style=\"color:#666\">=</span>/etc/kubernetes/admin.conf\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">until</span> kubectl get nodes; <span style=\"color:#a2f;font-weight:bold\">do</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#a2f\">echo</span> -e <span style=\"color:#b44\">&#34;\\nWaiting for API server to respond...&#34;</span> 1&gt;&amp;<span style=\"color:#666\">2</span>\n</span></span><span style=\"display:flex;\"><span> sleep <span style=\"color:#666\">5</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">done</span>\n</span></span></code></pre></div><h3 id=\"set-up-networking\">Set up networking</h3>\n<p>Update Flannel image locations in the Flannel manifest, and apply it:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>sed -i <span style=\"color:#b44\">&#39;s/image: docker\\.io/image: localhost:5000/g&#39;</span> kube-flannel.yaml\n</span></span><span style=\"display:flex;\"><span>kubectl apply -f kube-flannel.yaml\n</span></span></code></pre></div><p>Run <code>kubectl get pods -A --watch</code> until all pods are up and running.</p>\n<h2 id=\"run-an-example-pod\">Run an example Pod</h2>\n<p>With a cluster operational, the next step is a workload. For this simple demonstration, the <a href=\"https://github.com/stefanprodan/podinfo\">Podinfo</a> application will be deployed.</p>\n<h3 id=\"install-helm\">Install Helm</h3>\n<p>This first part of the procedure must be executed from the host/laptop. If not already present, install Helm following <a href=\"https://helm.sh/docs/intro/install/\">Installing Helm</a>.</p>\n<p>Next, download the helm binary for Linux:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">UARCH</span><span style=\"color:#666\">=</span><span style=\"color:#a2f;font-weight:bold\">$(</span>uname -m<span style=\"color:#a2f;font-weight:bold\">)</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#080;font-style:italic\"># Reset the architecture variables if needed</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">if</span> <span style=\"color:#666\">[[</span><span style=\"color:#b44\">&#34;</span><span style=\"color:#b8860b\">$UARCH</span><span style=\"color:#b44\">&#34;</span> <span style=\"color:#666\">==</span> <span style=\"color:#b44\">&#34;arm64&#34;</span> <span style=\"color:#666\">||</span> <span style=\"color:#b44\">&#34;</span><span style=\"color:#b8860b\">$UARCH</span><span style=\"color:#b44\">&#34;</span> <span style=\"color:#666\">==</span> <span style=\"color:#b44\">&#34;aarch64&#34;</span><span style=\"color:#666\">]]</span>; <span style=\"color:#a2f;font-weight:bold\">then</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;aarch64&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;arm64&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">else</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;x86_64&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;amd64&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">fi</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -LO https://get.helm.sh/helm-v3.12.2-linux-<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span>.tar.gz\n</span></span></code></pre></div><p>Add the Podinfo helm repository, download the Podinfo helm chart, download the Podinfo container image, and then finally save it to the local disk:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>helm repo add https://stefanprodan.github.io/podinfo\n</span></span><span style=\"display:flex;\"><span>helm fetch podinfo/podinfo --version 6.4.0\n</span></span><span style=\"display:flex;\"><span>docker pull ghcr.io/stefanprodan/podinfo:6.4.0\n</span></span></code></pre></div><h3 id=\"save-the-podinfo-image-to-a-tar-file-on-the-local-disk\">Save the podinfo image to a tar file on the local disk</h3>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>docker save -o podinfo_podinfo-6.4.0.tar ghcr.io/stefanprodan/podinfo\n</span></span></code></pre></div><pre tabindex=\"0\"><code class=\"language-suggestion\" data-lang=\"suggestion\">\n### Transfer the image across the air gap\nReuse the `~/tmp` directory created on the air gapped VM to transport these artifacts across the air gap:\n```bash\nscp -i &lt;&lt;SSH_KEY&gt;&gt; &lt;&lt;FILE&gt;&gt; &lt;&lt;AIRGAP_VM_USER&gt;&gt;@&lt;&lt;AIRGAP_VM_IP&gt;&gt;:~/tmp/\n</code></pre><h3 id=\"continue-on-the-isolated-side\">Continue on the isolated side</h3>\n<p><em>Now pivot over to the air gap VM for the rest of the installation procedure.</em></p>\n<p>Switch into <code>~/tmp</code>:</p>\n<pre tabindex=\"0\"><code>cd ~/tmp\n</code></pre><p>Extract and move the <code>helm</code> binary:</p>\n<pre tabindex=\"0\"><code>tar -zxvf helm-v3.0.0-linux-amd64.tar.gz\nmv linux-amd64/helm /usr/local/bin/helm\n</code></pre><p>Load the Podinfo container image into the local Docker registry:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>docker load -i podinfo_podinfo-6.4.0.tar\n</span></span><span style=\"display:flex;\"><span>docker tag podinfo/podinfo:6.4.0 localhost:5000/podinfo/podinfo:6.4.0\n</span></span><span style=\"display:flex;\"><span>docker push localhost:5000/podinfo/podinfo:6.4.0\n</span></span></code></pre></div><p>Ensure &quot;$KUBECONFIG` is set correctly, then install the Podinfo Helm chart:</p>\n<pre tabindex=\"0\"><code># Outside of a demo or lab environment, use lower (or even least) privilege\n# credentials to manage your workloads.\nexport KUBECONFIG=/etc/kubernetes/admin.conf\nhelm install podinfo ./podinfo-6.4.0.tgz --set image.repository=localhost:5000/podinfo/podinfo\n</code></pre><p>Verify that the Podinfo application comes up:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>kubectl get pods -n default\n</span></span></code></pre></div><p>Or run k9s (a terminal user interface for Kubernetes):</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>k9s\n</span></span></code></pre></div><h2 id=\"zarf\">Zarf</h2>\n<p>Zarf is an open-source tool that takes a declarative approach to software packaging and delivery, including air gap. This same podinfo application will be installed onto the air gap VM using Zarf in this section. The first step is to install <a href=\"https://zarf.dev/install/\">Zarf</a> on the host/laptop.</p>\n<p>Alternatively, a prebuilt binary can be downloaded onto the host/laptop from <a href=\"https://github.com/defenseunicorns/zarf/releases/\">GitHub</a> for various OS/CPU architectures.</p>\n<p>A binary is also needed across the air gap on the VM:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">UARCH</span><span style=\"color:#666\">=</span><span style=\"color:#a2f;font-weight:bold\">$(</span>uname -m<span style=\"color:#a2f;font-weight:bold\">)</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#080;font-style:italic\"># Set the architecture variables if needed</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">if</span> <span style=\"color:#666\">[[</span><span style=\"color:#b44\">&#34;</span><span style=\"color:#b8860b\">$UARCH</span><span style=\"color:#b44\">&#34;</span> <span style=\"color:#666\">==</span> <span style=\"color:#b44\">&#34;arm64&#34;</span> <span style=\"color:#666\">||</span> <span style=\"color:#b44\">&#34;</span><span style=\"color:#b8860b\">$UARCH</span><span style=\"color:#b44\">&#34;</span> <span style=\"color:#666\">==</span> <span style=\"color:#b44\">&#34;aarch64&#34;</span><span style=\"color:#666\">]]</span>; <span style=\"color:#a2f;font-weight:bold\">then</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;aarch64&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;arm64&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">else</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;x86_64&#34;</span>\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#666\">=</span><span style=\"color:#b44\">&#34;amd64&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f;font-weight:bold\">fi</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f\">export</span> <span style=\"color:#b8860b\">ZARF_VERSION</span><span style=\"color:#666\">=</span>v0.28.3\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>curl -LO <span style=\"color:#b44\">&#34;https://github.com/defenseunicorns/zarf/releases/download/</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ZARF_VERSION</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">/zarf_</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ZARF_VERSION</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">_Linux_</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">&#34;</span>\n</span></span></code></pre></div><p>Zarf needs to bootstrap itself into a Kubernetes cluster through the use of an init package. That also needs to be transported across the air gap so let's download it onto the host/laptop:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>curl -LO <span style=\"color:#b44\">&#34;https://github.com/defenseunicorns/zarf/releases/download/</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ZARF_VERSION</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">/zarf-init-</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">K8s_ARCH</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">-</span><span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ZARF_VERSION</span><span style=\"color:#b68;font-weight:bold\">}</span><span style=\"color:#b44\">.tar.zst&#34;</span>\n</span></span></code></pre></div><p>The way that Zarf is declarative is through the use of a zarf.yaml file. Here is the zarf.yaml file that will be used for this Podinfo installation. Write it to whatever directory you you have write access to on your host/laptop; your home directory is fine:</p>\n<pre tabindex=\"0\"><code>echo &#39;kind: ZarfPackageConfig\nmetadata:\nname: podinfo\ndescription: &#34;Deploy helm chart for the podinfo application in K8s via zarf&#34;\ncomponents:\n- name: podinfo\nrequired: true\ncharts:\n- name: podinfo\nversion: 6.4.0\nnamespace: podinfo-helm-namespace\nreleaseName: podinfo\nurl: https://stefanprodan.github.io/podinfo\nimages:\n- ghcr.io/stefanprodan/podinfo:6.4.0&#39; &gt; zarf.yaml\n</code></pre><p>The next step is to build the Podinfo package. This must be done from the same directory location where the zarf.yaml file is located.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>zarf package create --confirm\n</span></span></code></pre></div><p>This command will download the defined helm chart and image and put them into a single file written to disk. This single file is all that needs to be carried across the air gap:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>ls zarf-package-*\n</span></span></code></pre></div><p>Sample output:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>zarf-package-podinfo-arm64.tar.zst\n</span></span></code></pre></div><p>Transport the linux zarf binary, zarf init package and Podinfo package over to the air gapped VM:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>scp -i <span style=\"color:#b44\">&lt;&lt;SSH_KEY&gt;&gt; &lt;&lt;FILE&gt;&gt; &lt;&lt;AIRGAP_VM_US</span>ER&gt;&gt;@<span style=\"color:#b44\">&lt;&lt;AIRGA</span>P_VM_IP&gt;&gt;:~/tmp/\n</span></span></code></pre></div><p>From the air gapped VM, switch into the ~/tmp directory where all of the artifacts were placed:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#a2f\">cd</span> ~/tmp\n</span></span></code></pre></div><p>Set <code>$KUBECONFIG</code> to a file with credentials for the local cluster; also set the the Zarf version:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span><span style=\"color:#a2f\">export</span> <span style=\"color:#b8860b\">KUBECONFIG</span><span style=\"color:#666\">=</span>/etc/kubernetes/admin.conf\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#a2f\">export</span> <span style=\"color:#b8860b\">ZARF_VERSION</span><span style=\"color:#666\">=</span><span style=\"color:#a2f;font-weight:bold\">$(</span>zarf version<span style=\"color:#a2f;font-weight:bold\">)</span>\n</span></span></code></pre></div><p>Make the <code>zarf</code> binary executable and (as <code>root</code>) move it to <code>/usr/bin</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>chmod +x zarf <span style=\"color:#666\">&amp;&amp;</span> sudo mv zarf /usr/bin\n</span></span></code></pre></div><p>Likewise, move the Zarf init package to <code>/usr/bin</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>mv zarf-init-arm64-<span style=\"color:#b68;font-weight:bold\">${</span><span style=\"color:#b8860b\">ZARF_VERSION</span><span style=\"color:#b68;font-weight:bold\">}</span>.tar.zst /usr/bin\n</span></span></code></pre></div><p>Initialize Zarf into the cluster:</p>\n<pre tabindex=\"0\"><code>zarf init --confirm --components=git-server\n</code></pre><p>When this command is done, a Zarf package is ready to be deployed.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-bash\" data-lang=\"bash\"><span style=\"display:flex;\"><span>zarf package deploy\n</span></span></code></pre></div><p>This command will search the current directory for a Zarf package. Select the podinfo package (zarf-package-podinfo-${K8s_ARCH}.tar.zst) and continue. Once the package deployment is complete, run <code>zarf tools monitor</code> in order to bring up k9s to view the cluster.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This is one method that can be used to spin up an air-gapped cluster and two methods to deploy\na mission application. Your mileage may vary on different operating systems regarding the\nexact software artifacts that need to be carried across the air gap, but conceptually this procedure is still valid.</p>\n<p>This demo also created an artificial air-gapped environment. In the real world, every missed dependency\ncould represent hours, if not days, or weeks of lost time to get running software in the air-gapped environment.\nThis artificial air gap also obscured some common methods or air gap software delivery such as using a\n<em>data diode</em>. Depending on the environment, the diode can be very expensive to use.\nAlso, none of the artifacts were scanned before being carried across the air gap.\nThe presence of the air gap in general means that the workload running there is more sensitive, and nothing should be carried across unless it's known to be safe.</p>","PublishedAt":"2023-10-12 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2023/10/12/bootstrap-an-air-gapped-cluster-with-kubeadm/","SourceName":"Kubernetes"}},{"node":{"ID":4800,"Title":"Migrating 1 billion log lines from OpenSearch to Elasticsearch","Description":"","PublishedAt":"2023-10-12 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/migrating-1-billion-log-lines-opensearch-elasticsearch","SourceName":"Elastic"}},{"node":{"ID":4793,"Title":"GitHub Availability Report: September 2023","Description":"<p>In September, we experienced two incidents that resulted in degraded performance across GitHub services. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://github.blog/2023-10-11-github-availability-report-september-2023/\">GitHub Availability Report: September 2023</a> appeared first on <a rel=\"nofollow\" href=\"https://github.blog\">The GitHub Blog</a>.</p>\n","PublishedAt":"2023-10-11 19:47:46+00:00","OriginURL":"https://github.blog/2023-10-11-github-availability-report-september-2023/","SourceName":"GitHub"}},{"node":{"ID":4783,"Title":"Infrastructure and security releases open HashiConf 2023","Description":"HashiConf 2023 unveils key announcements covering infrastructure and workflow enhancements as well as new security lifecycle management capabilities.","PublishedAt":"2023-10-11 16:30:00+00:00","OriginURL":"https://www.hashicorp.com/blog/infrastructure-security-lifecycle-releases-open-hashiconf-2023","SourceName":"HashiCorp"}},{"node":{"ID":4784,"Title":"HCP Packer now supports webhooks and streamlined run task reviews","Description":"Webhooks automatically notify external systems about image-related events. Streamlined run task reviews offer meaningful context on HCP Packer run task evaluations.","PublishedAt":"2023-10-11 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/hcp-packer-now-supports-webhooks-and-streamlined-run-task-reviews","SourceName":"HashiCorp"}},{"node":{"ID":4785,"Title":"New HCP Vault Secrets, Radar, and other features fight secrets sprawl","Description":"HashiCorp Vault adds cross-platform product innovations with an emphasis on resolving secrets sprawl.","PublishedAt":"2023-10-11 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/new-hcp-vault-secrets-radar-and-other-features-fight-secrets-sprawl","SourceName":"HashiCorp"}},{"node":{"ID":4786,"Title":"HCP Vault Secrets is now generally available","Description":"HCP Vault Secrets is a managed offering of HashiCorp Vault focusing on secrets management for developers that offers key capabilities including secrets sync.","PublishedAt":"2023-10-11 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/hcp-vault-secrets-is-now-generally-available","SourceName":"HashiCorp"}},{"node":{"ID":4787,"Title":"New Terraform testing and UX features reduce toil, errors, and costs","Description":"Terraform and Terraform Cloud improve developer usability and velocity with a test framework, generated module tests, and stacks.","PublishedAt":"2023-10-11 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/new-terraform-testing-and-ux-features-reduce-toil-errors-and-costs","SourceName":"HashiCorp"}},{"node":{"ID":4788,"Title":"Announcing Boundary Desktop embedded terminal, LDAP support, and more ","Description":"HashiCorp Boundary 0.14, with an embedded terminal in the desktop client and LDAP GA support, is now available for download as well as for use on HCP Boundary. ","PublishedAt":"2023-10-11 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/announcing-boundary-desktop-embedded-terminal-ldap-support-and-more","SourceName":"HashiCorp"}},{"node":{"ID":4789,"Title":"A new vision for HCP Waypoint","Description":"Going forward, HCP Waypoint is aimed at empowering platform teams to define golden patterns and workflows for developers to manage applications at scale.","PublishedAt":"2023-10-11 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/a-new-vision-for-hcp-waypoint","SourceName":"HashiCorp"}},{"node":{"ID":4790,"Title":"Announcing Consul 1.17 beta and HCP Consul Central","Description":"Consul 1.17 beta enhances simplified workflow management, reliability, scale, and security for service networking. HCP Consul Central adds global visibility and control.","PublishedAt":"2023-10-11 15:45:00+00:00","OriginURL":"https://www.hashicorp.com/blog/announcing-consul-1-17-beta-and-hcp-consul-central","SourceName":"HashiCorp"}},{"node":{"ID":4791,"Title":"Wondering how sustainable your buildings are? Make your data speak","Description":"If we can make operational data easier to manage and easier to access through simple, standardized APIs, everyone can transform their companies into sustainable data-driven organizations.","PublishedAt":"2023-10-11 14:06:45+00:00","OriginURL":"https://stackoverflow.blog/2023/10/11/wondering-how-sustainable-your-buildings-are-make-your-data-speak/","SourceName":"Stack Overflow"}},{"node":{"ID":4782,"Title":"Elasticsearch and Arduino: Better together!","Description":"","PublishedAt":"2023-10-11 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/elasticsearch-arduino","SourceName":"Elastic"}},{"node":{"ID":4792,"Title":"Visualize user interactions with your pages by using Scrollmaps in Datadog Heatmaps","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/visualize-behavior-datadog-scrollmaps/hero.png\" width=\"100%\"/>When developing modern applications, product managers, designers, and website developers need to understand how users interact with web pages in order to guide those users through their desired journeys. For example, teams need to know if users ever see the content near the bottom of the page, where to place CTAs to ensure they are in high-traffic areas, and how to compare different pages based on user engagement.That&rsquo;s why we&rsquo;re proud to announce Scrollmaps, a new feature of Datadog Heatmaps that leverages Session Replay data to show you how far users scroll down a page.","PublishedAt":"2023-10-11 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/visualize-behavior-datadog-scrollmaps/","SourceName":"Datadog"}},{"node":{"ID":4799,"Title":"Organize and analyze related session replays with Playlists in Datadog RUM","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/datadog-rum-session-replay-playlists/session-replay-playlists-hero.png\" width=\"100%\"/>Datadog Session Replay in Real User Monitoring (RUM) enables customers to capture and visually replay the web and mobile experience of their end users. With Session Replay, customers can quickly find and address UX errors by seeing precisely what actions an end user took, the point where they got stuck, and the outcome encountered as a result. Session Replay allows for easier troubleshooting and debugging because it delivers visible, insightful context into frontend errors.","PublishedAt":"2023-10-11 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/datadog-rum-session-replay-playlists/","SourceName":"Datadog"}},{"node":{"ID":4773,"Title":"HTTP/2 Rapid Reset: deconstructing the record-breaking attack","Description":"This post dives into the details of the HTTP/2 protocol, the feature that attackers exploited to generate the massive Rapid Reset attacks, and the mitigation strategies we took to ensure all our customers are protected","PublishedAt":"2023-10-10 12:02:28+00:00","OriginURL":"http://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/","SourceName":"Cloudflare"}},{"node":{"ID":5286,"Title":"HTTP/2 Rapid Reset: deconstructing the record-breaking attack","Description":" This post dives into the details of the HTTP/2 protocol, the feature that attackers exploited to generate the massive Rapid Reset attacks, and the mitigation strategies we took to ensure all our customers are protected ","PublishedAt":"2023-10-10 12:02:28+00:00","OriginURL":"https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack","SourceName":"Cloudflare"}},{"node":{"ID":5388,"Title":"HTTP/2 Rapid Reset: deconstructing the record-breaking attack","Description":" This post dives into the details of the HTTP/2 protocol, the feature that attackers exploited to generate the massive Rapid Reset attacks, and the mitigation strategies we took to ensure all our customers are protected ","PublishedAt":"2023-10-10 12:02:28+00:00","OriginURL":"https://staging.blog.mrk.cfdata.org/technical-breakdown-http2-rapid-reset-ddos-attack","SourceName":"Cloudflare"}},{"node":{"ID":4774,"Title":"HTTP/2 Zero-Day Vulnerability Results in Record-Breaking DDoS Attacks","Description":"The “HTTP/2 Rapid Reset” attack exploits a weakness in the HTTP/2 protocol to generate enormous, hyper-volumetric DDoS attacks. Cloudflare has mitigated a barrage of these attacks in recent months, including an attack three times larger than any previous attack we’ve observed","PublishedAt":"2023-10-10 12:02:09+00:00","OriginURL":"http://blog.cloudflare.com/zero-day-rapid-reset-http2-record-breaking-ddos-attack/","SourceName":"Cloudflare"}},{"node":{"ID":5287,"Title":"HTTP/2 Zero-Day vulnerability results in record-breaking DDoS attacks","Description":" The “HTTP/2 Rapid Reset” attack exploits a weakness in the HTTP/2 protocol to generate enormous, hyper-volumetric DDoS attacks. Cloudflare has mitigated a barrage of these attacks in recent months, including an attack three times larger than any previous attack we’ve observed ","PublishedAt":"2023-10-10 12:02:09+00:00","OriginURL":"https://blog.cloudflare.com/zero-day-rapid-reset-http2-record-breaking-ddos-attack","SourceName":"Cloudflare"}},{"node":{"ID":5389,"Title":"HTTP/2 Zero-Day vulnerability results in record-breaking DDoS attacks","Description":" The “HTTP/2 Rapid Reset” attack exploits a weakness in the HTTP/2 protocol to generate enormous, hyper-volumetric DDoS attacks. Cloudflare has mitigated a barrage of these attacks in recent months, including an attack three times larger than any previous attack we’ve observed ","PublishedAt":"2023-10-10 12:02:09+00:00","OriginURL":"https://staging.blog.mrk.cfdata.org/zero-day-rapid-reset-http2-record-breaking-ddos-attack","SourceName":"Cloudflare"}},{"node":{"ID":4825,"Title":" HTTP/2 Rapid Reset：記録的勢いの攻撃を無効化 ","Description":" この投稿では、HTTP/2プロトコルの詳細、攻撃者がこれらの大規模な攻撃を発生させるために悪用した機能、およびすべてのお客様が保護されていることを保証するために当社が講じた緩和策について詳細を掘り下げて紹介します ","PublishedAt":"2023-10-10 12:02:00+00:00","OriginURL":"http://blog.cloudflare.com/ja-jp/technical-breakdown-http2-rapid-reset-ddos-attack-ja-jp/","SourceName":"Cloudflare"}},{"node":{"ID":4826,"Title":" HTTP/2 Rapid Reset : anatomie de l&#x27;attaque record ","Description":" Cet article s'intéressera en profondeur aux détails du protocole HTTP/2, la fonctionnalité exploitée par les acteurs malveillants pour générer ces attaques d'envergure, ainsi qu'aux stratégies d'atténuation que nous avons appliquées pour nous assurer que tous nos clients sont protégés ","PublishedAt":"2023-10-10 12:02:00+00:00","OriginURL":"http://blog.cloudflare.com/fr-fr/technical-breakdown-http2-rapid-reset-ddos-attack-fr-fr/","SourceName":"Cloudflare"}},{"node":{"ID":4827,"Title":" HTTP/2 Rapid Reset: cómo desarmamos el ataque sin precedentes ","Description":" Este artículo analiza los detalles del protocolo HTTP/2, la función que explotaron los atacantes para generar estos ataques masivos, y las estrategias de mitigación que adoptamos para garantizar la protección de todos nuestros clientes ","PublishedAt":"2023-10-10 12:02:00+00:00","OriginURL":"http://blog.cloudflare.com/es-es/technical-breakdown-http2-rapid-reset-ddos-attack-es-es/","SourceName":"Cloudflare"}},{"node":{"ID":4828,"Title":" Alle Einzelheiten über HTTP/2 Rapid Reset ","Description":" Dieser Beitrag befasst sich mit allen Einzelheiten zum HTTP/2-Protokoll, der Funktion, die Angreifer ausnutzen, um diese massiven Angriffe zu generieren, und den Abwehrstrategien, die wir ergriffen haben, um sicherzustellen, dass alle unsere Kunden geschützt sind ","PublishedAt":"2023-10-10 12:02:00+00:00","OriginURL":"http://blog.cloudflare.com/de-de/technical-breakdown-http2-rapid-reset-ddos-attack-de-de/","SourceName":"Cloudflare"}},{"node":{"ID":4829,"Title":" HTTP/2 Rapid Reset：解构这场破纪录的攻击 ","Description":" 这篇文章深入探讨了 HTTP/2 协议的详细信息、攻击者利用来实施这些大规模攻击的功能，以及我们为确保所有客户受到保护而采取的缓解策略 ","PublishedAt":"2023-10-10 12:02:00+00:00","OriginURL":"http://blog.cloudflare.com/zh-cn/technical-breakdown-http2-rapid-reset-ddos-attack-zh-cn/","SourceName":"Cloudflare"}},{"node":{"ID":4830,"Title":" HTTP/2 Rapid Reset：解構破紀錄的攻擊 ","Description":" 本文將深入探討 HTTP/2 通訊協定、攻擊者用於發動這些大規模攻擊的功能，以及我們為確保所有客戶均受到保護而採取的緩解策略 ","PublishedAt":"2023-10-10 12:02:00+00:00","OriginURL":"http://blog.cloudflare.com/zh-tw/technical-breakdown-http2-rapid-reset-ddos-attack-zh-tw/","SourceName":"Cloudflare"}},{"node":{"ID":4831,"Title":" HTTP/2 Rapid Reset: 기록적인 공격의 분석 ","Description":" 이 포스팅에서는 HTTP/2 프로토콜의 세부 사항, 즉 공격자가 대규모 공격을 만들어내는 데 악용한 주요 기능과 모든 고객을 보호하기 위해 Couldfare가 채택한 완화 전략을 상세히 살펴봅니다 ","PublishedAt":"2023-10-10 12:02:00+00:00","OriginURL":"http://blog.cloudflare.com/ko-kr/technical-breakdown-http2-rapid-reset-ddos-attack-ko-kr/","SourceName":"Cloudflare"}},{"node":{"ID":4832,"Title":" Resultados de la vulnerabilidad HTTP/2 Zero-Day en ataques DDoS sin precedentes ","Description":" El ataque “HTTP/2 Rapid Reset” aprovecha un punto débil en el protocolo HTTP/2 para generar enormes ataques DDoS hipervolumétricos. Cloudflare ha mitigado un aluvión de estos ataques en los últimos meses, incluso uno tres veces más grande que cualquier ataque anterior que hayamos observado ","PublishedAt":"2023-10-10 12:02:00+00:00","OriginURL":"http://blog.cloudflare.com/es-es/zero-day-rapid-reset-http2-record-breaking-ddos-attack-es-es/","SourceName":"Cloudflare"}},{"node":{"ID":4833,"Title":" HTTP/2 Zero-Day-Sicherheitslücke führt zu rekordverdächtigen DDoS-Angriffen ","Description":" Der „HTTP/2 Rapid Reset“-Angriff nutzt eine Schwachstelle im HTTP/2-Protokoll aus, um gewaltige, hypervolumetrische DDoS-Angriffe zu generieren. Cloudflare hat in den letzten Monaten eine Flut dieser Angriffe abgewehrt, darunter einen Angriff, der dreimal so groß war wie der bislang größte Angriff ","PublishedAt":"2023-10-10 12:02:00+00:00","OriginURL":"http://blog.cloudflare.com/de-de/zero-day-rapid-reset-http2-record-breaking-ddos-attack-de-de/","SourceName":"Cloudflare"}}]}},"pageContext":{"limit":30,"skip":810,"numPages":193,"currentPage":28}},"staticQueryHashes":["3649515864"]}