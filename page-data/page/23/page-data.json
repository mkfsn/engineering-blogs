{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/23","result":{"data":{"allPost":{"edges":[{"node":{"ID":4950,"Title":"How to get the most from your Elastic Cloud trial","Description":"","PublishedAt":"2023-11-02 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/how-to-get-the-most-from-your-elastic-cloud-trial","SourceName":"Elastic"}},{"node":{"ID":4988,"Title":"From GIFs To Git: Learning to Code & Debugging Self Doubt","Description":"Jake Martella tells us how he, as a non-engineer, created an internal tool now used by Staff at GIPHY, including himself.","PublishedAt":"2023-11-01 19:36:34+00:00","OriginURL":"https://engineering.giphy.com/from-gifs-to-git-learning-to-code-debugging-self-doubt/","SourceName":"GIPHY"}},{"node":{"ID":4946,"Title":"Nomad 1.7 beta improves Vault and Consul integrations, adds NUMA support","Description":"HashiCorp Nomad 1.7 — now in beta — introduces improved workload identity, improved Vault and Consul integrations, NUMA support, Nomad actions, and more.","PublishedAt":"2023-11-01 18:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/nomad-1-7-improves-vault-and-consul-integrations-adds-numa-support","SourceName":"HashiCorp"}},{"node":{"ID":4947,"Title":"Consul tips and tricks for cloud transformation at HashiConf 2023","Description":"Watch our key Consul networking sessions from HashiConf 2023 and give us your feedback on the talks and the future direction of Consul.","PublishedAt":"2023-11-01 17:30:00+00:00","OriginURL":"https://www.hashicorp.com/blog/consul-tips-and-tricks-for-cloud-transformation-at-hashiconf-2023","SourceName":"HashiCorp"}},{"node":{"ID":4944,"Title":" Cloudflare incident on October 30, 2023 ","Description":" Multiple Cloudflare services were unavailable for 37 minutes on October 30, 2023, due to the misconfiguration of a deployment tool used by Workers KV. ","PublishedAt":"2023-11-01 16:39:43+00:00","OriginURL":"http://blog.cloudflare.com/cloudflare-incident-on-october-30-2023/","SourceName":"Cloudflare"}},{"node":{"ID":5271,"Title":"Cloudflare incident on October 30, 2023","Description":" Multiple Cloudflare services were unavailable for 37 minutes on October 30, 2023, due to the misconfiguration of a deployment tool used by Workers KV. ","PublishedAt":"2023-11-01 16:39:43+00:00","OriginURL":"https://blog.cloudflare.com/cloudflare-incident-on-october-30-2023","SourceName":"Cloudflare"}},{"node":{"ID":5371,"Title":"Cloudflare incident on October 30, 2023","Description":" Multiple Cloudflare services were unavailable for 37 minutes on October 30, 2023, due to the misconfiguration of a deployment tool used by Workers KV. ","PublishedAt":"2023-11-01 16:39:43+00:00","OriginURL":"https://staging.blog.mrk.cfdata.org/cloudflare-incident-on-october-30-2023","SourceName":"Cloudflare"}},{"node":{"ID":4943,"Title":"Harness the Power of Pinecone with Cloudera’s New Applied Machine Learning Prototype","Description":"<p>An LLM chatbot customized with real-time website data  embedding updates to the Pinecone vector database</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/harness-the-power-of-pinecone-with-clouderas-new-applied-machine-learning-prototype/\">Harness the Power of Pinecone with Cloudera’s New Applied Machine Learning Prototype</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2023-11-01 15:14:33+00:00","OriginURL":"https://blog.cloudera.com/harness-the-power-of-pinecone-with-clouderas-new-applied-machine-learning-prototype/","SourceName":"Cloudera"}},{"node":{"ID":5030,"Title":"AI is only as good as the data: Q&A with Satish Jayanthi of Coalesce","Description":"AI systems obey the golden rule: garbage in, garbage out, Want good results, feed it good data.","PublishedAt":"2023-11-01 14:44:06+00:00","OriginURL":"https://stackoverflow.blog/2023/11/01/ai-is-only-as-good-as-the-data-q-and-a-with-satish-jayanthi-of-coalesce/","SourceName":"Stack Overflow"}},{"node":{"ID":5031,"Title":"November 2023 Update: What’s new in Collectives™ on Stack Overflow?","Description":"Check out some of the new features and updates we’ve recently added on collectives.","PublishedAt":"2023-11-01 14:16:22+00:00","OriginURL":"https://stackoverflow.blog/2023/11/01/november-2023-update-what-s-new-in-collectives-tm-on-stack-overflow/","SourceName":"Stack Overflow"}},{"node":{"ID":4981,"Title":"Building Our New Personalized AI-Powered Premium Experience","Description":"(This article originally appeared on LinkedIn) Advancements in AI are already starting to transform jobs, skills, and career paths, and we know that our members and customers are thinking about the implications for this new world of work. That’s why I’m excited to share that we’re rolling out a new AI-powered LinkedIn Premium experience, starting with a selected group of US based Premium subscribers today. These members will see AI-powered takeaways on the platform to help them unlock hidden opportunities, from how to get more knowledgeable about important topics, to what actions to [&#8230;]","PublishedAt":"2023-11-01 10:00:00+00:00","OriginURL":"https://engineering.linkedin.com/blog/2023/building-our-new-personalized-ai-powered-premium-experience","SourceName":"Linkedin"}},{"node":{"ID":4942,"Title":"Announcing Amazon EC2 Capacity Blocks for ML to reserve GPU capacity for your machine learning workloads","Description":"Recent advancements in machine learning (ML) have unlocked opportunities for customers across organizations of all sizes and industries to reinvent new products and transform their businesses. However, the growth in demand for GPU capacity to train, fine-tune, experiment, and inference these ML models has outpaced industry-wide supply, making GPUs a scarce resource. Access to GPU […]","PublishedAt":"2023-10-31 23:02:38+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/announcing-amazon-ec2-capacity-blocks-for-ml-to-reserve-gpu-capacity-for-your-machine-learning-workloads/","SourceName":"AWS"}},{"node":{"ID":4940,"Title":"Build Modern Innovative Solutions on Cloudera Data Platform Using the Power of Generative AI with Amazon Bedrock","Description":"<p>Enterprises see embracing AI as a strategic imperative that will enable them to stay relevant in increasingly competitive markets. However, it remains difficult to quickly build these capabilities given the challenges with finding readily available talent and resources to get started rapidly on the AI journey. Cloudera recently signed a strategic collaboration agreement with Amazon [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/build-modern-innovative-solutions-on-cloudera-data-platform-using-the-power-of-generative-ai-with-amazon-bedrock/\">Build Modern Innovative Solutions on Cloudera Data Platform Using the Power of Generative AI with Amazon Bedrock</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2023-10-31 22:23:54+00:00","OriginURL":"https://blog.cloudera.com/build-modern-innovative-solutions-on-cloudera-data-platform-using-the-power-of-generative-ai-with-amazon-bedrock/","SourceName":"Cloudera"}},{"node":{"ID":4941,"Title":"The Ultimate Map to finding Halloween Candy Surplus","Description":"<p>As Halloween night quickly approaches, there is only one question on every kid’s mind: how can I maximize my candy haul this year with the best possible candy? This kind of question lends itself perfectly to data science approaches that enable quick and intuitive analysis of data across multiple sources. Using Cloudera Machine Learning, the [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/the-ultimate-map-to-finding-halloween-candy-surplus-2/\">The Ultimate Map to finding Halloween Candy Surplus</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2023-10-31 22:15:10+00:00","OriginURL":"https://blog.cloudera.com/the-ultimate-map-to-finding-halloween-candy-surplus-2/","SourceName":"Cloudera"}},{"node":{"ID":4995,"Title":"PinCompute: A Kubernetes Backed General Purpose Compute Platform for Pinterest","Description":"","PublishedAt":"2023-10-31 21:33:54+00:00","OriginURL":"https://medium.com/pinterest-engineering/pincompute-a-kubernetes-backed-general-purpose-compute-platform-for-pinterest-8ad408df2d6f?source=rss----4c5a5f6279b6---4","SourceName":"Pinterest"}},{"node":{"ID":4949,"Title":"Blog: Gateway API v1.0: GA Release","Description":"<p><strong>Authors:</strong> Shane Utt (Kong), Nick Young (Isovalent), Rob Scott (Google)</p>\n<p>On behalf of Kubernetes SIG Network, we are pleased to announce the v1.0 release of <a href=\"https://gateway-api.sigs.k8s.io/\">Gateway\nAPI</a>! This release marks a huge milestone for\nthis project. Several key APIs are graduating to GA (generally available), while\nother significant features have been added to the Experimental channel.</p>\n<h2 id=\"what-s-new\">What's new</h2>\n<h3 id=\"graduation-to-v1\">Graduation to v1</h3>\n<p>This release includes the graduation of\n<a href=\"https://gateway-api.sigs.k8s.io/api-types/gateway/\">Gateway</a>,\n<a href=\"https://gateway-api.sigs.k8s.io/api-types/gatewayclass/\">GatewayClass</a>, and\n<a href=\"https://gateway-api.sigs.k8s.io/api-types/httproute/\">HTTPRoute</a> to v1, which\nmeans they are now generally available (GA). This API version denotes a high\nlevel of confidence in the API surface and provides guarantees of backwards\ncompatibility. Note that although, the version of these APIs included in the\nStandard channel are now considered stable, that does not mean that they are\ncomplete. These APIs will continue to receive new features via the Experimental\nchannel as they meet graduation criteria. For more information on how all of\nthis works, refer to the <a href=\"https://gateway-api.sigs.k8s.io/concepts/versioning/\">Gateway API Versioning\nPolicy</a>.</p>\n<h3 id=\"logo\">Logo</h3>\n<p>Gateway API now has a logo! This logo was designed through a collaborative\nprocess, and is intended to represent the idea that this is a set of Kubernetes\nAPIs for routing traffic both north-south and east-west:</p>\n<p><img src=\"gateway-api-logo.png\" alt=\"Gateway API Logo\" title=\"Gateway API Logo\"></p>\n<h3 id=\"cel-validation\">CEL Validation</h3>\n<p>Historically, Gateway API has bundled a validating webhook as part of installing\nthe API. Starting in v1.0, webhook installation is optional and only recommended\nfor Kubernetes 1.24. Gateway API now includes\n<a href=\"https://kubernetes.io/docs/reference/using-api/cel/\">CEL</a> validation rules as\npart of the\n<a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\">CRDs</a>.\nThis new form of validation is supported in Kubernetes 1.25+, and thus the\nvalidating webhook is no longer required in most installations.</p>\n<h3 id=\"standard-channel\">Standard channel</h3>\n<p>This release was primarily focused on ensuring that the existing beta APIs were\nwell defined and sufficiently stable to graduate to GA. That led to a variety of\nspec clarifications, as well as some improvements to status to improve the\noverall UX when interacting with Gateway API.</p>\n<h3 id=\"experimental-channel\">Experimental channel</h3>\n<p>Most of the changes included in this release were limited to the experimental\nchannel. These include HTTPRoute timeouts, TLS config from Gateways to backends,\nWebSocket support, Gateway infrastructure labels, and more. Stay tuned for a\nfollow up blog post that will cover each of these new features in detail.</p>\n<h3 id=\"everything-else\">Everything else</h3>\n<p>For a full list of the changes included in this release, please refer to the\n<a href=\"https://github.com/kubernetes-sigs/gateway-api/releases/tag/v1.0.0\">v1.0.0 release\nnotes</a>.</p>\n<h2 id=\"how-we-got-here\">How we got here</h2>\n<p>The idea of Gateway API was initially <a href=\"https://youtu.be/Ne9UJL6irXY?si=wgtC9w8PMB5ZHil2\">proposed</a>\n4 years ago at KubeCon San Diego as the next generation\nof Ingress API. Since then, an incredible community has formed to develop what\nhas likely become the most collaborative API in Kubernetes history. Over 170\npeople have contributed to this API so far, and that number continues to grow.</p>\n<p>A special thank you to the 20+ <a href=\"https://github.com/kubernetes-sigs/gateway-api/blob/main/OWNERS_ALIASES\">community members who agreed to take on an\nofficial role in the\nproject</a>,\nproviding some time for reviews and sharing the load of maintaining the project!</p>\n<p>We especially want to highlight the emeritus maintainers that played a pivotal\nrole in the early development of this project:</p>\n<ul>\n<li><a href=\"https://github.com/bowei\">Bowei Du</a></li>\n<li><a href=\"https://github.com/danehans\">Daneyon Hansen</a></li>\n<li><a href=\"https://github.com/hbagdi\">Harry Bagdi</a></li>\n</ul>\n<h2 id=\"try-it-out\">Try it out</h2>\n<p>Unlike other Kubernetes APIs, you don't need to upgrade to the latest version of\nKubernetes to get the latest version of Gateway API. As long as you're running\none of the 5 most recent minor versions of Kubernetes (1.24+), you'll be able to\nget up and running with the latest version of Gateway API.</p>\n<p>To try out the API, follow our <a href=\"https://gateway-api.sigs.k8s.io/guides/\">Getting Started\nguide</a>.</p>\n<h2 id=\"what-s-next\">What's next</h2>\n<p>This release is just the beginning of a much larger journey for Gateway API, and\nthere are still plenty of new features and new ideas in flight for future\nreleases of the API.</p>\n<p>One of our key goals going forward is to work to stabilize and graduate other\nexperimental features of the API. These include <a href=\"https://gateway-api.sigs.k8s.io/concepts/gamma/\">support for service\nmesh</a>, additional route types\n(<a href=\"https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.GRPCRoute\">GRPCRoute</a>,\n<a href=\"https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.TCPRoute\">TCPRoute</a>,\n<a href=\"https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.TLSRoute\">TLSRoute</a>,\n<a href=\"https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1alpha2.UDPRoute\">UDPRoute</a>),\nand a variety of experimental features.</p>\n<p>We've also been working towards moving\n<a href=\"https://gateway-api.sigs.k8s.io/api-types/referencegrant/\">ReferenceGrant</a> into\na built-in Kubernetes API that can be used for more than just Gateway API.\nWithin Gateway API, we've used this resource to safely enable cross-namespace\nreferences, and that concept is now being adopted by other SIGs. The new version\nof this API will be owned by SIG Auth and will likely include at least some\nmodifications as it migrates to a built-in Kubernetes API.</p>\n<h3 id=\"gateway-api-at-kubecon-cloudnativecon\">Gateway API at KubeCon + CloudNativeCon</h3>\n<p>At <a href=\"https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/\">KubeCon North America\n(Chicago)</a>\nand the adjacent <a href=\"https://www.kubernetes.dev/events/2023/kcsna/\">Contributor\nSummit</a> there are several talks\nrelated to Gateway API that will go into more detail on these topics. If you're\nattending either of these events this year, considering adding these to your\nschedule.</p>\n<p><strong>Contributor Summit:</strong></p>\n<ul>\n<li><a href=\"https://sched.co/1Sp9u\">Lessons Learned Building a GA API with CRDs</a></li>\n<li><a href=\"https://sched.co/1Sp9l\">Conformance Profiles: Building a generic conformance test reporting framework</a></li>\n<li><a href=\"https://sched.co/1SpA9\">Gateway API: Beyond GA</a></li>\n</ul>\n<p><strong>KubeCon Main Event:</strong></p>\n<ul>\n<li><a href=\"https://sched.co/1R2qM\">Gateway API: The Most Collaborative API in Kubernetes History Is GA</a></li>\n</ul>\n<p><strong>KubeCon Office Hours:</strong></p>\n<p>Gateway API maintainers will be holding office hours sessions at KubeCon if\nyou'd like to discuss or brainstorm any related topics. To get the latest\nupdates on these sessions, join the <code>#sig-network-gateway-api</code> channel on\n<a href=\"https://slack.kubernetes.io/\">Kubernetes Slack</a>.</p>\n<h2 id=\"get-involved\">Get involved</h2>\n<p>We've only barely scratched the surface of what's in flight with Gateway API.\nThere are lots of opportunities to get involved and help define the future of\nKubernetes routing APIs for both Ingress and Mesh.</p>\n<p>If this is interesting to you, please <a href=\"https://gateway-api.sigs.k8s.io/contributing/\">join us in the\ncommunity</a> and help us build the\nfuture of Gateway API together!</p>","PublishedAt":"2023-10-31 18:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2023/10/31/gateway-api-ga/","SourceName":"Kubernetes"}},{"node":{"ID":4939,"Title":"Automating data removal","Description":"<p>Meta’s Systematic Code and Asset Removal Framework (SCARF) has a subsystem for identifying and removing unused data types. SCARF scans production data systems to identify tables or assets that are unused and safely removes them. SCARF avoids tedious manual work and ensures that product data is correctly removed when a product is shut down. This [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2023/10/31/data-infrastructure/automating-data-removal/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2023/10/31/data-infrastructure/automating-data-removal/\">Automating data removal</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n","PublishedAt":"2023-10-31 16:00:29+00:00","OriginURL":"https://engineering.fb.com/2023/10/31/data-infrastructure/automating-data-removal/","SourceName":"Facebook"}},{"node":{"ID":4945,"Title":" Introducing notifications for HTTP Traffic Anomalies ","Description":" Today we're excited to announce Traffic Anomalies notifications, which proactively alert you when your Internet property is seeing an unexpected change in traffic patterns ","PublishedAt":"2023-10-31 13:01:11+00:00","OriginURL":"http://blog.cloudflare.com/introducing-http-traffic-anomalies-notifications/","SourceName":"Cloudflare"}},{"node":{"ID":5272,"Title":"Introducing notifications for HTTP Traffic Anomalies","Description":" Today we're excited to announce Traffic Anomalies notifications, which proactively alert you when your Internet property is seeing an unexpected change in traffic patterns ","PublishedAt":"2023-10-31 13:01:11+00:00","OriginURL":"https://blog.cloudflare.com/introducing-http-traffic-anomalies-notifications","SourceName":"Cloudflare"}},{"node":{"ID":5372,"Title":"Introducing notifications for HTTP Traffic Anomalies","Description":" Today we're excited to announce Traffic Anomalies notifications, which proactively alert you when your Internet property is seeing an unexpected change in traffic patterns ","PublishedAt":"2023-10-31 13:01:11+00:00","OriginURL":"https://staging.blog.mrk.cfdata.org/introducing-http-traffic-anomalies-notifications","SourceName":"Cloudflare"}},{"node":{"ID":5032,"Title":"Why Stack Overflow is embracing Svelte","Description":"Giamir Buoncristiani, tech lead for the Stacks design system at Stack Overflow, joins Ryan for a conversation about all things front end, including how he joined Stack with a mandate to modernize the front-end user interface and why Stack Overflow developers are such big fans of Svelte.","PublishedAt":"2023-10-31 07:40:00+00:00","OriginURL":"https://stackoverflow.blog/2023/10/31/why-stack-overflow-is-embracing-svelte/","SourceName":"Stack Overflow"}},{"node":{"ID":4936,"Title":"Unpacking the new US executive order on artificial intelligence","Description":"","PublishedAt":"2023-10-31 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/us-executive-order-artificial-intelligence","SourceName":"Elastic"}},{"node":{"ID":4934,"Title":"Router 2.0: The Road to Beta","Description":"<p>Last month, Heroku announced the <a href=\"https://devcenter.heroku.com/changelog-items/2682\">beta release of Router 2.0</a>, the new Common Runtime router! </p>\n\n<p>As part of our commitment to infrastructure modernization, Heroku is making upgrades to the <a href=\"https://devcenter.heroku.com/articles/dyno-runtime#common-runtime\">Common Runtime</a> routing layer. The <a href=\"https://devcenter.heroku.com/changelog-items/2682\">beta release of Router 2.0</a> is an important step along this journey. We’re excited to give you an inside look at all we’ve been doing to get here. </p>\n\n<p>In both the Common Runtime and <a href=\"https://devcenter.heroku.com/articles/dyno-runtime#private-spaces-runtime\">Private Spaces</a>, the <a href=\"https://devcenter.heroku.com/articles/how-heroku-works#http-routing\">Heroku router</a> is responsible for serving requests to customers’ web dynos. In 2024, Router 2.0 will replace the existing Common Runtime router. We’re being transparent about this project so that you, our customers, are motivated to try out Router 2.0 now, while it’s in beta. As an early adopter, you can help us validate that things are working as they should, particularly for <em>your</em> apps and <em>your</em> use cases. You’ll also be first in line to try out the new features we’re planning to add, like <a href=\"https://github.com/heroku/roadmap/issues/34\">HTTP/2</a>.</p>\n<h2 class=\"anchored\">\n  <a name=\"why-a-new-router\" href=\"#why-a-new-router\">Why a New Router?</a>\n</h2>\n\n<p>Now, you may be asking, why build a new router instead of improving the existing one? Our primary motivator has been faster and safer delivery of new routing features for our customers. For a couple of reasons, this has been difficult to achieve with the Common Runtime’s legacy routing layer.</p>\n\n<p>The current Common Runtime router is written in Erlang. It’s built around a <a href=\"https://blog.heroku.com/vegur-free-software\">custom HTTP server library</a> that supports Heroku-specific features, such as <a href=\"https://devcenter.heroku.com/articles/error-codes\">H-codes</a>, <a href=\"https://devcenter.heroku.com/articles/eco-dyno-hours#dyno-sleeping\">dyno sleeping</a>, and <a href=\"https://devcenter.heroku.com/articles/http-routing#heroku-router-log-format\">router logs</a>. For over 10 years, this router, dubbed “Hermes” internally, has served all requests to Heroku’s Common Runtime. At the time of Hermes’ launch, Erlang was an appropriate choice since the language places emphasis on concurrency, scalability, and fault tolerance. In addition, Erlang offers a powerful process introspection toolchain that has served our networking engineers well when <a href=\"https://blog.heroku.com/erlang-in-anger\">debugging in-memory state issues</a>. Our engineers embraced the language fully, also choosing to write the previous version of our logging system, <a href=\"https://blog.heroku.com/logging-on-heroku\">Logplex</a>, in Erlang. </p>\n\n<p>However, as the years passed, development on the Hermes codebase proved difficult. The popularity of Erlang within Heroku began to taper off. The open-source and internal libraries that Hermes depends on stopped receiving the volume of contributions they once had. Productivity declined due to these factors, making significant router upgrades risky. After a few failed upgrade attempts, our team decided to pin the software versions of relevant Erlang components. This action wasn’t without trade-offs. Being pinned to an old version of Erlang became a blocker to delivering now common-place features like <a href=\"https://github.com/heroku/roadmap/issues/34\">HTTP/2</a>. Thus, we decided to put Hermes into maintenance mode and focus on its replacement.</p>\n<h2 class=\"anchored\">\n  <a name=\"choosing-a-language\" href=\"#choosing-a-language\">Choosing a Language</a>\n</h2>\n\n<p>Before kicking off design sessions, our team discussed what broader goals we had for the replacement. In establishing our priorities, the team came to a consensus around three main goals:</p>\n\n<ul>\n<li>\n<strong>Write the router in a language everyone on our team knows well</strong>. With Erlang knowledge limited to just a couple of engineers on the team, we wanted to rewrite the router in a different language. That language had to be something our team already knew well.</li>\n<li>\n<strong>Write the router in a language with a strong open-source community.</strong> A robust community unlocks the ability to quickly adopt new specs, write features, fix bugs, and respond to CVEs. It also expands the candidate pool when it comes time to hire new engineers.</li>\n<li>\n<strong>Share as much code as possible between the Common Runtime and Private Spaces routers.</strong> Since the Common Runtime and Private Spaces routers share most of the same features, there’s no reason for the codebases to differ much. Additionally, it’s faster and easier to deliver a feature if we only have to write it once.</li>\n</ul>\n\n<p>With these goals in mind, the language to choose for Router 2.0 was clear — Go.</p>\n\n<p>Not only is the Private Spaces router already written in Go, but the language has become our standard choice for developing new components of Heroku’s runtime. This story isn’t at all unique. Many others in the DevOps and cloud hosting world today have chosen Go for its performance, built-in concurrency handling, automatic garbage collection — the list goes on. Simply put, it’s a language designed specifically for building big dynamic distributed systems. Because of these factors, the Go community outside and within Heroku has flourished, with Go expertise in abundance across our runtime engineering teams.</p>\n\n<p>Today, by writing Router 2.0 in Go, we’re creating a piece of software to which everyone on our team can contribute. Furthermore, by doubling down on the language of the Private Spaces router, we unify the source code and routing behavior of these two products. Historically, these codebases have been entirely distinct, meaning that any implementation our engineers introduce must be written twice. To combat this, we’ve extracted the common functionality of the two routers into an internal HTTP library. With a unified codebase, the delivery of features and fixes becomes faster and simpler, reducing the cognitive burden on our engineers who operate and maintain the routers.</p>\n\n<p>Developing the router is only half the story, though. The other half is about introducing this service to the world as safely and seamlessly as possible.</p>\n<h2 class=\"anchored\">\n  <a name=\"architecture\" href=\"#architecture\">Architecture</a>\n</h2>\n\n<p>You may recall that back in 2021, Heroku announced the completion of an <a href=\"https://blog.heroku.com/faster-dynos-for-all\">infrastructure upgrade</a> to the Common Runtime that brought customers better performing dynos and lower request latencies. This upgrade involved an extensive migration from our old, “classic” cloud environment to our more performant and secure “sharded” environment. We wanted to complete this migration without disrupting any active traffic or asking customers to change their DNS setups. To do this, our engineers put an <a href=\"https://www.geeksforgeeks.org/open-systems-interconnection-model-osi/\">L4</a> reverse proxy in front of Hermes, straddling the classic and sharded environments. The idea was to slowly shift traffic over to the sharded environments, with the L4 proxy splitting connections to both the classic and the new “in-shard” Hermes instances.</p>\n\n<p>Also a part of this migration, TLS termination on custom domains was transitioned from Hermes to the L4 proxy.</p>\n\n<p><img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1698271166-IMG_2180.jpeg\" alt=\"IMG_2180\">\nThis L4 proxy is the component that has formed the basis for Router 2.0. Over the past year, our networking team has been developing an L7 router to sit in-memory behind the L4 proxy. Today, the L4 proxy + Router 2.0 process runs alongside Hermes, communicating over the <code>localhost</code> network on our router instances. Putting these two processes side by side, instead of on separate hosts, means we limit the number of network hops between clients and backend dynos.</p>\n<h3 class=\"anchored\">\n  <a name=\"the-strangler-pattern\" href=\"#the-strangler-pattern\">The Strangler Pattern</a>\n</h3>\n\n<p>For apps still on the default routing path, client connections are established with the L4 proxy, which directs traffic through Hermes.\n<img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1698271115-IMG_2488.jpeg\" alt=\"IMG_2488\">\nWhen an <a href=\"https://devcenter.heroku.com/articles/heroku-runtime-router-2-0#enable-router-2-0\">app has Router 2.0 enabled</a>, the L4 proxy instead funnels traffic over an in-memory listener to Router 2.0, then out to the app’s web dynos. Hermes is cut out of the network path.\n<img src=\"https://heroku-blog-files.s3.amazonaws.com/posts/1698339992-IMG_5679.jpeg\" alt=\"IMG_5679\">\nThis sort of architecture has a particular name — the “<a href=\"https://www.redhat.com/architect/pros-and-cons-strangler-architecture-pattern\">Strangler pattern</a>” — and it involves inserting a form of middleman between clients and the old system you want to replace. The middleman directs traffic, dividing it between the old system and a new system that is built out incrementally. The major advantage of such a setup is that “big bang” changes or “all-at-once” cut-overs are completely avoided. However, both the old and the new systems live on the same production hot path while the development of the new system is in progress. What has this meant for Router 2.0? Well, we had to lay a complete production-ready foundation early on.</p>\n<h2 class=\"anchored\">\n  <a name=\"living-on-the-hot-path\" href=\"#living-on-the-hot-path\">Living on the Hot Path</a>\n</h2>\n\n<p>Heroku has always been an opinionated hosting and deployment platform that caters to general use cases. In our products, we optimize for stability while delivering innovation. Within the framing of Router 2.0, this commitment to stability meant we had to do a few things <em>before</em> releasing beta.</p>\n<h3 class=\"anchored\">\n  <a name=\"automate-router-deployments\" href=\"#automate-router-deployments\">Automate Router Deployments</a>\n</h3>\n\n<p>Up until recently, deploying Router 2.0 meant creating a new release and manually triggering router fleet cycles across all our production clouds. This process wasn’t only tedious and time-consuming, but it was also really error prone. We fixed this by building out an automation pipeline, outfitted with gates on availability metrics, performance metrics, and smoke tests. Anytime a router release fails on just one of these health indicators, it doesn’t advance to the next stage of deployment.</p>\n<h3 class=\"anchored\">\n  <a name=\"load-test-continuously\" href=\"#load-test-continuously\">Load Test Continuously</a>\n</h3>\n\n<p>An important aspect of vetting the new sharded environments in 2021 was load testing the L4 proxy/Hermes combo. At the time, this was a significant manual undertaking. After manually running these tests, it became obvious that we would need a more practical load testing story while developing Router 2.0. In response, we built a load testing system to continuously push our staging routers to their limits and trigger scaling policies, so that we can also validate our autoscaling setup. This framework has been immensely valuable for Router 2.0 development, catching bugs and regressions before they ever hit production. The results of these load tests feed right back into our deployment pipeline, blocking any deploys that don’t live up to our internal service level objectives.</p>\n<h3 class=\"anchored\">\n  <a name=\"introduce-network-error-logging\" href=\"#introduce-network-error-logging\">Introduce Network Error Logging</a>\n</h3>\n\n<p>Traditionally, routing health has been measured through the use of “checkee” apps. These are web-server applications that we deploy across our production Common Runtime clouds and constantly probe from corresponding ”checker“ apps that run in Private Spaces. The checker-checkee duo allows us to mimic and measure our customers’ routing experience. In recent years, the gaps in this model have become more apparent. Namely, our checkees only represent the tiniest fraction of traffic pumping through the router at any given time. In addition, we can’t within our checkers possibly account for all the various client types and configurations that may be used to connect to the platform.</p>\n\n<p>To address the gap, we introduced <a href=\"https://devcenter.heroku.com/changelog-items/2678\">Network Error Logging</a> (NEL) to both Hermes and Router 2.0. It’s an experimental <a href=\"https://www.w3.org/\">W3C</a> standard that enables the measurement of routing layer performance by collecting real-time data about network failures from web browsers. Google Chrome, Microsoft Edge, and certain mobile clients already <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/NEL#browser_compatibility\">support</a> the spec. NEL ensures our engineers maintain a more holistic understanding of the routing experience actually felt by clients.</p>\n<h2 class=\"anchored\">\n  <a name=\"the-future\" href=\"#the-future\">The Future</a>\n</h2>\n\n<p>Completely retiring Hermes will take time. We’re only at the end of the beginning of that journey. As detailed in the <a href=\"https://devcenter.heroku.com/articles/heroku-runtime-router-2-0\">Dev Center article</a>, Router 2.0 isn’t complete yet because it doesn’t support the full list of features on our <a href=\"https://devcenter.heroku.com/articles/http-routing\">HTTP Routing</a> page. We’re working on it. We’ll soon be adding <a href=\"https://github.com/heroku/roadmap/issues/34\">HTTP/2 support</a>, one of the most requested features, to both the Common Runtime and Private Spaces. However, in the Common Runtime, HTTP/2 will only be available when your app is using Router 2.0.</p>\n\n<p>Our aim is to achieve feature parity with Hermes, plus a little more, over the next few months. Once we’re there, we’ll focus on a migration plan that involves flagging apps into Router 2.0 automatically. Much like in the migration from classic environments to sharded environments, we’ll break the process out into phases based on small batches of apps in similar <a href=\"https://devcenter.heroku.com/articles/dyno-types#dyno-tiers-and-mixing-dyno-types\">dyno tiers</a>. This approach gives us time to pause between phases and assess the performance of the new system.</p>\n<h2 class=\"anchored\">\n  <a name=\"participating\" href=\"#participating\">Participating</a>\n</h2>\n\n<p>We hope that you, our customers, can help us validate the new router well before it becomes the default. You can enable Router 2.0 for a Common Runtime app, by running:</p>\n\n<p><code>heroku labs:enable http-routing-2-dot-0 -a &lt;app&gt;</code></p>\n\n<p>If you choose to enroll, you can submit feedback by commenting on the <a href=\"https://github.com/heroku/roadmap/issues/219\">Heroku Public Roadmap item</a> or <a href=\"https://help.heroku.com/tickets/new?id=4\">creating a support ticket</a>.</p>\n<h2 class=\"anchored\">\n  <a name=\"conclusion\" href=\"#conclusion\">Conclusion</a>\n</h2>\n\n<p>Delivering new features to a platform like Heroku is never as simple as flipping an on/off switch. When we deliver something to our customers, there’s always a mountain of behind-the-scenes effort put into it. Simply stated, we write a lot of software to ensure the software that you see works the way it should.</p>\n\n<p>We’re proud of the work we’ve done so far on Router 2.0, and we’re excited for what’s coming next. If you enroll your applications in the beta, keep an eye on the <a href=\"https://devcenter.heroku.com/articles/heroku-runtime-router-2-0\">Router 2.0 Dev Center</a> page and the <a href=\"https://devcenter.heroku.com/changelog\">Heroku Changelog</a>. We’ll be posting updates about new features as they become available.</p>\n\n<p>Thanks for reading and happy coding!</p>","PublishedAt":"2023-10-30 17:00:00+00:00","OriginURL":"https://blog.heroku.com/router-2dot0-the-road-to-beta","SourceName":"Heroku"}},{"node":{"ID":4931,"Title":"The architecture of today&#8217;s LLM applications","Description":"<p>Here’s everything you need to know to build your first LLM app and problem spaces you can start exploring today.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://github.blog/2023-10-30-the-architecture-of-todays-llm-applications/\">The architecture of today&#8217;s LLM applications</a> appeared first on <a rel=\"nofollow\" href=\"https://github.blog\">The GitHub Blog</a>.</p>\n","PublishedAt":"2023-10-30 16:22:59+00:00","OriginURL":"https://github.blog/2023-10-30-the-architecture-of-todays-llm-applications/","SourceName":"GitHub"}},{"node":{"ID":4932,"Title":"AWS Weekly Roundup – re:Post Selections, SNS and SQS FIFO improvements, multi-VPC ENI attachments, and more – October 30, 2023","Description":"It’s less than a month to AWS re:Invent, but interesting news doesn’t slow down in the meantime. This week is my turn to help keep you up to date! Last week’s launches Here are some of the launches that caught my attention last week: AWS re:Post – With re:Post, you have access to a community […]","PublishedAt":"2023-10-30 16:11:12+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/aws-weekly-roundup-repost-selections-sns-and-sqs-fifo-improvements-multi-vpc-eni-attachments-and-more-october-30-2023/","SourceName":"AWS"}},{"node":{"ID":4933,"Title":"Cloud Analytics Powered by FinOps","Description":"<p>Bringing financial accountability to cloud transformation</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/cloud-analytics-powered-by-finops/\">Cloud Analytics Powered by FinOps</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2023-10-30 14:49:17+00:00","OriginURL":"https://blog.cloudera.com/cloud-analytics-powered-by-finops/","SourceName":"Cloudera"}},{"node":{"ID":5033,"Title":"Edge and beyond: How to meet the increasing demand for memory","Description":"The opportunities for edge computing are huge—but so are the memory requirements. ","PublishedAt":"2023-10-30 14:02:00+00:00","OriginURL":"https://stackoverflow.blog/2023/10/30/edge-and-beyond-how-to-meet-the-increasing-demand-for-memory/","SourceName":"Stack Overflow"}},{"node":{"ID":4938,"Title":"How we integrated a code editor on the Miro canvas","Description":"","PublishedAt":"2023-10-30 09:08:23+00:00","OriginURL":"https://medium.com/miro-engineering/how-we-integrated-a-code-editor-on-the-miro-canvas-a41e0eff7f21?source=rss----555f7fd62a50---4","SourceName":"Miro Engineering"}},{"node":{"ID":4935,"Title":"Plan new architectures and track your cloud footprint with Cloudcraft by Datadog","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/cloud-architecture-diagrams-cost-compliance-cloudcraft-datadog/cloudcraft-hero.png\" width=\"100%\"/>In a rapidly expanding, highly distributed cloud infrastructure environment, it can be difficult to make decisions about the design and management of cloud architectures. That’s because it’s hard for a single observer to see the full scope when their organization owns thousands of cloud resources distributed across hundreds of accounts. You need broad, complete visibility in order to find underutilized resources and other forms of bloat. You also need to model your architecture for key processes like compliance audits, cloud cost management, creating onboarding resources, and monitoring infrastructure health.","PublishedAt":"2023-10-30 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/cloud-architecture-diagrams-cost-compliance-cloudcraft-datadog/","SourceName":"Datadog"}},{"node":{"ID":4924,"Title":"Demystifying LLMs: How they can do things they weren&#8217;t trained to do","Description":"<p>Explore how LLMs generate text, why they sometimes hallucinate information, and the ethical implications surrounding their incredible capabilities.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://github.blog/2023-10-27-demystifying-llms-how-they-can-do-things-they-werent-trained-to-do/\">Demystifying LLMs: How they can do things they weren&#8217;t trained to do</a> appeared first on <a rel=\"nofollow\" href=\"https://github.blog\">The GitHub Blog</a>.</p>\n","PublishedAt":"2023-10-27 16:57:09+00:00","OriginURL":"https://github.blog/2023-10-27-demystifying-llms-how-they-can-do-things-they-werent-trained-to-do/","SourceName":"GitHub"}}]}},"pageContext":{"limit":30,"skip":660,"numPages":193,"currentPage":23}},"staticQueryHashes":["3649515864"]}