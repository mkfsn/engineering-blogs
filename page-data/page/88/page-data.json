{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/88","result":{"data":{"allPost":{"edges":[{"node":{"ID":3161,"Title":"Scan and secure Atlassian with Cloudflare CASB","Description":"Cloudflare CASB can now integrate and scan Atlassian products, Confluence and Jira, for critical security issues, like misconfigurations, data exposure, and third-party app risks. Start scanning in just a few clicks!","PublishedAt":"2023-03-14 13:00:00+00:00","OriginURL":"https://blog.cloudflare.com/scan-atlassian-casb/","SourceName":"Cloudflare"}},{"node":{"ID":3162,"Title":"The state of application security in 2023","Description":"One year ago we published our first Application Security Report. For Security Week 2023, we are providing updated insights and trends around mitigated traffic, bot and API traffic, and account takeover attacks.","PublishedAt":"2023-03-14 13:00:00+00:00","OriginURL":"https://blog.cloudflare.com/application-security-2023/","SourceName":"Cloudflare"}},{"node":{"ID":3163,"Title":"Adding Zero Trust signals to Sumo Logic for better security insights","Description":"The Cloudflare App for Sumo Logic now supports Zero Trust logs for out of the box, ready-made security dashboards","PublishedAt":"2023-03-14 13:00:00+00:00","OriginURL":"https://blog.cloudflare.com/zero-trust-signals-to-sumo-logic/","SourceName":"Cloudflare"}},{"node":{"ID":3164,"Title":"Cloudflare One DLP integrates with Microsoft Information Protection labels","Description":"Today, we are excited to announce that Cloudflare One now offers Data Loss Prevention (DLP) detections for Microsoft Purview Information Protection labels. Simply integrate with your Microsoft account, retrieve your labels, and build rules to guide the movement of your labeled data","PublishedAt":"2023-03-14 13:00:00+00:00","OriginURL":"https://blog.cloudflare.com/cloudflare-dlp-mip/","SourceName":"Cloudflare"}},{"node":{"ID":3158,"Title":"Developers think AI assistants will be everywhere, but aren’t sure how to feel about it","Description":"<p>The things we expect to succeed aren't always the things we're hoping to see more of.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/03/14/developers-think-ai-assistants-will-be-everywhere-but-arent-sure-how-to-feel-about-it/\">Developers think AI assistants will be everywhere, but aren&#8217;t sure how to feel about it</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-03-14 04:40:00+00:00","OriginURL":"https://stackoverflow.blog/2023/03/14/developers-think-ai-assistants-will-be-everywhere-but-arent-sure-how-to-feel-about-it/","SourceName":"Stack Overflow"}},{"node":{"ID":3157,"Title":"AWS Week in Review – March 13, 2023","Description":"It seems like only yesterday I was last writing the Week in Review post, at the end of January, and now here we are almost mid-way through March, almost into spring in the northern hemisphere, and close to a quarter way through 2023. Where does time fly?! Last Week’s LaunchesHere’s some of the launches and […]","PublishedAt":"2023-03-14 03:08:23+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/aws-week-in-review-march-13-2023/","SourceName":"AWS"}},{"node":{"ID":3156,"Title":"Adopting PgCat: A Nextgen Postgres Proxy","Description":"","PublishedAt":"2023-03-13 18:27:10+00:00","OriginURL":"https://tech.instacart.com/adopting-pgcat-a-nextgen-postgres-proxy-3cf284e68c2f?source=rss----587883b5d2ee---4","SourceName":"Instacart"}},{"node":{"ID":3155,"Title":"Highlights from Git 2.40","Description":"The first Git release of the year is here! Take a look at some of our highlights on what's new in Git 2.40.","PublishedAt":"2023-03-13 17:57:15+00:00","OriginURL":"https://github.blog/2023-03-13-highlights-from-git-2-40/","SourceName":"GitHub"}},{"node":{"ID":3154,"Title":"Introducing channel assignment history and rollback for HCP Packer ","Description":"HCP Packer’s new channel assignment history and rollback provide a complete record of artifacts in a channel and enable a simple, one-click rollback to previous iterations.","PublishedAt":"2023-03-13 16:00:00+00:00","OriginURL":"https://www.hashicorp.com/blog/introducing-channel-assignment-history-and-rollback-for-hcp-packer","SourceName":"HashiCorp"}},{"node":{"ID":3153,"Title":"Building an API is half the battle: Q&A with Marco Palladino from Kong","Description":"<p>API gateways, service mesh, and GraphQL, oh my!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/03/13/building-an-api-is-half-the-battle-qa-with-marco-palladino-from-kong/\">Building an API is half the battle: Q&amp;A with Marco Palladino from Kong</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-03-13 15:26:43+00:00","OriginURL":"https://stackoverflow.blog/2023/03/13/building-an-api-is-half-the-battle-qa-with-marco-palladino-from-kong/","SourceName":"Stack Overflow"}},{"node":{"ID":3146,"Title":"Top 50 most impersonated brands in phishing attacks and new tools you can use to protect your employees from them","Description":"We’re expanding the phishing protections available to Cloudflare One customers by automatically identifying—and blocking—so-called “confusable” domains.","PublishedAt":"2023-03-13 13:00:00+00:00","OriginURL":"https://blog.cloudflare.com/50-most-impersonated-brands-protect-phishing/","SourceName":"Cloudflare"}},{"node":{"ID":3147,"Title":"How to stay safe from phishing","Description":"Phishing attacks come in all sorts of ways to fool people. Email is definitely the most common, but there are others. Following up on our \"Top 50 Most Impersonated Brands in Phishing Attacks\" post, here are some tips to help you catch these scams before you fall for them.","PublishedAt":"2023-03-13 13:00:00+00:00","OriginURL":"https://blog.cloudflare.com/stay-safe-phishing-attacks/","SourceName":"Cloudflare"}},{"node":{"ID":3148,"Title":"Mutual TLS now available for Workers","Description":"Mutual TLS is used to secure a range of network services and applications: APIs, web applications, microservices, databases and IoT devices. With mTLS support for Workers you can use Workers to authenticate to any service secured by mTLS directly!","PublishedAt":"2023-03-13 13:00:00+00:00","OriginURL":"https://blog.cloudflare.com/mtls-workers/","SourceName":"Cloudflare"}},{"node":{"ID":3149,"Title":"Cloudflare Aegis: dedicated IPs for Zero Trust migration","Description":"Lock down your services with Cloudflare Aegis: dedicated IPs for Cloudflare egress back to your applications.","PublishedAt":"2023-03-13 13:00:00+00:00","OriginURL":"https://blog.cloudflare.com/cloudflare-aegis/","SourceName":"Cloudflare"}},{"node":{"ID":3150,"Title":"Using Cloudflare Access with CNI","Description":"We are thrilled to introduce an innovative new approach to secure hosted applications via Cloudflare Access without the need for any installed software or custom code on your application server.","PublishedAt":"2023-03-13 13:00:00+00:00","OriginURL":"https://blog.cloudflare.com/access-aegis-cni/","SourceName":"Cloudflare"}},{"node":{"ID":3151,"Title":"Locking down your JavaScript: positive blocking with Page Shield policies","Description":"Starting today, using Page Shield, Cloudflare’s client side security solution, you can ensure only vetted and secure JavaScript is being executed by your user’s browsers. Stop unwanted JavaScript and keep your end user data safe with Page Shield policies.","PublishedAt":"2023-03-13 13:00:00+00:00","OriginURL":"https://blog.cloudflare.com/page-shield-positive-blocking-policies/","SourceName":"Cloudflare"}},{"node":{"ID":3174,"Title":"Preventing XSS in Django","Description":"This guide discusses how XSS vulnerabilities originate in Django apps and what you can do to mitigate them. You'll also learn how to use free security tools to detect and fix XSS vulnerabilities early in development.","PublishedAt":"2023-03-13 05:00:00+00:00","OriginURL":"https://snyk.io/blog/preventing-xss-in-django","SourceName":"Snyk"}},{"node":{"ID":3152,"Title":"Insights into chess game trends: A detailed look at Lichess data","Description":"","PublishedAt":"2023-03-13 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/chess-game-trends-lichess-data","SourceName":"Elastic"}},{"node":{"ID":3143,"Title":"Elasticsearch Indexing Strategy in Asset Management Platform (AMP)","Description":"","PublishedAt":"2023-03-10 22:59:11+00:00","OriginURL":"https://netflixtechblog.com/elasticsearch-indexing-strategy-in-asset-management-platform-amp-99332231e541?source=rss----2615bd06b42e---4","SourceName":"Netflix"}},{"node":{"ID":3144,"Title":"Data Reprocessing Pipeline in Asset Management Platform @Netflix","Description":"","PublishedAt":"2023-03-10 22:58:47+00:00","OriginURL":"https://netflixtechblog.com/data-reprocessing-pipeline-in-asset-management-platform-netflix-46fe225c35c9?source=rss----2615bd06b42e---4","SourceName":"Netflix"}},{"node":{"ID":3142,"Title":"Cloudflare's network expansion in Indonesia","Description":"Building a world class network isn’t always easy, otherwise everyone would do it. I wanted to share with you some of the challenges that we’ve faced and how we’ve gone about overcoming them to become a leader for network performance in Indonesia.","PublishedAt":"2023-03-10 20:49:00+00:00","OriginURL":"https://blog.cloudflare.com/indonesia/","SourceName":"Cloudflare"}},{"node":{"ID":3140,"Title":"Welcome to Security Week 2023","Description":"Welcome to Security Week 2023 we’ll demonstrate how Cloudflare is making it as easy as possible to shift from protecting applications, to protecting employees, and making sure they are protected everywhere.","PublishedAt":"2023-03-10 17:00:00+00:00","OriginURL":"https://blog.cloudflare.com/welcome-to-security-week-2023/","SourceName":"Cloudflare"}},{"node":{"ID":3141,"Title":"Blog: k8s.gcr.io Redirect to registry.k8s.io - What You Need to Know","Description":"<p><strong>Authors</strong>: Bob Killen (Google), Davanum Srinivas (AWS), Chris Short (AWS), Frederico Muñoz (SAS\nInstitute), Tim Bannister (The Scale Factory), Ricky Sadowski (AWS), Grace Nguyen (Expo), Mahamed\nAli (Rackspace Technology), Mars Toktonaliev (independent), Laura Santamaria (Dell), Kat Cosgrove\n(Dell)</p>\n<p>On Monday, March 20th, the k8s.gcr.io registry <a href=\"https://kubernetes.io/blog/2022/11/28/registry-k8s-io-faster-cheaper-ga/\">will be redirected to the community owned\nregistry</a>,\n<strong>registry.k8s.io</strong> .</p>\n<h2 id=\"tl-dr-what-you-need-to-know-about-this-change\">TL;DR: What you need to know about this change</h2>\n<ul>\n<li>On Monday, March 20th, traffic from the older k8s.gcr.io registry will be redirected to\nregistry.k8s.io with the eventual goal of sunsetting k8s.gcr.io.</li>\n<li>If you run in a restricted environment, and apply strict domain name or IP address access policies\nlimited to k8s.gcr.io, <strong>the image pulls will not function</strong> after k8s.gcr.io starts redirecting\nto the new registry. </li>\n<li>A small subset of non-standard clients do not handle HTTP redirects by image registries, and will\nneed to be pointed directly at registry.k8s.io.</li>\n<li>The redirect is a stopgap to assist users in making the switch. The deprecated k8s.gcr.io registry\nwill be phased out at some point. <strong>Please update your manifests as soon as possible to point to\nregistry.k8s.io</strong>.</li>\n<li>If you host your own image registry, you can copy images you need there as well to reduce traffic\nto community owned registries.</li>\n</ul>\n<p>If you think you may be impacted, or would like to know more about this change, please keep reading.</p>\n<h2 id=\"why-did-kubernetes-change-to-a-different-image-registry\">Why did Kubernetes change to a different image registry?</h2>\n<p>k8s.gcr.io is hosted on a custom <a href=\"https://cloud.google.com/container-registry\">Google Container Registry\n(GCR)</a> domain that was set up solely for the Kubernetes\nproject. This has worked well since the inception of the project, and we thank Google for providing\nthese resources, but today, there are other cloud providers and vendors that would like to host\nimages to provide a better experience for the people on their platforms. In addition to Google’s\n<a href=\"https://www.cncf.io/google-cloud-recommits-3m-to-kubernetes/\">renewed commitment to donate $3\nmillion</a> to support the project's\ninfrastructure last year, Amazon Web Services announced a matching donation <a href=\"https://youtu.be/PPdimejomWo?t=236\">during their Kubecon NA\n2022 keynote in Detroit</a>. This will provide a better experience\nfor users (closer servers = faster downloads) and will reduce the egress bandwidth and costs from\nGCR at the same time.</p>\n<p>For more details on this change, check out <a href=\"https://kubernetes.io/blog/2022/11/28/registry-k8s-io-faster-cheaper-ga/\">registry.k8s.io: faster, cheaper and Generally Available\n(GA)</a>.</p>\n<h2 id=\"why-is-a-redirect-being-put-in-place\">Why is a redirect being put in place?</h2>\n<p>The project switched to <a href=\"https://kubernetes.io/blog/2022/11/28/registry-k8s-io-faster-cheaper-ga/\">registry.k8s.io last year with the 1.25\nrelease</a>; however, most of\nthe image pull traffic is still directed at the old endpoint k8s.gcr.io. This has not been\nsustainable for us as a project, as it is not utilizing the resources that have been donated to the\nproject from other providers, and we are in the danger of running out of funds due to the cost of\nserving this traffic.</p>\n<p>A redirect will enable the project to take advantage of these new resources, significantly reducing\nour egress bandwidth costs. We only expect this change to impact a small subset of users running in\nrestricted environments or using very old clients that do not respect redirects properly.</p>\n<h2 id=\"what-images-will-be-impacted\">What images will be impacted?</h2>\n<p><strong>ALL</strong> images on k8s.gcr.io will be impacted by this change. k8s.gcr.io hosts many images beyond\nKubernetes releases. A large number of Kubernetes subprojects host their images there as well. Some\nexamples include the <code>dns/k8s-dns-node-cache</code>, <code>ingress-nginx/controller</code>, and\n<code>node-problem-detector/node-problem-detector</code> images.</p>\n<h2 id=\"what-will-happen-to-k8s-gcr-io\">What will happen to k8s.gcr.io?</h2>\n<p>Separate from the the redirect, k8s.gcr.io will be frozen <a href=\"https://kubernetes.io/blog/2023/02/06/k8s-gcr-io-freeze-announcement/\">and will not be updated with new images\nafter April 3rd, 2023</a>. <code>k8s.gcr.io</code>\nwill not get any new releases, patches, or security updates. It will continue to remain available to\nhelp people migrate, but it <strong>WILL</strong> be phased out entirely in the future.</p>\n<h2 id=\"i-run-in-a-restricted-environment-what-should-i-do\">I run in a restricted environment. What should I do?</h2>\n<p>For impacted users that run in a restricted environment, the best option is to copy over the\nrequired images to a private registry or configure a pull-through cache in their registry.</p>\n<p>There are several tools to copy images between registries;\n<a href=\"https://github.com/google/go-containerregistry/blob/main/cmd/crane/doc/crane_copy.md\">crane</a> is one\nof those tools, and images can be copied to a private registry by using <code>crane copy SRC DST</code>. There\nare also vendor-specific tools, like e.g. Google’s\n<a href=\"https://cloud.google.com/container-registry/docs/migrate-external-containers#copy\">gcrane</a>, that\nperform a similar function but are streamlined for their platform.</p>\n<h2 id=\"how-can-i-check-registry-k8s-io-is-accessible-from-my-cluster\">How can I check registry.k8s.io is accessible from my cluster?</h2>\n<p>To test connectivity to registry.k8s.io and being able to pull images from there, here is a sample\ncommand that can be executed in the namespace of your choosing:</p>\n<pre tabindex=\"0\"><code>kubectl run hello-world --tty --rm -i --image=registry.k8s.io/busybox:latest sh\n</code></pre><p>When you run the command above, here’s what to expect when things work correctly:</p>\n<pre tabindex=\"0\"><code>$ kubectl run hello-world --tty --rm -i --image=registry.k8s.io/busybox:latest sh\nIf you don&#39;t see a command prompt, try pressing enter.\n/ # exit\nSession ended, resume using &#39;kubectl attach hello-world -c hello-world -i -t&#39; command when the pod is running\npod &#34;hello-world&#34; deleted\n</code></pre><h2 id=\"what-kind-of-errors-will-i-see-if-i-m-impacted\">What kind of errors will I see if I’m impacted?</h2>\n<p>Errors may depend on what kind of container runtime you are using, and what endpoint you are routed\nto, but it should present such as <code>ErrImagePull</code>, <code>ImagePullBackOff</code>, or a container failing to be\ncreated with the warning <code>FailedCreatePodSandBox</code>.</p>\n<p>Below is an example error message showing a proxied deployment failing to pull due to an unknown\ncertificate:</p>\n<pre tabindex=\"0\"><code>FailedCreatePodSandBox: Failed to create pod sandbox: rpc error: code = Unknown desc = Error response from daemon: Head “https://us-west1-docker.pkg.dev/v2/k8s-artifacts-prod/images/pause/manifests/3.8”: x509: certificate signed by unknown authority\n</code></pre><h2 id=\"how-can-i-find-which-images-are-using-the-legacy-registry-and-fix-them\">How can I find which images are using the legacy registry, and fix them?</h2>\n<p><strong>Option 1</strong>: See the one line kubectl command in our <a href=\"https://kubernetes.io/blog/2023/02/06/k8s-gcr-io-freeze-announcement/#what-s-next\">earlier blog\npost</a>:</p>\n<pre tabindex=\"0\"><code>kubectl get pods --all-namespaces -o jsonpath=&#34;{.items[*].spec.containers[*].image}&#34; |\\\ntr -s &#39;[[:space:]]&#39; &#39;\\n&#39; |\\\nsort |\\\nuniq -c\n</code></pre><p><strong>Option 2</strong>: A <code>kubectl</code> <a href=\"https://krew.sigs.k8s.io/\">krew</a> plugin has been developed called\n<a href=\"https://github.com/kubernetes-sigs/community-images#kubectl-community-images\"><code>community-images</code></a>,\nthat will scan and report any images using the k8s.gcr.io endpoint.</p>\n<p>If you have krew installed, you can install it with:</p>\n<pre tabindex=\"0\"><code>kubectl krew install community-images\n</code></pre><p>and generate a report with:</p>\n<pre tabindex=\"0\"><code>kubectl community-images\n</code></pre><p>For alternate methods of install and example output, check out the repo:\n<a href=\"https://github.com/kubernetes-sigs/community-image\">kubernetes-sigs/community-images</a>.</p>\n<p><strong>Option 3</strong>: If you do not have access to a cluster directly, or manage many clusters - the best\nway is to run a search over your manifests and charts for <em>&quot;k8s.gcr.io&quot;</em>.</p>\n<p><strong>Option 4</strong>: If you wish to prevent k8s.gcr.io based images from running in your cluster, example\npolicies for <a href=\"https://open-policy-agent.github.io/gatekeeper-library/website/\">Gatekeeper</a> and\n<a href=\"https://kyverno.io/\">Kyverno</a> are available in the <a href=\"https://github.com/aws/aws-eks-best-practices/tree/master/policies/k8s-registry-deprecation\">AWS EKS Best Practices\nrepository</a>\nthat will block them from being pulled. You can use these third-party policies with any Kubernetes\ncluster.</p>\n<p><strong>Option 5</strong>: As a <strong>LAST</strong> possible option, you can use a <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#what-are-admission-webhooks\">Mutating\nAdmission Webhook</a>\nto change the image address dynamically. This should only be\nconsidered a stopgap till your manifests have been updated. You can\nfind a (third party) Mutating Webhook and Kyverno policy in\n<a href=\"https://github.com/abstractinfrastructure/k8s-gcr-quickfix\">k8s-gcr-quickfix</a>.</p>\n<h2 id=\"i-still-have-questions-where-should-i-go\">I still have questions, where should I go?</h2>\n<p>For more information on registry.k8s.io and why it was developed, see <a href=\"https://kubernetes.io/blog/2022/11/28/registry-k8s-io-faster-cheaper-ga/\">registry.k8s.io: faster,\ncheaper and Generally Available</a>.</p>\n<p>If you would like to know more about the image freeze and the last images that will be available\nthere, see the blog post: <a href=\"https://kubernetes.io/blog/2023/02/06/k8s-gcr-io-freeze-announcement/\">k8s.gcr.io Image Registry Will Be Frozen From the 3rd of April\n2023</a>.</p>\n<p>Information on the architecture of registry.k8s.io and its <a href=\"https://github.com/kubernetes/registry.k8s.io/blob/8408d0501a88b3d2531ff54b14eeb0e3c900a4f3/cmd/archeio/docs/request-handling.md\">request handling decision\ntree</a>\ncan be found in the <a href=\"https://github.com/kubernetes/registry.k8s.io\">kubernetes/registry.k8s.io\nrepo</a>.</p>\n<p>If you believe you have encountered a bug with the new registry or the redirect, please open an\nissue in the <a href=\"https://github.com/kubernetes/registry.k8s.io/issues/new/choose\">kubernetes/registry.k8s.io\nrepo</a>. <strong>Please check if there is an issue already\nopen similar to what you are seeing before you create a new issue</strong>.</p>","PublishedAt":"2023-03-10 17:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2023/03/10/image-registry-redirect/","SourceName":"Kubernetes"}},{"node":{"ID":3138,"Title":"Deploying firmware at Cloudflare-scale: updating thousands of servers in more than 285 cities","Description":"We have a huge number of servers of varying kinds, from varying vendors, spread over 285 cities worldwide. We need to be able to rapidly deploy various types of firmware updates to all of them, reliably, and automatically, without any kind of manual intervention.","PublishedAt":"2023-03-10 14:00:00+00:00","OriginURL":"https://blog.cloudflare.com/deploying-firmware-at-cloudflare-scale-how-we-update-thousands-of-servers-in-more-than-285-cities/","SourceName":"Cloudflare"}},{"node":{"ID":3145,"Title":"The Overflow #168: Other words for technical debt","Description":"<p>Governments and open source, email scraping, and UIs in Rust</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/03/10/the-overflow-168-other-words-for-technical-debt/\">The Overflow #168: Other words for technical debt</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-03-10 13:04:00+00:00","OriginURL":"https://stackoverflow.blog/2023/03/10/the-overflow-168-other-words-for-technical-debt/","SourceName":"Stack Overflow"}},{"node":{"ID":3139,"Title":"Five tips for growing your career in tech sales","Description":"<p>One of Rain Hu's favorite moments of the day is her early morning run. \"I run six kilometers minimum daily, rain or shine,\" she says. \"I enjoy the time alone because it allows me to have time for self-reflection and self-conversation.\" </p><p>The discipline that it takes to maintain a healthy lifestyle is carried throughout her life. As a wife, mother of two young boys, and sales leader, Rain optimizes her time so that she can show up fully and authentically in all aspects of her life. </p><p>We sat down with Rain, <span style='color:rgb(34, 34, 34);font-size: 11pt;'>Area Vice President, ASEAN and Greater China&nbsp;</span> at Elastic, to learn how she has built a career she loves. Read on to learn about how she grew her career in tech sales and what advice she has for others looking to do the same. </p><p><p></p><img src=\"https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt8fdc37719f4d18ac/6408c3ec9a3afb6a24eba3b4/Elastic_-_Rain_(1)_(1).png\" height=\"auto\"/></p><h2>Launching a career in tech sales</h2><p>Shortly after graduating with her MBA, a headhunter contacted Rain about a position in sales. \"When they pitched this sales job to me, I found it very interesting,\" she says. Although she didn't have any sales experience, she liked the idea of helping clients find solutions. \"And at the same time they talked about the commission piece, and as a fresh grad, I also found that very attractive.\" </p><p>Over fifteen years later, Rain has earned her stripes in sales and team management. After holding executive positions at various well-known companies, Rain began to seek more opportunities for growth. \"I wanted to join a growing company where I would be able to build and grow with the company,\" she says. And that's how she found Elastic. </p><p>Apart from the job description, Elastic's culture and values were what won her over when she decided to join three years ago. \"Elastic's source code says we are not here to strive for perfection, so when I saw that, I immediately knew that this is the company that I would like to join, because we are not perfect — we are human.\" </p><p>As a salesperson, quality human connection at work is major for Rain. \"[Sometimes] I see my colleagues more than I see my family, so liking the people I work with makes a big difference.\" </p><p>Equally important, however, is having the support required to maintain those connections at work <em>and</em> at home. \"Elastic's culture gives us the flexibility to find that balance,\" says Rain. </p><h2>Building and growing alongside Elastic</h2><p>When Rain joined Elastic in 2018, there were only five employees in ASEAN and Hong Kong Singapore headquarters.&nbsp;She now manages over 10 countries with more than 10 languages spoken in the APJ and ASEAN regions. \"It has been an amazing journey,\" says Rain. </p><p>Rain attributes this success to learning from her fellow colleagues. \"I would say the secret recipe is being able to connect the dots and learn from other Elasticians.\" She makes sure her team has the opportunity to connect and learn from one another to accelerate growth and ensure optimal business outcomes: \"Together, we make the difference.\" </p><h2>How to grow your career in tech sales</h2><p>Whether you're new to tech sales or are looking for ways to advance even further in the industry, here's Rain's advice for growing your career in tech sales. </p><p>1. <strong>Enjoy what you do.</strong> Being passionate about your career will give you an extra boost of motivation that could help take your career to the next level. \"Today is the youngest you will ever be again, so that's why you should enjoy it to the fullest.\" </p><p>2. <strong>Get a mentor.</strong> \"With a mentor, you will be able to bounce ideas, know your shortcomings, develop your strengths, and learn something new.\" Rain has personally benefited from mentorship and always encourages others to do so as well. \"You need to be able to speak transparently to this person so that he or she will be able to give you the advice [you most need to hear].\" </p><p>3. <strong>Be a team player.</strong> \"If you want to go fast, go alone. If you want to go far, go together.\" While sales may seem like an individual effort, success wouldn't be possible without the rest of the team. \"People always say, 'Rain, you are number one', but to me this is just a name tag, because there is a full village behind the scenes and they are the heroes actually.\" </p><p>4. <strong>Get constructive feedback.</strong> Ask your supervisors, clients, and fellow team members to comment on your work. \"Don't be afraid of asking for feedback,\" Rain says. \"It might hurt sometimes, but that is what will help you to improve and become a better version of yourself.\" </p><p>5. <strong>Have resilience.</strong> Rain learned the value of resilience from her 7-year-old son who competes on Singapore's national chess team. \"He started competing at a higher level and realized that he wouldn't always win,\" she explains. But he learns from his mistakes and that keeps him motivated to continue learning. \"I see that [resilience] is very important when it comes to your career, because it's not always roses and rainbows, and you will hit roadblocks. But how do you overcome that? That's where resilience comes into the picture.\" </p><p><span style='color:rgb(52, 55, 65);font-size: 12pt;'>Want to grow your sales career? Check out Elastic's open sales roles </span><a href=\"https://jobs.elastic.co/jobs/department/field-operations?#/?utm_source=elastic.co&utm_medium=referral&utm_campaign=eb-sh&utm_cnt=tips-blog\"><span style='font-size: 12pt;'>here</span></a><span style='color:rgb(52, 55, 65);font-size: 12pt;'>.</span></p><p><em>This blog post was originally published on the </em><a href=\"https://powertofly.com/\" target=\"_self\"><em>Power to Fly</em></a><em> website.</em></p>","PublishedAt":"2023-03-10 07:00:00+00:00","OriginURL":"https://www.elastic.co/blog/culture-five-tips-for-growing-your-career-in-tech-sales","SourceName":"Elastic"}},{"node":{"ID":3137,"Title":"How to position yourself to land the job you want","Description":"<p>The home team talks with Wesley Faulkner, Senior Community Manager at AWS, about what’s going on with this cycle of tech layoffs, how to position yourself for success on the job market, and why it’s worth interviewing for jobs you might not want. Plus: The two things you should do as soon as you get an offer.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2023/03/10/how-to-position-yourself-to-land-the-job-you-want/\">How to position yourself to land the job you want</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2023-03-10 05:40:00+00:00","OriginURL":"https://stackoverflow.blog/2023/03/10/how-to-position-yourself-to-land-the-job-you-want/","SourceName":"Stack Overflow"}},{"node":{"ID":3136,"Title":"Blog: Forensic container analysis","Description":"<p><strong>Authors:</strong> Adrian Reber (Red Hat)</p>\n<p>In my previous article, <a href=\"https://kubernetes.io/blog/2022/12/05/forensic-container-checkpointing-alpha/\">Forensic container checkpointing in\nKubernetes</a>, I introduced checkpointing in Kubernetes\nand how it has to be setup and how it can be used. The name of the\nfeature is Forensic container checkpointing, but I did not go into\nany details how to do the actual analysis of the checkpoint created by\nKubernetes. In this article I want to provide details how the\ncheckpoint can be analyzed.</p>\n<p>Checkpointing is still an alpha feature in Kubernetes and this article\nwants to provide a preview how the feature might work in the future.</p>\n<h2 id=\"preparation\">Preparation</h2>\n<p>Details about how to configure Kubernetes and the underlying CRI implementation\nto enable checkpointing support can be found in my <a href=\"https://kubernetes.io/blog/2022/12/05/forensic-container-checkpointing-alpha/\">Forensic container\ncheckpointing in Kubernetes</a> article.</p>\n<p>As an example I prepared a container image (<code>quay.io/adrianreber/counter:blog</code>)\nwhich I want to checkpoint and then analyze in this article. This container allows\nme to create files in the container and also store information in memory which\nI later want to find in the checkpoint.</p>\n<p>To run that container I need a pod, and for this example I am using the following Pod manifest:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Pod<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>counters<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">containers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>counter<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">image</span>:<span style=\"color:#bbb\"> </span>quay.io/adrianreber/counter:blog<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>This results in a container called <code>counter</code> running in a pod called <code>counters</code>.</p>\n<p>Once the container is running I am performing following actions with that\ncontainer:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> kubectl get pod counters --template <span style=\"color:#b44\">&#39;{{.status.podIP}}&#39;</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10.88.0.25\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"color:#000080;font-weight:bold\">$</span> curl 10.88.0.25:8088/create?test-file\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> curl 10.88.0.25:8088/secret?RANDOM_1432_KEY\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> curl 10.88.0.25:8088\n</span></span></code></pre></div><p>The first access creates a file called <code>test-file</code> with the content <code>test-file</code>\nin the container and the second access stores my secret information\n(<code>RANDOM_1432_KEY</code>) somewhere in the container's memory. The last access just\nadds an additional line to the internal log file.</p>\n<p>The last step before I can analyze the checkpoint it to tell Kubernetes to create\nthe checkpoint. As described in the previous article this requires access to the\n<em>kubelet</em> only <code>checkpoint</code> API endpoint.</p>\n<p>For a container named <em>counter</em> in a pod named <em>counters</em> in a namespace named\n<em>default</em> the <em>kubelet</em> API endpoint is reachable at:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span><span style=\"color:#080;font-style:italic\"># run this on the node where that Pod is executing</span>\n</span></span><span style=\"display:flex;\"><span>curl -X POST <span style=\"color:#b44\">&#34;https://localhost:10250/checkpoint/default/counters/counter&#34;</span>\n</span></span></code></pre></div><p>For completeness the following <code>curl</code> command-line options are necessary to\nhave <code>curl</code> accept the <em>kubelet</em>'s self signed certificate and authorize the\nuse of the <em>kubelet</em> <code>checkpoint</code> API:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>--insecure --cert /var/run/kubernetes/client-admin.crt --key /var/run/kubernetes/client-admin.key\n</span></span></code></pre></div><p>Once the checkpointing has finished the checkpoint should be available at\n<code>/var/lib/kubelet/checkpoints/checkpoint-&lt;pod-name&gt;_&lt;namespace-name&gt;-&lt;container-name&gt;-&lt;timestamp&gt;.tar</code></p>\n<p>In the following steps of this article I will use the name <code>checkpoint.tar</code>\nwhen analyzing the checkpoint archive.</p>\n<h2 id=\"checkpoint-archive-analysis-using-checkpointctl\">Checkpoint archive analysis using <code>checkpointctl</code></h2>\n<p>To get some initial information about the checkpointed container I am using the\ntool <a href=\"https://github.com/checkpoint-restore/checkpointctl\">checkpointctl</a> like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> checkpointctl show checkpoint.tar --print-stats\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">+-----------+----------------------------------+--------------+---------+---------------------+--------+------------+------------+-------------------+\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">| CONTAINER | IMAGE | ID | RUNTIME | CREATED | ENGINE | IP | CHKPT SIZE | ROOT FS DIFF SIZE |\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">+-----------+----------------------------------+--------------+---------+---------------------+--------+------------+------------+-------------------+\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">| counter | quay.io/adrianreber/counter:blog | 059a219a22e5 | runc | 2023-03-02T06:06:49 | CRI-O | 10.88.0.23 | 8.6 MiB | 3.0 KiB |\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">+-----------+----------------------------------+--------------+---------+---------------------+--------+------------+------------+-------------------+\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">CRIU dump statistics\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">+---------------+-------------+--------------+---------------+---------------+---------------+\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">| FREEZING TIME | FROZEN TIME | MEMDUMP TIME | MEMWRITE TIME | PAGES SCANNED | PAGES WRITTEN |\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">+---------------+-------------+--------------+---------------+---------------+---------------+\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">| 100809 us | 119627 us | 11602 us | 7379 us | 7800 | 2198 |\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">+---------------+-------------+--------------+---------------+---------------+---------------+\n</span></span></span></code></pre></div><p>This gives me already some information about the checkpoint in that checkpoint\narchive. I can see the name of the container, information about the container\nruntime and container engine. It also lists the size of the checkpoint (<code>CHKPT SIZE</code>). This is mainly the size of the memory pages included in the checkpoint,\nbut there is also information about the size of all changed files in the\ncontainer (<code>ROOT FS DIFF SIZE</code>).</p>\n<p>The additional parameter <code>--print-stats</code> decodes information in the checkpoint\narchive and displays them in the second table (<em>CRIU dump statistics</em>). This\ninformation is collected during checkpoint creation and gives an overview how much\ntime CRIU needed to checkpoint the processes in the container and how many\nmemory pages were analyzed and written during checkpoint creation.</p>\n<h2 id=\"digging-deeper\">Digging deeper</h2>\n<p>With the help of <code>checkpointctl</code> I am able to get some high level information\nabout the checkpoint archive. To be able to analyze the checkpoint archive\nfurther I have to extract it. The checkpoint archive is a <em>tar</em> archive and can\nbe extracted with the help of <code>tar xf checkpoint.tar</code>.</p>\n<p>Extracting the checkpoint archive will result in following files and directories:</p>\n<ul>\n<li><code>bind.mounts</code> - this file contains information about bind mounts and is needed\nduring restore to mount all external files and directories at the right location</li>\n<li><code>checkpoint/</code> - this directory contains the actual checkpoint as created by\nCRIU</li>\n<li><code>config.dump</code> and <code>spec.dump</code> - these files contain metadata about the container\nwhich is needed during restore</li>\n<li><code>dump.log</code> - this file contains the debug output of CRIU created during\ncheckpointing</li>\n<li><code>stats-dump</code> - this file contains the data which is used by <code>checkpointctl</code>\nto display dump statistics (<code>--print-stats</code>)</li>\n<li><code>rootfs-diff.tar</code> - this file contains all changed files on the container's\nfile-system</li>\n</ul>\n<h3 id=\"file-system-changes-rootfs-diff-tar\">File-system changes - <code>rootfs-diff.tar</code></h3>\n<p>The first step to analyze the container's checkpoint further is to look at\nthe files that have changed in my container. This can be done by looking at the\nfile <code>rootfs-diff.tar</code>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> tar xvf rootfs-diff.tar\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">home/counter/logfile\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">home/counter/test-file\n</span></span></span></code></pre></div><p>Now the files that changed in the container can be studied:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> cat home/counter/logfile\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10.88.0.1 - - [02/Mar/2023 06:07:29] &#34;GET /create?test-file HTTP/1.1&#34; 200 -\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10.88.0.1 - - [02/Mar/2023 06:07:40] &#34;GET /secret?RANDOM_1432_KEY HTTP/1.1&#34; 200 -\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">10.88.0.1 - - [02/Mar/2023 06:07:43] &#34;GET / HTTP/1.1&#34; 200 -\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"color:#000080;font-weight:bold\">$</span> cat home/counter/test-file\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">test-file \n</span></span></span></code></pre></div><p>Compared to the container image (<code>quay.io/adrianreber/counter:blog</code>) this\ncontainer is based on, I can see that the file <code>logfile</code> contains information\nabout all access to the service the container provides and the file <code>test-file</code>\nwas created just as expected.</p>\n<p>With the help of <code>rootfs-diff.tar</code> it is possible to inspect all files that\nwere created or changed compared to the base image of the container.</p>\n<h3 id=\"analyzing-the-checkpointed-processes-checkpoint\">Analyzing the checkpointed processes - <code>checkpoint/</code></h3>\n<p>The directory <code>checkpoint/</code> contains data created by CRIU while checkpointing\nthe processes in the container. The content in the directory <code>checkpoint/</code>\nconsists of different <a href=\"https://criu.org/Images\">image files</a> which can be analyzed with the\nhelp of the tool <a href=\"https://criu.org/CRIT\">CRIT</a> which is distributed as part of CRIU.</p>\n<p>First lets get an overview of the processes inside of the container:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> crit show checkpoint/pstree.img | jq .entries<span style=\"color:#666\">[]</span>.pid\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">1\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">7\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">8\n</span></span></span></code></pre></div><p>This output means that I have three processes inside of the container's PID\nnamespace with the PIDs: 1, 7, 8</p>\n<p>This is only the view from the inside of the container's PID namespace. During\nrestore exactly these PIDs will be recreated. From the outside of the\ncontainer's PID namespace the PIDs will change after restore.</p>\n<p>The next step is to get some additional information about these three processes:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> crit show checkpoint/core-1.img | jq .entries<span style=\"color:#666\">[</span>0<span style=\"color:#666\">]</span>.tc.comm\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">&#34;bash&#34;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"color:#000080;font-weight:bold\">$</span> crit show checkpoint/core-7.img | jq .entries<span style=\"color:#666\">[</span>0<span style=\"color:#666\">]</span>.tc.comm\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">&#34;counter.py&#34;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"color:#000080;font-weight:bold\">$</span> crit show checkpoint/core-8.img | jq .entries<span style=\"color:#666\">[</span>0<span style=\"color:#666\">]</span>.tc.comm\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">&#34;tee&#34;\n</span></span></span></code></pre></div><p>This means the three processes in my container are <code>bash</code>, <code>counter.py</code> (a Python\ninterpreter) and <code>tee</code>. For details about the parent child relations of these processes there\nis more data to be analyzed in <code>checkpoint/pstree.img</code>.</p>\n<p>Let's compare the so far collected information to the still running container:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> crictl inspect --output go-template --template <span style=\"color:#b44\">&#34;{{(index .info.pid)}}&#34;</span> 059a219a22e56\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">722520\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"color:#000080;font-weight:bold\">$</span> ps auxf | grep -A <span style=\"color:#666\">2</span> <span style=\"color:#666\">722520</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">fedora 722520 \\_ bash -c /home/counter/counter.py 2&gt;&amp;1 | tee /home/counter/logfile\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">fedora 722541 \\_ /usr/bin/python3 /home/counter/counter.py\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">fedora 722542 \\_ /usr/bin/coreutils --coreutils-prog-shebang=tee /usr/bin/tee /home/counter/logfile\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"color:#000080;font-weight:bold\">$</span> cat /proc/722520/comm\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">bash\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"color:#000080;font-weight:bold\">$</span> cat /proc/722541/comm\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">counter.py\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"color:#000080;font-weight:bold\">$</span> cat /proc/722542/comm\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">tee\n</span></span></span></code></pre></div><p>In this output I am first retrieving the PID of the first process in the\ncontainer and then I am looking for that PID and child processes on the system\nwhere the container is running. I am seeing three processes and the first one is\n&quot;bash&quot; which is PID 1 inside of the containers PID namespace. Then I am looking\nat <code>/proc/&lt;PID&gt;/comm</code> and I can find the exact same value\nas in the checkpoint image.</p>\n<p>Important to remember is that the checkpoint will contain the view from within the\ncontainer's PID namespace because that information is important to restore the\nprocesses.</p>\n<p>One last example of what <code>crit</code> can tell us about the container is the information\nabout the UTS namespace:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> crit show checkpoint/utsns-12.img\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">{\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> &#34;magic&#34;: &#34;UTSNS&#34;,\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> &#34;entries&#34;: [\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> {\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> &#34;nodename&#34;: &#34;counters&#34;,\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> &#34;domainname&#34;: &#34;(none)&#34;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> }\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> ]\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">}\n</span></span></span></code></pre></div><p>This tells me that the hostname inside of the UTS namespace is <code>counters</code>.</p>\n<p>For every resource CRIU collected during checkpointing the <code>checkpoint/</code>\ndirectory contains corresponding image files which can be analyzed with the help\nof <code>crit</code>.</p>\n<h4 id=\"looking-at-the-memory-pages\">Looking at the memory pages</h4>\n<p>In addition to the information from CRIU that can be decoded with the help\nof CRIT, there are also files containing the raw memory pages written by\nCRIU to disk:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> ls checkpoint/pages-*\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">checkpoint/pages-1.img checkpoint/pages-2.img checkpoint/pages-3.img\n</span></span></span></code></pre></div><p>When I initially used the container I stored a random key (<code>RANDOM_1432_KEY</code>)\nsomewhere in the memory. Let see if I can find it:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> grep -ao RANDOM_1432_KEY checkpoint/pages-*\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">checkpoint/pages-2.img:RANDOM_1432_KEY\n</span></span></span></code></pre></div><p>And indeed, there is my data. This way I can easily look at the content\nof all memory pages of the processes in the container, but it is also\nimportant to remember that anyone that can access the checkpoint\narchive has access to all information that was stored in the memory of the\ncontainer's processes.</p>\n<h4 id=\"using-gdb-for-further-analysis\">Using gdb for further analysis</h4>\n<p>Another possibility to look at the checkpoint images is <code>gdb</code>. The CRIU repository\ncontains the script <a href=\"https://github.com/checkpoint-restore/criu/tree/criu-dev/coredump\">coredump</a> which can convert a checkpoint\ninto a coredump file:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> /home/criu/coredump/coredump-python3\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> ls -al core*\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">core.1 core.7 core.8\n</span></span></span></code></pre></div><p>Running the <code>coredump-python3</code> script will convert the checkpoint images into\none coredump file for each process in the container. Using <code>gdb</code> I can also look\nat the details of the processes:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">$</span> echo info registers | gdb --core checkpoint/core.1 -q\n</span></span><span style=\"display:flex;\"><span><span style=\"\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"\"></span><span style=\"color:#888\">[New LWP 1]\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"\"></span><span style=\"color:#888\">Core was generated by `bash -c /home/counter/counter.py 2&gt;&amp;1 | tee /home/counter/logfile&#39;.\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"\"></span><span style=\"color:#000080;font-weight:bold\">#</span><span style=\"color:#666\">0</span> 0x00007fefba110198 in ?? <span style=\"color:#666\">()</span>\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">(gdb)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">rax 0x3d 61\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">rbx 0x8 8\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">rcx 0x7fefba11019a 140667595587994\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">rdx 0x0 0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">rsi 0x7fffed9c1110 140737179816208\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">rdi 0xffffffff 4294967295\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">rbp 0x1 0x1\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">rsp 0x7fffed9c10e8 0x7fffed9c10e8\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">r8 0x1 1\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">r9 0x0 0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">r10 0x0 0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">r11 0x246 582\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">r12 0x0 0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">r13 0x7fffed9c1170 140737179816304\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">r14 0x0 0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">r15 0x0 0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">rip 0x7fefba110198 0x7fefba110198\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">eflags 0x246 [ PF ZF IF ]\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">cs 0x33 51\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">ss 0x2b 43\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">ds 0x0 0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">es 0x0 0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">fs 0x0 0\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">gs 0x0 0\n</span></span></span></code></pre></div><p>In this example I can see the value of all registers as they were during\ncheckpointing and I can also see the complete command-line of my container's PID\n1 process: <code>bash -c /home/counter/counter.py 2&gt;&amp;1 | tee /home/counter/logfile</code></p>\n<h2 id=\"summary\">Summary</h2>\n<p>With the help of container checkpointing, it is possible to create a\ncheckpoint of a running container without stopping the container and without the\ncontainer knowing that it was checkpointed. The result of checkpointing a\ncontainer in Kubernetes is a checkpoint archive; using different tools like\n<code>checkpointctl</code>, <code>tar</code>, <code>crit</code> and <code>gdb</code> the checkpoint can be analyzed. Even\nwith simple tools like <code>grep</code> it is possible to find information in the\ncheckpoint archive.</p>\n<p>The different examples I have shown in this article how to analyze a checkpoint\nare just the starting point. Depending on your requirements it is possible to\nlook at certain things in much more detail, but this article should give you an\nintroduction how to start the analysis of your checkpoint.</p>\n<h2 id=\"how-do-i-get-involved\">How do I get involved?</h2>\n<p>You can reach SIG Node by several means:</p>\n<ul>\n<li>Slack: <a href=\"https://kubernetes.slack.com/messages/sig-node\">#sig-node</a></li>\n<li>Slack: <a href=\"https://kubernetes.slack.com/messages/sig-security\">#sig-security</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/kubernetes-sig-node\">Mailing list</a></li>\n</ul>","PublishedAt":"2023-03-10 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2023/03/10/forensic-container-analysis/","SourceName":"Kubernetes"}},{"node":{"ID":3130,"Title":"Meet the Newest AWS Heroes – March 2023","Description":"The AWS Heroes are passionate AWS experts who are dedicated to sharing their in-depth knowledge within the community. They inspire, uplift, and motivate the global AWS community, and today, we’re excited to announce and recognize the newest Heroes in 2023! Aidan Steele – Melbourne, Australia Serverless Hero Aidan Steele is a Senior Engineer at Nightvision. […]","PublishedAt":"2023-03-09 18:29:21+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/meet-the-newest-aws-heroes-march-2023/","SourceName":"AWS"}},{"node":{"ID":3133,"Title":"NTS: Reliable Device Testing at Scale","Description":"","PublishedAt":"2023-03-09 17:38:02+00:00","OriginURL":"https://netflixtechblog.com/nts-reliable-device-testing-at-scale-43139ae05382?source=rss----2615bd06b42e---4","SourceName":"Netflix"}}]}},"pageContext":{"limit":30,"skip":2610,"numPages":193,"currentPage":88}},"staticQueryHashes":["3649515864"]}