{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/page/111","result":{"data":{"allPost":{"edges":[{"node":{"ID":2472,"Title":"How Universal Profiling unwinds stacks without frame pointers and symbols","Description":"","PublishedAt":"2022-12-07 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/universal-profiling-frame-pointers-symbols-ebpf","SourceName":"Elastic"}},{"node":{"ID":2473,"Title":"Configure pipeline alerts with Datadog CI monitors","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/configure-pipeline-alerts-with-ci-monitors/ci_monitors_hero.png\" width=\"100%\"/>CI pipelines have become an integral part of the development workflow, helping teams automate the continuous building and testing of new updates to application code. The growing importance of CI pipelines has naturally led to a need for increased visibility into their performance. In 2021, Datadog introduced CI Visibility to deliver granular performance metrics for each individual pipeline, allowing you to monitor build duration and related telemetry across all recent commits.","PublishedAt":"2022-12-07 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/configure-pipeline-alerts-with-ci-monitors/","SourceName":"Datadog"}},{"node":{"ID":2463,"Title":"A New Path in Life: How Cloudera Provided Me with the Opportunity for Change","Description":"<p>In the spirit of showing thankfulness, I want to share my story of the opportunities given to me by my employer and the gratitude I have for this change of life.  My humble beginnings When I was 16 years old, I found myself in the backyard with a shovel creating a makeshift restroom because our [&#8230;]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/a-new-path-in-life-how-cloudera-provided-me-with-the-opportunity-for-change/\">A New Path in Life: How Cloudera Provided Me with the Opportunity for Change</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-12-06 20:28:18+00:00","OriginURL":"https://blog.cloudera.com/a-new-path-in-life-how-cloudera-provided-me-with-the-opportunity-for-change/","SourceName":"Cloudera"}},{"node":{"ID":2462,"Title":"Announcing Lottie 4.0 for iOS","Description":"","PublishedAt":"2022-12-06 20:01:37+00:00","OriginURL":"https://medium.com/airbnb-engineering/announcing-lottie-4-0-for-ios-d4d226862a54?source=rss----53c7c27702d5---4","SourceName":"Airbnb"}},{"node":{"ID":2461,"Title":"Why tool consolidation matters for developer security","Description":"In this post we'll discuss some of the adverse effects organizations experience from tool sprawl, and the shift towards security tool consolidation.","PublishedAt":"2022-12-06 16:46:35+00:00","OriginURL":"https://snyk.io/blog/tool-consolidation-for-developer-security/","SourceName":"Snyk"}},{"node":{"ID":2458,"Title":"SIG-Scheduling Deep Dive (Kubecon Recap)","Description":"<p>Hi there. I’m @sanposhiho, working in the Platform Infra team in Mercari, and also I’m a SIG-Scheduling reviewer in Kubernetes community. I joined KubeCon + CloudNative North America 2022 as a speaker and gave a talk “SIG-Scheduling Deep Dive” along with other SIG-Scheduling maintainers. This blog post is going to summarize this session. You can [&hellip;]</p>\n","PublishedAt":"2022-12-06 16:00:26+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20221206-sig-scheduling-deep-dive-kubecon-recap/","SourceName":"Mercari"}},{"node":{"ID":2460,"Title":"Operating System Snapshot Automation","Description":"Co-authors: Rohit Jamuar, Tianxin Zhou Introduction LinkedIn has a large set of physical servers geographically spread across several locations. Every application is hosted on a physical server and is distributed and managed across one of these hosts. With a reasonably sizable footprint of servers in data centers, LinkedIn is responsible for ensuring that these hosts are always on an operating system (OS) version deemed the “latest and greatest” for all intents and purposes. The Production Systems Software Engineering (PSSE) organization within LinkedIn has taken the responsibility  [&#8230;]","PublishedAt":"2022-12-06 16:00:00+00:00","OriginURL":"https://engineering.linkedin.com/blog/2022/operating-system-snapshot-automation","SourceName":"Linkedin"}},{"node":{"ID":2457,"Title":"The blockchain tech to build in a crypto winter","Description":"<p>Even nodes and validators need a backend built for speed.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2022/12/06/validation-cloud-javelin-blockchain-infrastructure-node-validator/\">The blockchain tech to build in a crypto winter</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2022-12-06 05:40:00+00:00","OriginURL":"https://stackoverflow.blog/2022/12/06/validation-cloud-javelin-blockchain-infrastructure-node-validator/","SourceName":"Stack Overflow"}},{"node":{"ID":2459,"Title":"Marketing Attribution: Evaluating The Path to Purchase in the Product Ecosystem","Description":"","PublishedAt":"2022-12-06 00:00:00+00:00","OriginURL":"https://tech.trivago.com/post/2022-12-06-marketing-attribution-evaluating-the-path-to-purchase/","SourceName":"Trivago"}},{"node":{"ID":2464,"Title":"Highlights from AWS re:Invent 2022","Description":"<img class=\"webfeedsFeaturedVisual rss\" src=\"https://imgix.datadoghq.com/img/blog/aws-reinvent-2022-recap/reinvent22_blog_post_hero.png\" width=\"100%\"/>Just like shopping on Black Friday, AWS re:Invent has become a post-Thanksgiving tradition for some of us at Datadog. We were excited to join tens of thousands of fellow AWS users and partners for this annual gathering that features new product announcements, technical sessions, networking, and fun.As if I didn&#39;t love @datadoghq enough, they have a slide here pic.twitter.com/Opq7BGW3KG&mdash; Travisty (@traviskhoover) November 28, 2022 This year, we saw three themes emerge from the conference announcements and sessions:","PublishedAt":"2022-12-06 00:00:00+00:00","OriginURL":"https://www.datadoghq.com/blog/aws-reinvent-2022-recap/","SourceName":"Datadog"}},{"node":{"ID":2456,"Title":"How to verify and secure your Mastodon account","Description":"In this tutorial, we’ll walk through the process of verifying a Mastodon account, in order to gain a verification check mark and provide some legitimacy to the account.","PublishedAt":"2022-12-05 18:39:46+00:00","OriginURL":"https://snyk.io/blog/verify-and-secure-your-mastodon-account/","SourceName":"Snyk"}},{"node":{"ID":2454,"Title":"Personalizing Recommendations for a Learning User","Description":"","PublishedAt":"2022-12-05 15:36:47+00:00","OriginURL":"https://tech.instacart.com/personalizing-recommendations-for-a-learning-user-ed170a197f2e?source=rss----587883b5d2ee---4","SourceName":"Instacart"}},{"node":{"ID":2455,"Title":"Just laid off? Nervous about possible layoffs? Here’s what to do.","Description":"<p>Suddenly losing a job can be personally destabilizing. But lots of us have been there and gotten through it. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2022/12/05/just-laid-off-nervous-about-possible-layoffs-heres-what-to-do/\">Just laid off? Nervous about possible layoffs? Here’s what to do.</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2022-12-05 15:04:04+00:00","OriginURL":"https://stackoverflow.blog/2022/12/05/just-laid-off-nervous-about-possible-layoffs-heres-what-to-do/","SourceName":"Stack Overflow"}},{"node":{"ID":2453,"Title":"Evernote’s Parade of Features, Part Two: Get Organized on Android","Description":"<p>Learn how to maximize Evernote for Android with these tips, tricks, and walk-throughs of all the features available to you.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://evernote.com/blog/get-organized-on-android/\">Evernote&#8217;s Parade of Features, Part Two: Get Organized on Android</a> appeared first on <a rel=\"nofollow\" href=\"https://evernote.com/blog\"></a>.</p>\n","PublishedAt":"2022-12-05 14:30:00+00:00","OriginURL":"https://evernote.com/blog/get-organized-on-android/","SourceName":"Evernote"}},{"node":{"ID":2451,"Title":"From Hunger to Hedgehogs: Clouderans Drive Impact in 2022 Through Global Volunteering Efforts","Description":"<p>We summarize Cloudera Volunteer Spotlights from 2022</p>\n<p>The post <a rel=\"nofollow\" href=\"https://blog.cloudera.com/from-hunger-to-hedgehogs-clouderans-drive-impact-in-2022-through-global-volunteering-efforts/\">From Hunger to Hedgehogs: Clouderans Drive Impact in 2022 Through Global Volunteering Efforts</a> appeared first on <a rel=\"nofollow\" href=\"https://blog.cloudera.com\">Cloudera Blog</a>.</p>\n","PublishedAt":"2022-12-05 14:10:35+00:00","OriginURL":"https://blog.cloudera.com/from-hunger-to-hedgehogs-clouderans-drive-impact-in-2022-through-global-volunteering-efforts/","SourceName":"Cloudera"}},{"node":{"ID":2450,"Title":"Blog: Forensic container checkpointing in Kubernetes","Description":"<p><strong>Authors:</strong> Adrian Reber (Red Hat)</p>\n<p>Forensic container checkpointing is based on <a href=\"https://criu.org/\">Checkpoint/Restore In\nUserspace</a> (CRIU) and allows the creation of stateful copies\nof a running container without the container knowing that it is being\ncheckpointed. The copy of the container can be analyzed and restored in a\nsandbox environment multiple times without the original container being aware\nof it. Forensic container checkpointing was introduced as an alpha feature in\nKubernetes v1.25.</p>\n<h2 id=\"how-does-it-work\">How does it work?</h2>\n<p>With the help of CRIU it is possible to checkpoint and restore containers.\nCRIU is integrated in runc, crun, CRI-O and containerd and forensic container\ncheckpointing as implemented in Kubernetes uses these existing CRIU\nintegrations.</p>\n<h2 id=\"why-is-it-important\">Why is it important?</h2>\n<p>With the help of CRIU and the corresponding integrations it is possible to get\nall information and state about a running container on disk for later forensic\nanalysis. Forensic analysis might be important to inspect a suspicious\ncontainer without stopping or influencing it. If the container is really under\nattack, the attacker might detect attempts to inspect the container. Taking a\ncheckpoint and analysing the container in a sandboxed environment offers the\npossibility to inspect the container without the original container and maybe\nattacker being aware of the inspection.</p>\n<p>In addition to the forensic container checkpointing use case, it is also\npossible to migrate a container from one node to another node without loosing\nthe internal state. Especially for stateful containers with long initialization\ntimes restoring from a checkpoint might save time after a reboot or enable much\nfaster startup times.</p>\n<h2 id=\"how-do-i-use-container-checkpointing\">How do I use container checkpointing?</h2>\n<p>The feature is behind a <a href=\"https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/\">feature gate</a>, so\nmake sure to enable the <code>ContainerCheckpoint</code> gate before you can use the new\nfeature.</p>\n<p>The runtime must also support container checkpointing:</p>\n<ul>\n<li>\n<p>containerd: support is currently under discussion. See containerd\npull request <a href=\"https://github.com/containerd/containerd/pull/6965\">#6965</a> for more details.</p>\n</li>\n<li>\n<p>CRI-O: v1.25 has support for forensic container checkpointing.</p>\n</li>\n</ul>\n<h3 id=\"usage-example-with-cri-o\">Usage example with CRI-O</h3>\n<p>To use forensic container checkpointing in combination with CRI-O, the runtime\nneeds to be started with the command-line option <code>--enable-criu-support=true</code>.\nFor Kubernetes, you need to run your cluster with the <code>ContainerCheckpoint</code>\nfeature gate enabled. As the checkpointing functionality is provided by CRIU it\nis also necessary to install CRIU. Usually runc or crun depend on CRIU and\ntherefore it is installed automatically.</p>\n<p>It is also important to mention that at the time of writing the checkpointing functionality is\nto be considered as an alpha level feature in CRI-O and Kubernetes and the\nsecurity implications are still under consideration.</p>\n<p>Once containers and pods are running it is possible to create a checkpoint.\n<a href=\"https://kubernetes.io/docs/reference/node/kubelet-checkpoint-api/\">Checkpointing</a>\nis currently only exposed on the <strong>kubelet</strong> level. To checkpoint a container,\nyou can run <code>curl</code> on the node where that container is running, and trigger a\ncheckpoint:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>curl -X POST <span style=\"color:#b44\">&#34;https://localhost:10250/checkpoint/namespace/podId/container&#34;</span>\n</span></span></code></pre></div><p>For a container named <em>counter</em> in a pod named <em>counters</em> in a namespace named\n<em>default</em> the <strong>kubelet</strong> API endpoint is reachable at:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>curl -X POST <span style=\"color:#b44\">&#34;https://localhost:10250/checkpoint/default/counters/counter&#34;</span>\n</span></span></code></pre></div><p>For completeness the following <code>curl</code> command-line options are necessary to\nhave <code>curl</code> accept the <em>kubelet</em>'s self signed certificate and authorize the\nuse of the <em>kubelet</em> <code>checkpoint</code> API:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>--insecure --cert /var/run/kubernetes/client-admin.crt --key /var/run/kubernetes/client-admin.key\n</span></span></code></pre></div><p>Triggering this <strong>kubelet</strong> API will request the creation of a checkpoint from\nCRI-O. CRI-O requests a checkpoint from your low-level runtime (for example,\n<code>runc</code>). Seeing that request, <code>runc</code> invokes the <code>criu</code> tool\nto do the actual checkpointing.</p>\n<p>Once the checkpointing has finished the checkpoint should be available at\n<code>/var/lib/kubelet/checkpoints/checkpoint-&lt;pod-name&gt;_&lt;namespace-name&gt;-&lt;container-name&gt;-&lt;timestamp&gt;.tar</code></p>\n<p>You could then use that tar archive to restore the container somewhere else.</p>\n<h3 id=\"restore-checkpointed-container-standalone\">Restore a checkpointed container outside of Kubernetes (with CRI-O)</h3>\n<p>With the checkpoint tar archive it is possible to restore the container outside\nof Kubernetes in a sandboxed instance of CRI-O. For better user experience\nduring restore, I recommend that you use the latest version of CRI-O from the\n<em>main</em> CRI-O GitHub branch. If you're using CRI-O v1.25, you'll need to\nmanually create certain directories Kubernetes would create before starting the\ncontainer.</p>\n<p>The first step to restore a container outside of Kubernetes is to create a pod sandbox\nusing <em>crictl</em>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>crictl runp pod-config.json\n</span></span></code></pre></div><p>Then you can restore the previously checkpointed container into the newly created pod sandbox:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>crictl create &lt;POD_ID&gt; container-config.json pod-config.json\n</span></span></code></pre></div><p>Instead of specifying a container image in a registry in <code>container-config.json</code>\nyou need to specify the path to the checkpoint archive that you created earlier:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;metadata&#34;</span>: {\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;name&#34;</span>: <span style=\"color:#b44\">&#34;counter&#34;</span>\n</span></span><span style=\"display:flex;\"><span> },\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;image&#34;</span>:{\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;image&#34;</span>: <span style=\"color:#b44\">&#34;/var/lib/kubelet/checkpoints/&lt;checkpoint-archive&gt;.tar&#34;</span>\n</span></span><span style=\"display:flex;\"><span> }\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div><p>Next, run <code>crictl start &lt;CONTAINER_ID&gt;</code> to start that container, and then a\ncopy of the previously checkpointed container should be running.</p>\n<h3 id=\"restore-checkpointed-container-k8s\">Restore a checkpointed container within of Kubernetes</h3>\n<p>To restore the previously checkpointed container directly in Kubernetes it is\nnecessary to convert the checkpoint archive into an image that can be pushed to\na registry.</p>\n<p>One possible way to convert the local checkpoint archive consists of the\nfollowing steps with the help of <a href=\"https://buildah.io/\">buildah</a>:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span><span style=\"color:#b8860b\">newcontainer</span><span style=\"color:#666\">=</span><span style=\"color:#a2f;font-weight:bold\">$(</span>buildah from scratch<span style=\"color:#a2f;font-weight:bold\">)</span>\n</span></span><span style=\"display:flex;\"><span>buildah add <span style=\"color:#b8860b\">$newcontainer</span> /var/lib/kubelet/checkpoints/checkpoint-&lt;pod-name&gt;_&lt;namespace-name&gt;-&lt;container-name&gt;-&lt;timestamp&gt;.tar /\n</span></span><span style=\"display:flex;\"><span>buildah config --annotation<span style=\"color:#666\">=</span>io.kubernetes.cri-o.annotations.checkpoint.name<span style=\"color:#666\">=</span>&lt;container-name&gt; <span style=\"color:#b8860b\">$newcontainer</span>\n</span></span><span style=\"display:flex;\"><span>buildah commit <span style=\"color:#b8860b\">$newcontainer</span> checkpoint-image:latest\n</span></span><span style=\"display:flex;\"><span>buildah rm <span style=\"color:#b8860b\">$newcontainer</span>\n</span></span></code></pre></div><p>The resulting image is not standardized and only works in combination with\nCRI-O. Please consider this image format as pre-alpha. There are ongoing\n<a href=\"https://github.com/opencontainers/image-spec/issues/962\">discussions</a> to standardize the format of checkpoint\nimages like this. Important to remember is that this not yet standardized image\nformat only works if CRI-O has been started with <code>--enable-criu-support=true</code>.\nThe security implications of starting CRI-O with CRIU support are not yet clear\nand therefore the functionality as well as the image format should be used with\ncare.</p>\n<p>Now, you'll need to push that image to a container image registry. For example:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-shell\" data-lang=\"shell\"><span style=\"display:flex;\"><span>buildah push localhost/checkpoint-image:latest container-image-registry.example/user/checkpoint-image:latest\n</span></span></code></pre></div><p>To restore this checkpoint image (<code>container-image-registry.example/user/checkpoint-image:latest</code>), the\nimage needs to be listed in the specification for a Pod. Here's an example\nmanifest:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Pod<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">namePrefix</span>:<span style=\"color:#bbb\"> </span>example-<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">containers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>&lt;container-name&gt;<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">image</span>:<span style=\"color:#bbb\"> </span>container-image-registry.example/user/checkpoint-image:latest<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">nodeName</span>:<span style=\"color:#bbb\"> </span>&lt;destination-node&gt;<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>Kubernetes schedules the new Pod onto a node. The kubelet on that node\ninstructs the container runtime (CRI-O in this example) to create and start a\ncontainer based on an image specified as <code>registry/user/checkpoint-image:latest</code>.\nCRI-O detects that <code>registry/user/checkpoint-image:latest</code>\nis a reference to checkpoint data rather than a container image. Then,\ninstead of the usual steps to create and start a container,\nCRI-O fetches the checkpoint data and restores the container from that\nspecified checkpoint.</p>\n<p>The application in that Pod would continue running as if the checkpoint had not been taken;\nwithin the container, the application looks and behaves like any other container that had been\nstarted normally and not restored from a checkpoint.</p>\n<p>With these steps, it is possible to replace a Pod running on one node\nwith a new equivalent Pod that is running on a different node,\nand without losing the state of the containers in that Pod.</p>\n<h2 id=\"how-do-i-get-involved\">How do I get involved?</h2>\n<p>You can reach SIG Node by several means:</p>\n<ul>\n<li>Slack: <a href=\"https://kubernetes.slack.com/messages/sig-node\">#sig-node</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/kubernetes-sig-node\">Mailing list</a></li>\n</ul>","PublishedAt":"2022-12-05 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2022/12/05/forensic-container-checkpointing-alpha/","SourceName":"Kubernetes"}},{"node":{"ID":2452,"Title":"5 questions public sector leaders should be asking about their data","Description":"","PublishedAt":"2022-12-05 00:00:00+00:00","OriginURL":"https://www.elastic.co/blog/5-questions-public-sector-leaders-should-be-asking-about-their-data","SourceName":"Elastic"}},{"node":{"ID":2448,"Title":"Capturing and applying knowledge through a PKM practice","Description":"<p>Summary This post is for Day 4 of Mercari Advent Calendar 2022, brought to you by @josh from the Engineering Office. Many engineers and engineering managers at Mercari are big advocates of personal knowledge management (PKM), and they enjoy capturing, organizing, and sharing the knowledge they have gained through their work or personal lives. We [&hellip;]</p>\n","PublishedAt":"2022-12-04 11:00:50+00:00","OriginURL":"https://engineering.mercari.com/en/blog/entry/20221202-capturing-and-applying-knowledge-through-a-pkm-practice/","SourceName":"Mercari"}},{"node":{"ID":2449,"Title":"Ready-to-go sample data pipelines with Dataflow","Description":"","PublishedAt":"2022-12-04 00:10:21+00:00","OriginURL":"https://netflixtechblog.com/ready-to-go-sample-data-pipelines-with-dataflow-17440a9e141d?source=rss----2615bd06b42e---4","SourceName":"Netflix"}},{"node":{"ID":2447,"Title":"Improving the Player on Android","Description":"","PublishedAt":"2022-12-02 20:15:53+00:00","OriginURL":"https://medium.com/pinterest-engineering/improving-the-player-on-android-8b7faf9009cf?source=rss----4c5a5f6279b6---4","SourceName":"Pinterest"}},{"node":{"ID":2446,"Title":"Evernote’s Gift Guide for Partners","Description":"<p>Blog art by&#160;From Pen to Paper Studio. It&#8217;s rapidly approaching that time of year again, and if you&#8217;re one of the many folks out there with a significant other at the top of your gift-giving list, we&#8217;ve got your back! Power tip: Keep track of gift ideas throughout the year with the Gift Giving template and our Digital Friend profile, which can easily be customized and expanded upon to cover</p>\n<p><a class=\"continue-reading\" href=\"https://evernote.com/blog/gift-guide-for-partners/\">Continue reading...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://evernote.com/blog/gift-guide-for-partners/\">Evernote&#8217;s Gift Guide for Partners</a> appeared first on <a rel=\"nofollow\" href=\"https://evernote.com/blog\"></a>.</p>\n","PublishedAt":"2022-12-02 14:30:00+00:00","OriginURL":"https://evernote.com/blog/gift-guide-for-partners/","SourceName":"Evernote"}},{"node":{"ID":2445,"Title":"The Overflow #154: The state of the cloud in 2022","Description":"<p>Developing in VR, bitcoin over Tor, and data structures in JS</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2022/12/02/the-overflow-154-the-state-of-the-cloud-in-2022/\">The Overflow #154: The state of the cloud in 2022 </a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2022-12-02 14:00:00+00:00","OriginURL":"https://stackoverflow.blog/2022/12/02/the-overflow-154-the-state-of-the-cloud-in-2022/","SourceName":"Stack Overflow"}},{"node":{"ID":2444,"Title":"Taking stock of crypto’s crash","Description":"<p>Last one to leave turns off the microservices.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2022/12/02/taking-stock-of-cryptos-crash/\">Taking stock of crypto&#8217;s crash</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n","PublishedAt":"2022-12-02 05:40:00+00:00","OriginURL":"https://stackoverflow.blog/2022/12/02/taking-stock-of-cryptos-crash/","SourceName":"Stack Overflow"}},{"node":{"ID":2443,"Title":"Blog: Finding suspicious syscalls with the seccomp notifier","Description":"<p><strong>Authors:</strong> Sascha Grunert</p>\n<p>Debugging software in production is one of the biggest challenges we have to\nface in our containerized environments. Being able to understand the impact of\nthe available security options, especially when it comes to configuring our\ndeployments, is one of the key aspects to make the default security in\nKubernetes stronger. We have all those logging, tracing and metrics data already\nat hand, but how do we assemble the information they provide into something\nhuman readable and actionable?</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Seccomp\">Seccomp</a> is one of the standard mechanisms to protect a Linux based\nKubernetes application from malicious actions by interfering with its <a href=\"https://en.wikipedia.org/wiki/Syscall\">system\ncalls</a>. This allows us to restrict the application to a defined set of\nactionable items, like modifying files or responding to HTTP requests. Linking\nthe knowledge of which set of syscalls is required to, for example, modify a\nlocal file, to the actual source code is in the same way non-trivial. Seccomp\nprofiles for Kubernetes have to be written in <a href=\"https://www.json.org\">JSON</a> and can be understood\nas an architecture specific allow-list with superpowers, for example:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-json\" data-lang=\"json\"><span style=\"display:flex;\"><span>{\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;defaultAction&#34;</span>: <span style=\"color:#b44\">&#34;SCMP_ACT_ERRNO&#34;</span>,\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;defaultErrnoRet&#34;</span>: <span style=\"color:#666\">38</span>,\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;defaultErrno&#34;</span>: <span style=\"color:#b44\">&#34;ENOSYS&#34;</span>,\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;syscalls&#34;</span>: [\n</span></span><span style=\"display:flex;\"><span> {\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;names&#34;</span>: [<span style=\"color:#b44\">&#34;chmod&#34;</span>, <span style=\"color:#b44\">&#34;chown&#34;</span>, <span style=\"color:#b44\">&#34;open&#34;</span>, <span style=\"color:#b44\">&#34;write&#34;</span>],\n</span></span><span style=\"display:flex;\"><span> <span style=\"color:#008000;font-weight:bold\">&#34;action&#34;</span>: <span style=\"color:#b44\">&#34;SCMP_ACT_ALLOW&#34;</span>\n</span></span><span style=\"display:flex;\"><span> }\n</span></span><span style=\"display:flex;\"><span> ]\n</span></span><span style=\"display:flex;\"><span>}\n</span></span></code></pre></div><p>The above profile errors by default specifying the <code>defaultAction</code> of\n<code>SCMP_ACT_ERRNO</code>. This means we have to allow a set of syscalls via\n<code>SCMP_ACT_ALLOW</code>, otherwise the application would not be able to do anything at\nall. Okay cool, for being able to allow file operations, all we have to do is\nadding a bunch of file specific syscalls like <code>open</code> or <code>write</code>, and probably\nalso being able to change the permissions via <code>chmod</code> and <code>chown</code>, right?\nBasically yes, but there are issues with the simplicity of that approach:</p>\n<p>Seccomp profiles need to include the minimum set of syscalls required to start\nthe application. This also includes some syscalls from the lower level\n<a href=\"https://opencontainers.org\">Open Container Initiative (OCI)</a> container runtime, for example\n<a href=\"https://github.com/opencontainers/runc\">runc</a> or <a href=\"https://github.com/containers/crun\">crun</a>. Beside that, we can only guarantee the required\nsyscalls for a very specific version of the runtimes and our application,\nbecause the code parts can change between releases. The same applies to the\ntermination of the application as well as the target architecture we're\ndeploying on. Features like executing commands within containers also require\nanother subset of syscalls. Not to mention that there are multiple versions for\nsyscalls doing slightly different things and the seccomp profiles are able to\nmodify their arguments. It's also not always clearly visible to the developers\nwhich syscalls are used by their own written code parts, because they rely on\nprogramming language abstractions or frameworks.</p>\n<p><em>How can we know which syscalls are even required then? Who should create and\nmaintain those profiles during its development life-cycle?</em></p>\n<p>Well, recording and distributing seccomp profiles is one of the problem domains\nof the <a href=\"https://github.com/kubernetes-sigs/security-profiles-operator\">Security Profiles Operator</a>, which is already solving that. The\noperator is able to record <a href=\"https://en.wikipedia.org/wiki/Seccomp\">seccomp</a>, <a href=\"https://en.wikipedia.org/wiki/Security-Enhanced_Linux\">SELinux</a> and even\n<a href=\"https://en.wikipedia.org/wiki/AppArmor\">AppArmor</a> profiles into a <a href=\"https://k8s.io/docs/concepts/extend-kubernetes/api-extension/custom-resources\">Custom Resource Definition (CRD)</a>,\nreconciles them to each node and makes them available for usage.</p>\n<p>The biggest challenge about creating security profiles is to catch all code\npaths which execute syscalls. We could achieve that by having <strong>100%</strong> logical\ncoverage of the application when running an end-to-end test suite. You get the\nproblem with the previous statement: It's too idealistic to be ever fulfilled,\neven without taking all the moving parts during application development and\ndeployment into account.</p>\n<p>Missing a syscall in the seccomp profiles' allow list can have tremendously\nnegative impact on the application. It's not only that we can encounter crashes,\nwhich are trivially detectable. It can also happen that they slightly change\nlogical paths, change the business logic, make parts of the application\nunusable, slow down performance or even expose security vulnerabilities. We're\nsimply not able to see the whole impact of that, especially because blocked\nsyscalls via <code>SCMP_ACT_ERRNO</code> do not provide any additional <a href=\"https://linux.die.net/man/8/auditd\">audit</a>\nlogging on the system.</p>\n<p>Does that mean we're lost? Is it just not realistic to dream about a Kubernetes\nwhere <a href=\"https://github.com/kubernetes/enhancements/issues/2413\">everyone uses the default seccomp profile</a>? Should we\nstop striving towards maximum security in Kubernetes and accept that it's not\nmeant to be secure by default?</p>\n<p><strong>Definitely not.</strong> Technology evolves over time and there are many folks\nworking behind the scenes of Kubernetes to indirectly deliver features to\naddress such problems. One of the mentioned features is the <em>seccomp notifier</em>,\nwhich can be used to find suspicious syscalls in Kubernetes.</p>\n<p>The seccomp notify feature consists of a set of changes introduced in Linux 5.9.\nIt makes the kernel capable of communicating seccomp related events to the user\nspace. That allows applications to act based on the syscalls and opens for a\nwide range of possible use cases. We not only need the right kernel version,\nbut also at least runc v1.1.0 (or crun v0.19) to be able to make the notifier\nwork at all. The Kubernetes container runtime <a href=\"https://cri-o.io\">CRI-O</a> gets <a href=\"https://github.com/cri-o/cri-o/pull/6120\">support for\nthe seccomp notifier in v1.26.0</a>. The new feature allows us to\nidentify possibly malicious syscalls in our application, and therefore makes it\npossible to verify profiles for consistency and completeness. Let's give that a\ntry.</p>\n<p>First of all we need to run the latest <code>main</code> version of CRI-O, because v1.26.0\nhas not been released yet at time of writing. You can do that by either\ncompiling it from the <a href=\"https://github.com/cri-o/cri-o/blob/main/install.md#build-and-install-cri-o-from-source\">source code</a> or by using the pre-built binary\nbundle via <a href=\"https://github.com/cri-o/cri-o#installing-cri-o\">the get-script</a>. The seccomp notifier feature of CRI-O is\nguarded by an annotation, which has to be explicitly allowed, for example by\nusing a configuration drop-in like this:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> cat /etc/crio/crio.conf.d/02-runtimes.conf\n</span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-toml\" data-lang=\"toml\"><span style=\"display:flex;\"><span>[crio.runtime]\n</span></span><span style=\"display:flex;\"><span>default_runtime = <span style=\"color:#b44\">&#34;runc&#34;</span>\n</span></span><span style=\"display:flex;\"><span>\n</span></span><span style=\"display:flex;\"><span>[crio.runtime.runtimes.runc]\n</span></span><span style=\"display:flex;\"><span>allowed_annotations = [ <span style=\"color:#b44\">&#34;io.kubernetes.cri-o.seccompNotifierAction&#34;</span> ]\n</span></span></code></pre></div><p>If CRI-O is up and running, then it should indicate that the seccomp notifier is\navailable as well:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> sudo ./bin/crio --enable-metrics\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">…\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">INFO[…] Starting seccomp notifier watcher\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">INFO[…] Serving metrics on :9090 via HTTP\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">…\n</span></span></span></code></pre></div><p>We also enable the metrics, because they provide additional telemetry data about\nthe notifier. Now we need a running Kubernetes cluster for demonstration\npurposes. For this demo, we mainly stick to the\n<a href=\"https://github.com/cri-o/cri-o#running-kubernetes-with-cri-o\"><code>hack/local-up-cluster.sh</code></a> approach to locally spawn a single node\nKubernetes cluster.</p>\n<p>If everything is up and running, then we would have to define a seccomp profile\nfor testing purposes. But we do not have to create our own, we can just use the\n<code>RuntimeDefault</code> profile which gets shipped with each container runtime. For\nexample the <code>RuntimeDefault</code> profile for CRI-O can be found in the\n<a href=\"https://github.com/containers/common/blob/afff1d6/pkg/seccomp/seccomp.json\">containers/common</a> library.</p>\n<p>Now we need a test container, which can be a simple <a href=\"https://www.nginx.com\">nginx</a> pod like\nthis:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-yaml\" data-lang=\"yaml\"><span style=\"display:flex;\"><span><span style=\"color:#008000;font-weight:bold\">apiVersion</span>:<span style=\"color:#bbb\"> </span>v1<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">kind</span>:<span style=\"color:#bbb\"> </span>Pod<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">metadata</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>nginx<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">annotations</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">io.kubernetes.cri-o.seccompNotifierAction</span>:<span style=\"color:#bbb\"> </span><span style=\"color:#b44\">&#34;stop&#34;</span><span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"></span><span style=\"color:#008000;font-weight:bold\">spec</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">restartPolicy</span>:<span style=\"color:#bbb\"> </span>Never<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">containers</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span>- <span style=\"color:#008000;font-weight:bold\">name</span>:<span style=\"color:#bbb\"> </span>nginx<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">image</span>:<span style=\"color:#bbb\"> </span>nginx:1.23.2<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">securityContext</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">seccompProfile</span>:<span style=\"color:#bbb\">\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#bbb\"> </span><span style=\"color:#008000;font-weight:bold\">type</span>:<span style=\"color:#bbb\"> </span>RuntimeDefault<span style=\"color:#bbb\">\n</span></span></span></code></pre></div><p>Please note the annotation <code>io.kubernetes.cri-o.seccompNotifierAction</code>, which\nenables the seccomp notifier for this workload. The value of the annotation can\nbe either <code>stop</code> for stopping the workload or anything else for doing nothing\nelse than logging and throwing metrics. Because of the termination we also use\nthe <code>restartPolicy: Never</code> to not automatically recreate the container on\nfailure.</p>\n<p>Let's run the pod and check if it works:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl apply -f nginx.yaml\n</span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl get pods -o wide\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">nginx 1/1 Running 0 3m39s 10.85.0.3 127.0.0.1 &lt;none&gt; &lt;none&gt;\n</span></span></span></code></pre></div><p>We can also test if the web server itself works as intended:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> curl 10.85.0.3\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">&lt;!DOCTYPE html&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">&lt;html&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">&lt;head&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">…\n</span></span></span></code></pre></div><p>While everything is now up and running, CRI-O also indicates that it has started\nthe seccomp notifier:</p>\n<pre tabindex=\"0\"><code>…\nINFO[…] Injecting seccomp notifier into seccomp profile of container 662a3bb0fdc7dd1bf5a88a8aa8ef9eba6296b593146d988b4a9b85822422febb\n…\n</code></pre><p>If we would now run a forbidden syscall inside of the container, then we can\nexpect that the workload gets terminated. Let's give that a try by running\n<code>chroot</code> in the containers namespaces:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl <span style=\"color:#a2f\">exec</span> -it nginx -- bash\n</span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#888\">root@nginx:/# chroot /tmp\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">chroot: cannot change root directory to &#39;/tmp&#39;: Function not implemented\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">root@nginx:/# command terminated with exit code 137\n</span></span></span></code></pre></div><p>The exec session got terminated, so it looks like the container is not running\nany more:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl get pods\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">NAME READY STATUS RESTARTS AGE\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">nginx 0/1 seccomp killed 0 96s\n</span></span></span></code></pre></div><p>Alright, the container got killed by seccomp, do we get any more information\nabout what was going on?</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl describe pod nginx\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">Name: nginx\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">…\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">Containers:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> nginx:\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> …\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> State: Terminated\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Reason: seccomp killed\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Message: Used forbidden syscalls: chroot (1x)\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Exit Code: 137\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Started: Mon, 14 Nov 2022 12:19:46 +0100\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Finished: Mon, 14 Nov 2022 12:20:26 +0100\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">…\n</span></span></span></code></pre></div><p>The seccomp notifier feature of CRI-O correctly set the termination reason and\nmessage, including which forbidden syscall has been used how often (<code>1x</code>). How\noften? Yes, the notifier gives the application up to 5 seconds after the last\nseen syscall until it starts the termination. This means that it's possible to\ncatch multiple forbidden syscalls within one test by avoiding time-consuming\ntrial and errors.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl <span style=\"color:#a2f\">exec</span> -it nginx -- chroot /tmp\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">chroot: cannot change root directory to &#39;/tmp&#39;: Function not implemented\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">command terminated with exit code 125\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl <span style=\"color:#a2f\">exec</span> -it nginx -- chroot /tmp\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">chroot: cannot change root directory to &#39;/tmp&#39;: Function not implemented\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">command terminated with exit code 125\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl <span style=\"color:#a2f\">exec</span> -it nginx -- swapoff -a\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">command terminated with exit code 32\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"></span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl <span style=\"color:#a2f\">exec</span> -it nginx -- swapoff -a\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">command terminated with exit code 32\n</span></span></span></code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> kubectl describe pod nginx | grep Message\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\"> Message: Used forbidden syscalls: chroot (2x), swapoff (2x)\n</span></span></span></code></pre></div><p>The CRI-O metrics will also reflect that:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"><code class=\"language-console\" data-lang=\"console\"><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">&gt;</span> curl -sf localhost:9090/metrics | grep seccomp_notifier\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">#</span> HELP container_runtime_crio_containers_seccomp_notifier_count_total Amount of containers stopped because they used a forbidden syscalls by their name\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#000080;font-weight:bold\">#</span> TYPE container_runtime_crio_containers_seccomp_notifier_count_total counter\n</span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">container_runtime_crio_containers_seccomp_notifier_count_total{name=&#34;…&#34;,syscalls=&#34;chroot (1x)&#34;} 1\n</span></span></span><span style=\"display:flex;\"><span><span style=\"color:#888\">container_runtime_crio_containers_seccomp_notifier_count_total{name=&#34;…&#34;,syscalls=&#34;chroot (2x), swapoff (2x)&#34;} 1\n</span></span></span></code></pre></div><p>How does it work in detail? CRI-O uses the chosen seccomp profile and injects\nthe action <code>SCMP_ACT_NOTIFY</code> instead of <code>SCMP_ACT_ERRNO</code>, <code>SCMP_ACT_KILL</code>,\n<code>SCMP_ACT_KILL_PROCESS</code> or <code>SCMP_ACT_KILL_THREAD</code>. It also sets a local listener\npath which will be used by the lower level OCI runtime (runc or crun) to create\nthe seccomp notifier socket. If the connection between the socket and CRI-O has\nbeen established, then CRI-O will receive notifications for each syscall being\ninterfered by seccomp. CRI-O stores the syscalls, allows a bit of timeout for\nthem to arrive and then terminates the container if the chosen\n<code>seccompNotifierAction=stop</code>. Unfortunately, the seccomp notifier is not able to\nnotify on the <code>defaultAction</code>, which means that it's required to have\na list of syscalls to test for custom profiles. CRI-O does also state that\nlimitation in the logs:</p>\n<pre tabindex=\"0\"><code class=\"language-log\" data-lang=\"log\">INFO[…] The seccomp profile default action SCMP_ACT_ERRNO cannot be overridden to SCMP_ACT_NOTIFY,\nwhich means that syscalls using that default action can&#39;t be traced by the notifier\n</code></pre><p>As a conclusion, the seccomp notifier implementation in CRI-O can be used to\nverify if your applications behave correctly when using <code>RuntimeDefault</code> or any\nother custom profile. Alerts can be created based on the metrics to create long\nrunning test scenarios around that feature. Making seccomp understandable and\neasier to use will increase adoption as well as help us to move towards a more\nsecure Kubernetes by default!</p>\n<p>Thank you for reading this blog post. If you'd like to read more about the\nseccomp notifier, checkout the following resources:</p>\n<ul>\n<li>The Seccomp Notifier - New Frontiers in Unprivileged Container Development: <a href=\"https://brauner.io/2020/07/23/seccomp-notify.html\">https://brauner.io/2020/07/23/seccomp-notify.html</a></li>\n<li>Bringing Seccomp Notify to Runc and Kubernetes: <a href=\"https://kinvolk.io/blog/2022/03/bringing-seccomp-notify-to-runc-and-kubernetes\">https://kinvolk.io/blog/2022/03/bringing-seccomp-notify-to-runc-and-kubernetes</a></li>\n<li>Seccomp Agent reference implementation: <a href=\"https://github.com/opencontainers/runc/tree/6b16d00/contrib/cmd/seccompagent\">https://github.com/opencontainers/runc/tree/6b16d00/contrib/cmd/seccompagent</a></li>\n</ul>","PublishedAt":"2022-12-02 00:00:00+00:00","OriginURL":"https://kubernetes.io/blog/2022/12/02/seccomp-notifier/","SourceName":"Kubernetes"}},{"node":{"ID":2440,"Title":"New – Process PDFs, Word Documents, and Images with Amazon Comprehend for IDP","Description":"Today we are announcing a new Amazon Comprehend feature for intelligent document processing (IDP). This feature allows you to classify and extract entities from PDF documents, Microsoft Word files, and images directly from Amazon Comprehend without you needing to extract the text first. Many customers need to process documents that have a semi-structured format, like […]","PublishedAt":"2022-12-01 17:51:25+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/now-process-pdfs-word-documents-and-images-with-amazon-comprehend-for-idp/","SourceName":"AWS"}},{"node":{"ID":2441,"Title":"Introducing Amazon GameLift Anywhere – Run Your Game Servers on Your Own Infrastructure","Description":"In 2016, we launched Amazon GameLift, a dedicated hosting solution that securely deploys and automatically scales fleets of session-based multiplayer game servers to meet worldwide player demand. With Amazon GameLift, you can create and upload a game server build once, replicate, and then deploy across multiple AWS Regions and AWS Local Zones to reach your […]","PublishedAt":"2022-12-01 17:49:17+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/introducing-amazon-gamelift-anywhere-run-your-game-servers-on-your-own-infrastructure/","SourceName":"AWS"}},{"node":{"ID":2437,"Title":"Announcing Amazon CodeCatalyst (preview), a Unified Software Development Service","Description":"Today, we announced the preview release of Amazon CodeCatalyst. A unified software development and delivery service, Amazon CodeCatalyst enables software development teams to quickly and easily plan, develop, collaborate on, build, and deliver applications on AWS, reducing friction throughout the development lifecycle. In my time as a developer the biggest excitement—besides shipping software to users—was […]","PublishedAt":"2022-12-01 17:31:09+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/announcing-amazon-codecatalyst-preview-a-unified-software-development-service/","SourceName":"AWS"}},{"node":{"ID":2438,"Title":"New — Create Point-to-Point Integrations Between Event Producers and Consumers with Amazon EventBridge Pipes","Description":"It is increasingly common to use multiple cloud services as building blocks to assemble a modern event-driven application. Using purpose-built services to accomplish a particular task ensures developers get the best capabilities for their use case. However, communication between services can be difficult if they use different technologies to communicate, meaning that you need to […]","PublishedAt":"2022-12-01 17:08:56+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/new-create-point-to-point-integrations-between-event-producers-and-consumers-with-amazon-eventbridge-pipes/","SourceName":"AWS"}},{"node":{"ID":2439,"Title":"Step Functions Distributed Map – A Serverless Solution for Large-Scale Parallel Data Processing","Description":"I am excited to announce the availability of a distributed map for AWS Step Functions. This flow extends support for orchestrating large-scale parallel workloads such as the on-demand processing of semi-structured data. Step Function’s map state executes the same processing steps for multiple entries in a dataset. The existing map state is limited to 40 […]","PublishedAt":"2022-12-01 16:58:32+00:00","OriginURL":"https://aws.amazon.com/blogs/aws/step-functions-distributed-map-a-serverless-solution-for-large-scale-parallel-data-processing/","SourceName":"AWS"}},{"node":{"ID":2436,"Title":"3 tips for effective developer security training","Description":"In this article, we’ll dig into three tips that can make your developer security education program better and ensure that you’re reaping all the advantages of the golden era of application security.","PublishedAt":"2022-12-01 15:19:05+00:00","OriginURL":"https://snyk.io/blog/3-tips-for-developer-security-training/","SourceName":"Snyk"}}]}},"pageContext":{"limit":30,"skip":3300,"numPages":193,"currentPage":111}},"staticQueryHashes":["3649515864"]}