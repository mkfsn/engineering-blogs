{"version":3,"file":"component---src-templates-blog-list-tsx-fb7fbbf614fe90d73dc0.js","mappings":"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","sources":["webpack://engineering-blogs/./src/components/BlogPostExcerpt.tsx","webpack://engineering-blogs/./src/utils/strings.ts","webpack://engineering-blogs/./src/components/BlogPostList.tsx","webpack://engineering-blogs/./src/components/PageButton.tsx","webpack://engineering-blogs/./src/components/PageButtonList.tsx","webpack://engineering-blogs/./src/templates/BlogList.tsx"],"sourcesContent":["import React from \"react\";\nimport {Link} from \"gatsby\";\nimport {normalizeSource} from \"../utils/strings\";\n\ntype Props = {\n    data: any;\n};\n\nexport default function BlogPostExcerpt({data}: Props) {\n    return (\n        <tr>\n            <td><a target=\"_blank\" href={data.OriginURL}>{ data.Title }</a></td>\n            <td>{ data.PublishedAt }</td>\n            <td>\n                <Link to={`/source/${normalizeSource(data.SourceName)}`}>\n                    { data.SourceName }\n                </Link>\n            </td>\n        </tr>\n    );\n}\n","export function normalizeSource(name: string): string {\n    return name.replace(\" \", \"-\").toLowerCase();\n}\n","import React from \"react\";\nimport BlogPostExcerpt from \"./BlogPostExcerpt\";\n\ntype Props = {\n    posts: Array<{node: any}>;\n};\n\nclass BlogPostList extends React.Component<Props> {\n    render() {\n        return (\n            <table className=\"table is-fullwidth\">\n                <thead>\n                <tr>\n                    <th>Title</th>\n                    <th>Publish Date</th>\n                    <th>Source</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    this.props.posts.map(({node}) => ( <BlogPostExcerpt key={`track-${node.ID}`} data={node} /> ))\n                }\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default BlogPostList;\n","import React from \"react\";\nimport {Link} from \"gatsby\";\n\ntype PageProps = {\n    currentPage: number;\n    isActive: boolean;\n};\n\nclass PageButton extends React.Component<PageProps> {\n    render() {\n        return (\n            <Link\n                className={\"pagination-link\" + (this.props.isActive ? \" is-current\": \"\") }\n                aria-label={`Goto page ${this.props.currentPage}`}\n                to={this.props.currentPage === 1 ? \"/\" : `/page/${this.props.currentPage}`}\n                {...(this.props.isActive && { \"aria-current\": \"page\" })}\n            >\n                {this.props.currentPage}\n            </Link>\n        )\n    }\n}\n\nexport default PageButton;\n","import { Link } from \"gatsby\";\nimport React from \"react\";\n// @ts-ignore\nimport { SitePageContext } from \"./../graphql-schema\";\nimport PageButton from \"./PageButton\";\n\ntype Props = {\n    pageContext: SitePageContext;\n};\n\nclass PageButtonList extends React.Component<Props> {\n    render() {\n        const { numPages, currentPage } = this.props.pageContext;\n        if (!numPages || !currentPage) return null;\n\n        const isFirst = currentPage === 1;\n        const isLast = currentPage === numPages;\n        const prev = currentPage === 2 ? \"/\" : `/page/${currentPage - 1}`;\n        const next = currentPage + 1;\n\n        const start = getStart(currentPage, numPages);\n        const nums = Array.from({ length: 5 }).map((_, i) => i + start);\n\n        return (\n            <nav className=\"pagination is-centered\" role=\"navigation\" aria-label=\"pagination\">\n                {\n                    isFirst\n                        ? <a className=\"pagination-previous is-disabled\">Previous</a>\n                        : <Link className=\"pagination-previous\" to={prev} rel=\"prev\">Previous</Link>\n                }\n                {\n                    isLast\n                        ? <a className=\"pagination-next is-disabled\">Next</a>\n                        : <Link className=\"pagination-next\" to={`/page/${next}`} rel=\"next\">Next</Link>\n                }\n                <ul className=\"pagination-list\">\n                    <li><PageButton currentPage={1} isActive={currentPage === 1} /></li>\n                    {\n                        currentPage > 5 && (<li><span className=\"pagination-ellipsis\">&hellip;</span></li>)\n                    }\n                    {\n                        nums.map((num) => (\n                            <li key={num}><PageButton currentPage={num} isActive={currentPage === num} /></li>\n                        ))\n                    }\n                    {\n                        currentPage <= numPages-5 && (<li><span className=\"pagination-ellipsis\">&hellip;</span></li>)\n                    }\n                    <li><PageButton currentPage={numPages} isActive={currentPage === numPages} /></li>\n                </ul>\n            </nav>\n        );\n    }\n}\n\nfunction getStart(currentPage: number, numPages: number): number {\n    if (currentPage <= 5) {\n        return 2\n    } else if (currentPage > numPages - 5) {\n        return numPages - 5\n    }\n\n    return currentPage - 2\n}\n\nexport default PageButtonList;\n","import {graphql, PageProps} from \"gatsby\";\nimport React, { useEffect, useState } from \"react\";\n// @ts-ignore\nimport { BlogPaginatedQuery, SitePageContext } from \"../../graphql-schema\";\nimport BlogPostExcerpt from \"../components/BlogPostExcerpt\";\nimport Layout from \"../components/Layout\";\nimport PageButtonList from \"../components/PageButtonList\";\nimport BlogPostList from \"../components/BlogPostList\";\n// import useJsSearch from \"../util/useJsSearch\";\n\ntype Props = PageProps & {\n    data: BlogPaginatedQuery;\n    pageContext: SitePageContext;\n};\n\nexport default function BlogList({ data, pageContext, location }: Props) {\n    // const { search } = useJsSearch(pageContext.allBlogs);\n\n    const params = new URLSearchParams(location.search.slice(1));\n    const q = params.get(\"q\") ?? \"\";\n    // const results = search(q);\n    // const posts = q ? results : data.allMarkdownRemark.nodes;\n    const posts = data.allPost.edges;\n\n    return (\n        <Layout>\n            <h2 className=\"is-size-2\">Blog Posts</h2>\n            <BlogPostList posts={posts}/>\n            {/*!initialQuery && <PageButtons pageContext={pageContext} />*/}\n            <PageButtonList pageContext={pageContext} />\n        </Layout>\n    );\n}\n\nexport const pageQuery = graphql`\n    query blogPageQuery($skip: Int!, $limit: Int!) {\n        allPost(skip: $skip, limit: $limit) {\n            edges {\n                node {\n                    ID\n                    Title\n                    Description\n                    PublishedAt\n                    OriginURL\n                    SourceName\n                }\n            }\n        }\n    }\n`;\n"],"names":["BlogPostExcerpt","name","data","React","target","href","OriginURL","Title","PublishedAt","Link","to","SourceName","replace","toLowerCase","BlogPostList","render","className","this","props","posts","map","node","key","ID","PageButton","isActive","currentPage","PageButtonList","pageContext","numPages","isFirst","isLast","prev","next","start","getStart","nums","Array","from","length","_","i","role","rel","num","BlogList","location","URLSearchParams","search","slice","get","allPost","edges","Layout"],"sourceRoot":""}